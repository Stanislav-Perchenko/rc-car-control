
rc-car-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002500  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002634  08002634  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002634  08002634  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002634  08002634  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800263c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08002640  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08002640  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_line   00007562  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00006ba6  00000000  00000000  0002758f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c38  00000000  00000000  0002e135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00079124  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000830  00000000  00000000  000a97c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006667  00000000  00000000  000a9ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b0657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d4  00000000  00000000  000b06ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080025f4 	.word	0x080025f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080025f4 	.word	0x080025f4

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 f9f9 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f002 fa11 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 fb97 	bl	80008ac <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000188:	0800263c 	.word	0x0800263c
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000190:	20000024 	.word	0x20000024

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001a2:	699a      	ldr	r2, [r3, #24]
 80001a4:	4907      	ldr	r1, [pc, #28]	; (80001c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ae:	699a      	ldr	r2, [r3, #24]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4013      	ands	r3, r2
 80001b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b6:	68fb      	ldr	r3, [r7, #12]
}
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000

080001c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	0a1b      	lsrs	r3, r3, #8
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	615a      	str	r2, [r3, #20]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
	...

080001e8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f7ff ffcb 	bl	8000198 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000202:	2020      	movs	r0, #32
 8000204:	f7ff ffc8 	bl	8000198 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000208:	2004      	movs	r0, #4
 800020a:	f7ff ffc5 	bl	8000198 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800020e:	2008      	movs	r0, #8
 8000210:	f7ff ffc2 	bl	8000198 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000214:	492b      	ldr	r1, [pc, #172]	; (80002c4 <MX_GPIO_Init+0xdc>)
 8000216:	482c      	ldr	r0, [pc, #176]	; (80002c8 <MX_GPIO_Init+0xe0>)
 8000218:	f7ff ffd6 	bl	80001c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(F_R_GPIO_Port, F_R_Pin);
 800021c:	f242 0120 	movw	r1, #8224	; 0x2020
 8000220:	482a      	ldr	r0, [pc, #168]	; (80002cc <MX_GPIO_Init+0xe4>)
 8000222:	f7ff ffd1 	bl	80001c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000226:	4927      	ldr	r1, [pc, #156]	; (80002c4 <MX_GPIO_Init+0xdc>)
 8000228:	4829      	ldr	r0, [pc, #164]	; (80002d0 <MX_GPIO_Init+0xe8>)
 800022a:	f7ff ffcd 	bl	80001c8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Board_LED_Pin;
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <MX_GPIO_Init+0xdc>)
 8000230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000232:	2301      	movs	r3, #1
 8000234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000236:	2301      	movs	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4821      	ldr	r0, [pc, #132]	; (80002c8 <MX_GPIO_Init+0xe0>)
 8000244:	f001 fa4e 	bl	80016e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_11
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <MX_GPIO_Init+0xec>)
 800024a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800024c:	2300      	movs	r3, #0
 800024e:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	4619      	mov	r1, r3
 8000254:	481d      	ldr	r0, [pc, #116]	; (80002cc <MX_GPIO_Init+0xe4>)
 8000256:	f001 fa45 	bl	80016e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_R_Pin;
 800025a:	f242 0320 	movw	r3, #8224	; 0x2020
 800025e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000260:	2301      	movs	r3, #1
 8000262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000264:	2303      	movs	r3, #3
 8000266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4619      	mov	r1, r3
 8000270:	4816      	ldr	r0, [pc, #88]	; (80002cc <MX_GPIO_Init+0xe4>)
 8000272:	f001 fa37 	bl	80016e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <MX_GPIO_Init+0xf0>)
 8000278:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4813      	ldr	r0, [pc, #76]	; (80002d0 <MX_GPIO_Init+0xe8>)
 8000284:	f001 fa2e 	bl	80016e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_GPIO_Init+0xdc>)
 800028a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800028c:	2301      	movs	r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000290:	2302      	movs	r3, #2
 8000292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4619      	mov	r1, r3
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MX_GPIO_Init+0xe8>)
 800029e:	f001 fa21 	bl	80016e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CLK_24MHZ_OUT_Pin;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_GPIO_Init+0xf4>)
 80002a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80002a6:	2309      	movs	r3, #9
 80002a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002aa:	2302      	movs	r3, #2
 80002ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CLK_24MHZ_OUT_GPIO_Port, &GPIO_InitStruct);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <MX_GPIO_Init+0xe4>)
 80002b8:	f001 fa14 	bl	80016e4 <LL_GPIO_Init>

}
 80002bc:	bf00      	nop
 80002be:	3718      	adds	r7, #24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	04200020 	.word	0x04200020
 80002c8:	40011000 	.word	0x40011000
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	0498139b 	.word	0x0498139b
 80002d8:	04dffcff 	.word	0x04dffcff
 80002dc:	04010001 	.word	0x04010001

080002e0 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b083      	sub	sp, #12
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f003 0207 	and.w	r2, r3, #7
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	605a      	str	r2, [r3, #4]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	f003 0303 	and.w	r3, r3, #3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d101      	bne.n	8000382 <LL_IWDG_IsReady+0x18>
 800037e:	2301      	movs	r3, #1
 8000380:	e000      	b.n	8000384 <LL_IWDG_IsReady+0x1a>
 8000382:	2300      	movs	r3, #0
}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
	...

08000390 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <MX_IWDG_Init+0x3c>)
 8000396:	f7ff ffa3 	bl	80002e0 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 800039a:	480c      	ldr	r0, [pc, #48]	; (80003cc <MX_IWDG_Init+0x3c>)
 800039c:	f7ff ffba 	bl	8000314 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_64);
 80003a0:	2104      	movs	r1, #4
 80003a2:	480a      	ldr	r0, [pc, #40]	; (80003cc <MX_IWDG_Init+0x3c>)
 80003a4:	f7ff ffc3 	bl	800032e <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 1000);
 80003a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <MX_IWDG_Init+0x3c>)
 80003ae:	f7ff ffcd 	bl	800034c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 80003b2:	bf00      	nop
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_IWDG_Init+0x3c>)
 80003b6:	f7ff ffd8 	bl	800036a <LL_IWDG_IsReady>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d1f9      	bne.n	80003b4 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <MX_IWDG_Init+0x3c>)
 80003c2:	f7ff ff9a 	bl	80002fa <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40003000 	.word	0x40003000

080003d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f003 0307 	and.w	r3, r3, #7
 80003de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <__NVIC_SetPriorityGrouping+0x44>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003e6:	68ba      	ldr	r2, [r7, #8]
 80003e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000402:	4a04      	ldr	r2, [pc, #16]	; (8000414 <__NVIC_SetPriorityGrouping+0x44>)
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	60d3      	str	r3, [r2, #12]
}
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <__NVIC_GetPriorityGrouping+0x18>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	0a1b      	lsrs	r3, r3, #8
 8000422:	f003 0307 	and.w	r3, r3, #7
}
 8000426:	4618      	mov	r0, r3
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	2b00      	cmp	r3, #0
 8000444:	db0b      	blt.n	800045e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	f003 021f 	and.w	r2, r3, #31
 800044c:	4906      	ldr	r1, [pc, #24]	; (8000468 <__NVIC_EnableIRQ+0x34>)
 800044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000452:	095b      	lsrs	r3, r3, #5
 8000454:	2001      	movs	r0, #1
 8000456:	fa00 f202 	lsl.w	r2, r0, r2
 800045a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	e000e100 	.word	0xe000e100

0800046c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	6039      	str	r1, [r7, #0]
 8000476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047c:	2b00      	cmp	r3, #0
 800047e:	db0a      	blt.n	8000496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	b2da      	uxtb	r2, r3
 8000484:	490c      	ldr	r1, [pc, #48]	; (80004b8 <__NVIC_SetPriority+0x4c>)
 8000486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048a:	0112      	lsls	r2, r2, #4
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	440b      	add	r3, r1
 8000490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000494:	e00a      	b.n	80004ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	b2da      	uxtb	r2, r3
 800049a:	4908      	ldr	r1, [pc, #32]	; (80004bc <__NVIC_SetPriority+0x50>)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	f003 030f 	and.w	r3, r3, #15
 80004a2:	3b04      	subs	r3, #4
 80004a4:	0112      	lsls	r2, r2, #4
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	440b      	add	r3, r1
 80004aa:	761a      	strb	r2, [r3, #24]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000e100 	.word	0xe000e100
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f003 0307 	and.w	r3, r3, #7
 80004d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	f1c3 0307 	rsb	r3, r3, #7
 80004da:	2b04      	cmp	r3, #4
 80004dc:	bf28      	it	cs
 80004de:	2304      	movcs	r3, #4
 80004e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	3304      	adds	r3, #4
 80004e6:	2b06      	cmp	r3, #6
 80004e8:	d902      	bls.n	80004f0 <NVIC_EncodePriority+0x30>
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3b03      	subs	r3, #3
 80004ee:	e000      	b.n	80004f2 <NVIC_EncodePriority+0x32>
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004f4:	f04f 32ff 	mov.w	r2, #4294967295
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	43da      	mvns	r2, r3
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	401a      	ands	r2, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000508:	f04f 31ff 	mov.w	r1, #4294967295
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	fa01 f303 	lsl.w	r3, r1, r3
 8000512:	43d9      	mvns	r1, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000518:	4313      	orrs	r3, r2
         );
}
 800051a:	4618      	mov	r0, r3
 800051c:	3724      	adds	r7, #36	; 0x24
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <LL_RCC_HSE_Enable+0x18>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <LL_RCC_HSE_Enable+0x18>)
 800052e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000532:	6013      	str	r3, [r2, #0]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_RCC_HSE_IsReady+0x20>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000550:	bf0c      	ite	eq
 8000552:	2301      	moveq	r3, #1
 8000554:	2300      	movne	r3, #0
 8000556:	b2db      	uxtb	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_RCC_LSE_Enable+0x18>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <LL_RCC_LSE_Enable+0x18>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6213      	str	r3, [r2, #32]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <LL_RCC_LSE_IsReady+0x20>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b02      	cmp	r3, #2
 800058e:	bf0c      	ite	eq
 8000590:	2301      	moveq	r3, #1
 8000592:	2300      	movne	r3, #0
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_LSI_Enable+0x18>)
 80005aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <LL_RCC_LSI_Enable+0x18>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_RCC_LSI_IsReady+0x20>)
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	bf0c      	ite	eq
 80005d0:	2301      	moveq	r3, #1
 80005d2:	2300      	movne	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <LL_RCC_SetSysClkSource+0x24>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f023 0203 	bic.w	r2, r3, #3
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <LL_RCC_SetSysClkSource+0x24>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	604b      	str	r3, [r1, #4]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <LL_RCC_GetSysClkSource+0x14>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f003 030c 	and.w	r3, r3, #12
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <LL_RCC_SetAHBPrescaler+0x24>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000634:	4904      	ldr	r1, [pc, #16]	; (8000648 <LL_RCC_SetAHBPrescaler+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <LL_RCC_SetAPB1Prescaler+0x24>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	604b      	str	r3, [r1, #4]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <LL_RCC_SetAPB2Prescaler+0x24>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	604b      	str	r3, [r1, #4]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <LL_RCC_ConfigMCO>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, MCOxSource);
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <LL_RCC_ConfigMCO+0x24>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80006ac:	4904      	ldr	r1, [pc, #16]	; (80006c0 <LL_RCC_ConfigMCO+0x24>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	604b      	str	r3, [r1, #4]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <LL_RCC_SetRTCClockSource+0x24>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80006d4:	4904      	ldr	r1, [pc, #16]	; (80006e8 <LL_RCC_SetRTCClockSource+0x24>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	620b      	str	r3, [r1, #32]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV128
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <LL_RCC_GetRTCClockSource+0x14>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000

08000704 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_RCC_EnableRTC+0x18>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <LL_RCC_EnableRTC+0x18>)
 800070e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000712:	6213      	str	r3, [r2, #32]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000

08000720 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <LL_RCC_ForceBackupDomainReset+0x18>)
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	4a03      	ldr	r2, [pc, #12]	; (8000738 <LL_RCC_ForceBackupDomainReset+0x18>)
 800072a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072e:	6213      	str	r3, [r2, #32]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a03      	ldr	r2, [pc, #12]	; (8000754 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 8000746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800074a:	6213      	str	r3, [r2, #32]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000

08000758 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <LL_RCC_PLL_Enable+0x18>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <LL_RCC_PLL_Enable+0x18>)
 8000762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	40021000 	.word	0x40021000

08000774 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <LL_RCC_PLL_IsReady+0x20>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000784:	bf0c      	ite	eq
 8000786:	2301      	moveq	r3, #1
 8000788:	2300      	movne	r3, #0
 800078a:	b2db      	uxtb	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000

08000798 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	430b      	orrs	r3, r1
 80007b4:	4903      	ldr	r1, [pc, #12]	; (80007c4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80007b6:	4313      	orrs	r3, r2
 80007b8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_APB1_GRP1_EnableClock>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	4907      	ldr	r1, [pc, #28]	; (80007f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4313      	orrs	r3, r2
 80007da:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4013      	ands	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_APB2_GRP1_EnableClock>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000802:	699a      	ldr	r2, [r3, #24]
 8000804:	4907      	ldr	r1, [pc, #28]	; (8000824 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_APB2_GRP1_EnableClock+0x2c>)
 800080e:	699a      	ldr	r2, [r3, #24]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4013      	ands	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <LL_FLASH_SetLatency+0x24>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f023 0207 	bic.w	r2, r3, #7
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <LL_FLASH_SetLatency+0x24>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4313      	orrs	r3, r2
 800083e:	600b      	str	r3, [r1, #0]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <LL_FLASH_GetLatency+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0307 	and.w	r3, r3, #7
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40022000 	.word	0x40022000

08000868 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <LL_PWR_EnableBkUpAccess+0x18>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <LL_PWR_EnableBkUpAccess+0x18>)
 8000872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40007000 	.word	0x40007000

08000884 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800088e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000892:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800089a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089e:	6053      	str	r3, [r2, #4]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40010000 	.word	0x40010000

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ffa1 	bl	80007f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80008b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008ba:	f7ff ff85 	bl	80007c8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff fd86 	bl	80003d0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80008c4:	f7ff fda8 	bl	8000418 <__NVIC_GetPriorityGrouping>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fdf6 	bl	80004c0 <NVIC_EncodePriority>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f7ff fdc6 	bl	800046c <__NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  NVIC_SetPriority(RCC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008e0:	f7ff fd9a 	bl	8000418 <__NVIC_GetPriorityGrouping>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fde8 	bl	80004c0 <NVIC_EncodePriority>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4619      	mov	r1, r3
 80008f4:	2005      	movs	r0, #5
 80008f6:	f7ff fdb9 	bl	800046c <__NVIC_SetPriority>
  NVIC_EnableIRQ(RCC_IRQn);
 80008fa:	2005      	movs	r0, #5
 80008fc:	f7ff fd9a 	bl	8000434 <__NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000900:	f7ff ffc0 	bl	8000884 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f80e 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f7ff fc6e 	bl	80001e8 <MX_GPIO_Init>
  MX_IWDG_Init();
 800090c:	f7ff fd40 	bl	8000390 <MX_IWDG_Init>
  MX_RTC_Init();
 8000910:	f000 f94c 	bl	8000bac <MX_RTC_Init>
  MX_TIM3_Init();
 8000914:	f000 fbb0 	bl	8001078 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000918:	f000 fd3e 	bl	8001398 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800091c:	f000 fda8 	bl	8001470 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x74>
	...

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff ff7d 	bl	8000828 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800092e:	bf00      	nop
 8000930:	f7ff ff8e 	bl	8000850 <LL_FLASH_GetLatency>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d1fa      	bne.n	8000930 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800093a:	f7ff fdf3 	bl	8000524 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800093e:	bf00      	nop
 8000940:	f7ff fdfe 	bl	8000540 <LL_RCC_HSE_IsReady>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d1fa      	bne.n	8000940 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 800094a:	f7ff fe2b 	bl	80005a4 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800094e:	bf00      	nop
 8000950:	f7ff fe36 	bl	80005c0 <LL_RCC_LSI_IsReady>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d1fa      	bne.n	8000950 <SystemClock_Config+0x2c>
  {

  }
  LL_PWR_EnableBkUpAccess();
 800095a:	f7ff ff85 	bl	8000868 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 800095e:	f7ff fec5 	bl	80006ec <LL_RCC_GetRTCClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000968:	d003      	beq.n	8000972 <SystemClock_Config+0x4e>
  {
    LL_RCC_ForceBackupDomainReset();
 800096a:	f7ff fed9 	bl	8000720 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 800096e:	f7ff fee5 	bl	800073c <LL_RCC_ReleaseBackupDomainReset>
  }
  LL_RCC_LSE_Enable();
 8000972:	f7ff fdf7 	bl	8000564 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000976:	bf00      	nop
 8000978:	f7ff fe02 	bl	8000580 <LL_RCC_LSE_IsReady>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d1fa      	bne.n	8000978 <SystemClock_Config+0x54>
  {

  }
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8000982:	f7ff feb3 	bl	80006ec <LL_RCC_GetRTCClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098c:	d003      	beq.n	8000996 <SystemClock_Config+0x72>
  {
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 800098e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000992:	f7ff fe97 	bl	80006c4 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8000996:	f7ff feb5 	bl	8000704 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 800099a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800099e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80009a2:	f7ff fef9 	bl	8000798 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80009a6:	f7ff fed7 	bl	8000758 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009aa:	bf00      	nop
 80009ac:	f7ff fee2 	bl	8000774 <LL_RCC_PLL_IsReady>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d1fa      	bne.n	80009ac <SystemClock_Config+0x88>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fe34 	bl	8000624 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80009bc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80009c0:	f7ff fe44 	bl	800064c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 80009c4:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80009c8:	f7ff fe54 	bl	8000674 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff fe09 	bl	80005e4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009d2:	bf00      	nop
 80009d4:	f7ff fe1a 	bl	800060c <LL_RCC_GetSysClkSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b08      	cmp	r3, #8
 80009dc:	d1fa      	bne.n	80009d4 <SystemClock_Config+0xb0>
  {

  }
  LL_Init1msTick(6000000);
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <SystemClock_Config+0xd4>)
 80009e0:	f001 fdc0 	bl	8002564 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <SystemClock_Config+0xd8>)
 80009e6:	f001 fdcb 	bl	8002580 <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_PLLCLK_DIV_2);
 80009ea:	f04f 60e0 	mov.w	r0, #117440512	; 0x7000000
 80009ee:	f7ff fe55 	bl	800069c <LL_RCC_ConfigMCO>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	005b8d80 	.word	0x005b8d80
 80009fc:	02dc6c00 	.word	0x02dc6c00

08000a00 <__NVIC_GetPriorityGrouping>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <__NVIC_EnableIRQ+0x34>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <LL_RCC_EnableRTC>:
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <LL_RCC_EnableRTC+0x18>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <LL_RCC_EnableRTC+0x18>)
 8000b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1a:	6213      	str	r3, [r2, #32]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_APB1_GRP1_EnableClock>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b32:	69da      	ldr	r2, [r3, #28]
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <LL_PWR_EnableBkUpAccess>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <LL_PWR_EnableBkUpAccess+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <LL_PWR_EnableBkUpAccess+0x18>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40007000 	.word	0x40007000

08000b74 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f023 020f 	bic.w	r2, r3, #15
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	0c1b      	lsrs	r3, r3, #16
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0c1b      	lsrs	r3, r3, #16
 8000b96:	041b      	lsls	r3, r3, #16
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	b292      	uxth	r2, r2
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60da      	str	r2, [r3, #12]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	709a      	strb	r2, [r3, #2]

    LL_PWR_EnableBkUpAccess();
 8000bc8:	f7ff ffc6 	bl	8000b58 <LL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_BKP);
 8000bcc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000bd0:	f7ff ffaa 	bl	8000b28 <LL_APB1_GRP1_EnableClock>
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8000bd4:	f7ff ff9a 	bl	8000b0c <LL_RCC_EnableRTC>

  /* RTC interrupt Init */
  NVIC_SetPriority(RTC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bd8:	f7ff ff12 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff60 	bl	8000aa8 <NVIC_EncodePriority>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4619      	mov	r1, r3
 8000bec:	2003      	movs	r0, #3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RTC_IRQn);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f7ff ff12 	bl	8000a1c <__NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.AsynchPrescaler = 0xFFFFFFFFU;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	60bb      	str	r3, [r7, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <MX_RTC_Init+0x88>)
 8000c06:	f000 ffc7 	bl	8001b98 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 0xFFFFFFFFU);
 8000c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_RTC_Init+0x88>)
 8000c10:	f7ff ffb0 	bl	8000b74 <LL_RTC_SetAsynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  RTC_TimeStruct.Hours = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	713b      	strb	r3, [r7, #4]
  RTC_TimeStruct.Minutes = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	717b      	strb	r3, [r7, #5]
  RTC_TimeStruct.Seconds = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	71bb      	strb	r3, [r7, #6]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	461a      	mov	r2, r3
 8000c24:	2101      	movs	r1, #1
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <MX_RTC_Init+0x88>)
 8000c28:	f000 fff2 	bl	8001c10 <LL_RTC_TIME_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40002800 	.word	0x40002800

08000c38 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	bf0c      	ite	eq
 8000c4c:	2301      	moveq	r3, #1
 8000c4e:	2300      	movne	r3, #0
 8000c50:	b2db      	uxtb	r3, r3
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	bf0c      	ite	eq
 8000c70:	2301      	moveq	r3, #1
 8000c72:	2300      	movne	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b20      	cmp	r3, #32
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd8:	2b80      	cmp	r3, #128	; 0x80
 8000cda:	bf0c      	ite	eq
 8000cdc:	2301      	moveq	r3, #1
 8000cde:	2300      	movne	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	2b20      	cmp	r3, #32
 8000cfe:	bf0c      	ite	eq
 8000d00:	2301      	moveq	r3, #1
 8000d02:	2300      	movne	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d20:	2b80      	cmp	r3, #128	; 0x80
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	SYS_IncTick();
 8000d7a:	f000 f871 	bl	8000e60 <SYS_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_IRQn 0 */
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <USART1_IRQHandler+0x50>)
 8000da2:	f7ff ff7f 	bl	8000ca4 <LL_USART_IsActiveFlag_RXNE>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <USART1_IRQHandler+0x22>
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <USART1_IRQHandler+0x50>)
 8000dae:	f7ff ff9d 	bl	8000cec <LL_USART_IsEnabledIT_RXNE>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <USART1_IRQHandler+0x22>
	{
		USART1_RX_Callback();
 8000db8:	f000 fbc4 	bl	8001544 <USART1_RX_Callback>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dbc:	e013      	b.n	8000de6 <USART1_IRQHandler+0x4a>
	else if(LL_USART_IsActiveFlag_ORE(USART1) || LL_USART_IsActiveFlag_FE(USART1) || LL_USART_IsActiveFlag_NE(USART1))
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <USART1_IRQHandler+0x50>)
 8000dc0:	f7ff ff5e 	bl	8000c80 <LL_USART_IsActiveFlag_ORE>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10b      	bne.n	8000de2 <USART1_IRQHandler+0x46>
 8000dca:	4808      	ldr	r0, [pc, #32]	; (8000dec <USART1_IRQHandler+0x50>)
 8000dcc:	f7ff ff34 	bl	8000c38 <LL_USART_IsActiveFlag_FE>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d105      	bne.n	8000de2 <USART1_IRQHandler+0x46>
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <USART1_IRQHandler+0x50>)
 8000dd8:	f7ff ff40 	bl	8000c5c <LL_USART_IsActiveFlag_NE>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <USART1_IRQHandler+0x4a>
		(void) USART1->DR;
 8000de2:	4b02      	ldr	r3, [pc, #8]	; (8000dec <USART1_IRQHandler+0x50>)
 8000de4:	685b      	ldr	r3, [r3, #4]
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40013800 	.word	0x40013800

08000df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2) || LL_USART_IsActiveFlag_NE(USART2))
 8000df4:	4819      	ldr	r0, [pc, #100]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000df6:	f7ff ff43 	bl	8000c80 <LL_USART_IsActiveFlag_ORE>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10b      	bne.n	8000e18 <USART2_IRQHandler+0x28>
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e02:	f7ff ff19 	bl	8000c38 <LL_USART_IsActiveFlag_FE>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <USART2_IRQHandler+0x28>
 8000e0c:	4813      	ldr	r0, [pc, #76]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e0e:	f7ff ff25 	bl	8000c5c <LL_USART_IsActiveFlag_NE>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <USART2_IRQHandler+0x2e>
	{
		(void) USART2->DR;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1c:	e01b      	b.n	8000e56 <USART2_IRQHandler+0x66>
		if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e20:	f7ff ff40 	bl	8000ca4 <LL_USART_IsActiveFlag_RXNE>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <USART2_IRQHandler+0x4a>
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e2c:	f7ff ff5e 	bl	8000cec <LL_USART_IsEnabledIT_RXNE>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <USART2_IRQHandler+0x4a>
			USART2_RX_Callback();
 8000e36:	f000 fb8b 	bl	8001550 <USART2_RX_Callback>
		if (LL_USART_IsActiveFlag_TXE(USART2) && LL_USART_IsEnabledIT_TXE(USART2))
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e3c:	f7ff ff44 	bl	8000cc8 <LL_USART_IsActiveFlag_TXE>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <USART2_IRQHandler+0x66>
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <USART2_IRQHandler+0x6c>)
 8000e48:	f7ff ff62 	bl	8000d10 <LL_USART_IsEnabledIT_TXE>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <USART2_IRQHandler+0x66>
			USART2_TX_Callback();
 8000e52:	f000 fb83 	bl	800155c <USART2_TX_Callback>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40004400 	.word	0x40004400

08000e60 <SYS_IncTick>:
void SYS_ClearTick(void) {
	uwTick = 0;
}

void SYS_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	uwTick ++;
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SYS_IncTick+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <SYS_IncTick+0x18>)
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000020 	.word	0x20000020

08000e7c <LL_APB1_GRP1_EnableClock>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e86:	69da      	ldr	r2, [r3, #28]
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e92:	69da      	ldr	r2, [r3, #28]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <LL_APB2_GRP1_EnableClock>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ec2:	699a      	ldr	r2, [r3, #24]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
	...

08000efc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d01c      	beq.n	8000f46 <LL_TIM_OC_DisableFast+0x4a>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d017      	beq.n	8000f42 <LL_TIM_OC_DisableFast+0x46>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b10      	cmp	r3, #16
 8000f16:	d012      	beq.n	8000f3e <LL_TIM_OC_DisableFast+0x42>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b40      	cmp	r3, #64	; 0x40
 8000f1c:	d00d      	beq.n	8000f3a <LL_TIM_OC_DisableFast+0x3e>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f24:	d007      	beq.n	8000f36 <LL_TIM_OC_DisableFast+0x3a>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2c:	d101      	bne.n	8000f32 <LL_TIM_OC_DisableFast+0x36>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e00a      	b.n	8000f48 <LL_TIM_OC_DisableFast+0x4c>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e008      	b.n	8000f48 <LL_TIM_OC_DisableFast+0x4c>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <LL_TIM_OC_DisableFast+0x4c>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <LL_TIM_OC_DisableFast+0x4c>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <LL_TIM_OC_DisableFast+0x4c>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <LL_TIM_OC_DisableFast+0x4c>
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LL_TIM_OC_DisableFast+0x80>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	440b      	add	r3, r1
 8000f58:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <LL_TIM_OC_DisableFast+0x84>)
 8000f62:	5ccb      	ldrb	r3, [r1, r3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	2304      	movs	r3, #4
 8000f68:	408b      	lsls	r3, r1
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	601a      	str	r2, [r3, #0]

}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	0800260c 	.word	0x0800260c
 8000f80:	08002614 	.word	0x08002614

08000f84 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d01c      	beq.n	8000fce <LL_TIM_OC_EnablePreload+0x4a>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d017      	beq.n	8000fca <LL_TIM_OC_EnablePreload+0x46>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d012      	beq.n	8000fc6 <LL_TIM_OC_EnablePreload+0x42>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d00d      	beq.n	8000fc2 <LL_TIM_OC_EnablePreload+0x3e>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fac:	d007      	beq.n	8000fbe <LL_TIM_OC_EnablePreload+0x3a>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb4:	d101      	bne.n	8000fba <LL_TIM_OC_EnablePreload+0x36>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e00a      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e008      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e006      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LL_TIM_OC_EnablePreload+0x80>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	440b      	add	r3, r1
 8000fe0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <LL_TIM_OC_EnablePreload+0x84>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	4619      	mov	r1, r3
 8000fee:	2308      	movs	r3, #8
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	0800260c 	.word	0x0800260c
 8001008:	08002614 	.word	0x08002614

0800100c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800101e:	f023 0307 	bic.w	r3, r3, #7
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
	...

08001078 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b092      	sub	sp, #72	; 0x48
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800107e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2220      	movs	r2, #32
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f001 faa4 	bl	80025e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff fee6 	bl	8000e7c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 114;
 80010b0:	2372      	movs	r3, #114	; 0x72
 80010b2:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 2004;
 80010b8:	f240 73d4 	movw	r3, #2004	; 0x7d4
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80010c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010c6:	4619      	mov	r1, r3
 80010c8:	4843      	ldr	r0, [pc, #268]	; (80011d8 <MX_TIM3_Init+0x160>)
 80010ca:	f000 ff0f 	bl	8001eec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80010ce:	4842      	ldr	r0, [pc, #264]	; (80011d8 <MX_TIM3_Init+0x160>)
 80010d0:	f7ff ff04 	bl	8000edc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4840      	ldr	r0, [pc, #256]	; (80011d8 <MX_TIM3_Init+0x160>)
 80010d8:	f7ff ff98 	bl	800100c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80010dc:	2101      	movs	r1, #1
 80010de:	483e      	ldr	r0, [pc, #248]	; (80011d8 <MX_TIM3_Init+0x160>)
 80010e0:	f7ff ff50 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80010e4:	2360      	movs	r3, #96	; 0x60
 80010e6:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 990;
 80010f0:	f240 33de 	movw	r3, #990	; 0x3de
 80010f4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	461a      	mov	r2, r3
 8001100:	2101      	movs	r1, #1
 8001102:	4835      	ldr	r0, [pc, #212]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001104:	f000 ff50 	bl	8001fa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001108:	2101      	movs	r1, #1
 800110a:	4833      	ldr	r0, [pc, #204]	; (80011d8 <MX_TIM3_Init+0x160>)
 800110c:	f7ff fef6 	bl	8000efc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8001110:	2110      	movs	r1, #16
 8001112:	4831      	ldr	r0, [pc, #196]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001114:	f7ff ff36 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 1001;
 8001118:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800111c:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	461a      	mov	r2, r3
 8001124:	2110      	movs	r1, #16
 8001126:	482c      	ldr	r0, [pc, #176]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001128:	f000 ff3e 	bl	8001fa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 800112c:	2110      	movs	r1, #16
 800112e:	482a      	ldr	r0, [pc, #168]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001130:	f7ff fee4 	bl	8000efc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4827      	ldr	r0, [pc, #156]	; (80011d8 <MX_TIM3_Init+0x160>)
 800113a:	f7ff ff23 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	461a      	mov	r2, r3
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <MX_TIM3_Init+0x160>)
 800114a:	f000 ff2d 	bl	8001fa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	4821      	ldr	r0, [pc, #132]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001154:	f7ff fed2 	bl	8000efc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115c:	481e      	ldr	r0, [pc, #120]	; (80011d8 <MX_TIM3_Init+0x160>)
 800115e:	f7ff ff11 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	461a      	mov	r2, r3
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	481a      	ldr	r0, [pc, #104]	; (80011d8 <MX_TIM3_Init+0x160>)
 800116e:	f000 ff1b 	bl	8001fa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	4818      	ldr	r0, [pc, #96]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001178:	f7ff fec0 	bl	8000efc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800117c:	2100      	movs	r1, #0
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001180:	f7ff ff58 	bl	8001034 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <MX_TIM3_Init+0x160>)
 8001186:	f7ff ff67 	bl	8001058 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff fe8e 	bl	8000eac <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001190:	2008      	movs	r0, #8
 8001192:	f7ff fe8b 	bl	8000eac <LL_APB2_GRP1_EnableClock>
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = PWM_SPEED_Pin|PWM_RUDE_Pin;
 8001196:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 800119a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800119c:	2309      	movs	r3, #9
 800119e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	480b      	ldr	r0, [pc, #44]	; (80011dc <MX_TIM3_Init+0x164>)
 80011ae:	f000 fa99 	bl	80016e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM_CAM_YAW_Pin|PWM_CAM_PITCH_Pin;
 80011b2:	f240 3303 	movw	r3, #771	; 0x303
 80011b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011b8:	2309      	movs	r3, #9
 80011ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM3_Init+0x168>)
 80011ca:	f000 fa8b 	bl	80016e4 <LL_GPIO_Init>

}
 80011ce:	bf00      	nop
 80011d0:	3748      	adds	r7, #72	; 0x48
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40010c00 	.word	0x40010c00

080011e4 <__NVIC_GetPriorityGrouping>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <__NVIC_EnableIRQ+0x34>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <LL_APB1_GRP1_EnableClock>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <LL_APB1_GRP1_EnableClock+0x2c>)
 80012fa:	69da      	ldr	r2, [r3, #28]
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <LL_APB1_GRP1_EnableClock+0x2c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001306:	69da      	ldr	r2, [r3, #28]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <LL_APB2_GRP1_EnableClock>:
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LL_APB2_GRP1_EnableClock+0x2c>)
 800132a:	699a      	ldr	r2, [r3, #24]
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <LL_APB2_GRP1_EnableClock+0x2c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001336:	699a      	ldr	r2, [r3, #24]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <LL_USART_Enable>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <LL_USART_ConfigAsyncMode>:
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	615a      	str	r2, [r3, #20]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80013c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013c4:	f7ff ffac 	bl	8001320 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff ffa9 	bl	8001320 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = U1TX_Pin;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_USART1_UART_Init+0xc4>)
 80013d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d2:	2309      	movs	r3, #9
 80013d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(U1TX_GPIO_Port, &GPIO_InitStruct);
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	481f      	ldr	r0, [pc, #124]	; (8001460 <MX_USART1_UART_Init+0xc8>)
 80013e4:	f000 f97e 	bl	80016e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sBUS_Pin;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_USART1_UART_Init+0xcc>)
 80013ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80013ec:	2304      	movs	r3, #4
 80013ee:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(sBUS_GPIO_Port, &GPIO_InitStruct);
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	; (8001460 <MX_USART1_UART_Init+0xc8>)
 80013f6:	f000 f975 	bl	80016e4 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013fa:	f7ff fef3 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 80013fe:	4603      	mov	r3, r0
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff41 	bl	800128c <NVIC_EncodePriority>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	2025      	movs	r0, #37	; 0x25
 8001410:	f7ff ff12 	bl	8001238 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001414:	2025      	movs	r0, #37	; 0x25
 8001416:	f7ff fef3 	bl	8001200 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_USART1_UART_Init+0xd0>)
 800141c:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001430:	2304      	movs	r3, #4
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <MX_USART1_UART_Init+0xd4>)
 8001444:	f001 f814 	bl	8002470 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <MX_USART1_UART_Init+0xd4>)
 800144a:	f7ff ff90 	bl	800136e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_USART1_UART_Init+0xd4>)
 8001450:	f7ff ff7e 	bl	8001350 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	04020002 	.word	0x04020002
 8001460:	40010800 	.word	0x40010800
 8001464:	04040004 	.word	0x04040004
 8001468:	000186a0 	.word	0x000186a0
 800146c:	40013800 	.word	0x40013800

08001470 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001498:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800149c:	f7ff ff28 	bl	80012f0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80014a0:	2004      	movs	r0, #4
 80014a2:	f7ff ff3d 	bl	8001320 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LOG_OUT_Pin;
 80014a6:	f240 4304 	movw	r3, #1028	; 0x404
 80014aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014ac:	2309      	movs	r3, #9
 80014ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LOG_OUT_GPIO_Port, &GPIO_InitStruct);
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	481f      	ldr	r0, [pc, #124]	; (800153c <MX_USART2_UART_Init+0xcc>)
 80014be:	f000 f911 	bl	80016e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = U2RX_Pin;
 80014c2:	f640 0308 	movw	r3, #2056	; 0x808
 80014c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80014c8:	2304      	movs	r3, #4
 80014ca:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(U2RX_GPIO_Port, &GPIO_InitStruct);
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	481a      	ldr	r0, [pc, #104]	; (800153c <MX_USART2_UART_Init+0xcc>)
 80014d2:	f000 f907 	bl	80016e4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014d6:	f7ff fe85 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 80014da:	4603      	mov	r3, r0
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fed3 	bl	800128c <NVIC_EncodePriority>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	2026      	movs	r0, #38	; 0x26
 80014ec:	f7ff fea4 	bl	8001238 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80014f0:	2026      	movs	r0, #38	; 0x26
 80014f2:	f7ff fe85 	bl	8001200 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80014f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014fa:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001506:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800150e:	230c      	movs	r3, #12
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_USART2_UART_Init+0xd0>)
 8001522:	f000 ffa5 	bl	8002470 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_USART2_UART_Init+0xd0>)
 8001528:	f7ff ff21 	bl	800136e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_USART2_UART_Init+0xd0>)
 800152e:	f7ff ff0f 	bl	8001350 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	; 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010800 	.word	0x40010800
 8001540:	40004400 	.word	0x40004400

08001544 <USART1_RX_Callback>:

/* USER CODE BEGIN 1 */
__weak void USART1_RX_Callback(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	// Override this
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <USART2_RX_Callback>:
{
	// Override this
}

__weak void USART2_RX_Callback(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	// Override this
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <USART2_TX_Callback>:

__weak void USART2_TX_Callback(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	// Override this
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <LL_GPIO_SetPinMode>:
{
 8001574:	b490      	push	{r4, r7}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0e1b      	lsrs	r3, r3, #24
 8001588:	4413      	add	r3, r2
 800158a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	210f      	movs	r1, #15
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	61bb      	str	r3, [r7, #24]
  return result;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	6023      	str	r3, [r4, #0]
}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc90      	pop	{r4, r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_GPIO_SetPinSpeed>:
{
 80015d8:	b490      	push	{r4, r7}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	0e1b      	lsrs	r3, r3, #24
 80015ec:	4413      	add	r3, r2
 80015ee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	613b      	str	r3, [r7, #16]
  return result;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	2103      	movs	r1, #3
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	61bb      	str	r3, [r7, #24]
  return result;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	6023      	str	r3, [r4, #0]
}
 8001632:	bf00      	nop
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bc90      	pop	{r4, r7}
 800163a:	4770      	bx	lr

0800163c <LL_GPIO_SetPinOutputType>:
{
 800163c:	b490      	push	{r4, r7}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	0e1b      	lsrs	r3, r3, #24
 8001650:	4413      	add	r3, r2
 8001652:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	613b      	str	r3, [r7, #16]
  return result;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	2104      	movs	r1, #4
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	61bb      	str	r3, [r7, #24]
  return result;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	6023      	str	r3, [r4, #0]
}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bc90      	pop	{r4, r7}
 800169e:	4770      	bx	lr

080016a0 <LL_GPIO_SetPinPull>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	613b      	str	r3, [r7, #16]
  return result;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	408b      	lsls	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	60da      	str	r2, [r3, #12]
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	60fb      	str	r3, [r7, #12]
  return result;
 8001704:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800170e:	e044      	b.n	800179a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	409a      	lsls	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03a      	beq.n	8001794 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	2b07      	cmp	r3, #7
 8001722:	d806      	bhi.n	8001732 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001724:	f240 1201 	movw	r2, #257	; 0x101
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	e008      	b.n	8001744 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b08      	subs	r3, #8
 8001736:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001742:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d106      	bne.n	800175a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	461a      	mov	r2, r3
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffa3 	bl	80016a0 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	461a      	mov	r2, r3
 8001760:	69b9      	ldr	r1, [r7, #24]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff06 	bl	8001574 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d003      	beq.n	8001778 <LL_GPIO_Init+0x94>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b09      	cmp	r3, #9
 8001776:	d10d      	bne.n	8001794 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	461a      	mov	r2, r3
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff29 	bl	80015d8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	461a      	mov	r2, r3
 800178c:	69b9      	ldr	r1, [r7, #24]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff54 	bl	800163c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1b4      	bne.n	8001710 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <LL_RCC_GetSysClkSource>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <LL_RCC_GetSysClkSource+0x14>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_GetAHBPrescaler>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <LL_RCC_GetAHBPrescaler+0x14>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000

080017e0 <LL_RCC_GetAPB1Prescaler>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000

080017f8 <LL_RCC_GetAPB2Prescaler>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <LL_RCC_GetAPB2Prescaler+0x14>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <LL_RCC_PLL_GetMainSource+0x14>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000

08001828 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000

08001840 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <LL_RCC_PLL_GetPrediv+0x18>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	0c5b      	lsrs	r3, r3, #17
 800184a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001864:	f000 f820 	bl	80018a8 <RCC_GetSystemClockFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f83e 	bl	80018f4 <RCC_GetHCLKClockFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f84c 	bl	8001920 <RCC_GetPCLK1ClockFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f858 	bl	8001948 <RCC_GetPCLK2ClockFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60da      	str	r2, [r3, #12]
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80018b2:	f7ff ff7d 	bl	80017b0 <LL_RCC_GetSysClkSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d00c      	beq.n	80018d6 <RCC_GetSystemClockFreq+0x2e>
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d80e      	bhi.n	80018de <RCC_GetSystemClockFreq+0x36>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <RCC_GetSystemClockFreq+0x22>
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d003      	beq.n	80018d0 <RCC_GetSystemClockFreq+0x28>
 80018c8:	e009      	b.n	80018de <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <RCC_GetSystemClockFreq+0x48>)
 80018cc:	607b      	str	r3, [r7, #4]
      break;
 80018ce:	e009      	b.n	80018e4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <RCC_GetSystemClockFreq+0x48>)
 80018d2:	607b      	str	r3, [r7, #4]
      break;
 80018d4:	e006      	b.n	80018e4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80018d6:	f000 f84b 	bl	8001970 <RCC_PLL_GetFreqDomain_SYS>
 80018da:	6078      	str	r0, [r7, #4]
      break;
 80018dc:	e002      	b.n	80018e4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <RCC_GetSystemClockFreq+0x48>)
 80018e0:	607b      	str	r3, [r7, #4]
      break;
 80018e2:	bf00      	nop
  }

  return frequency;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80018fc:	f7ff ff64 	bl	80017c8 <LL_RCC_GetAHBPrescaler>
 8001900:	4603      	mov	r3, r0
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <RCC_GetHCLKClockFreq+0x28>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	40d3      	lsrs	r3, r2
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0800261c 	.word	0x0800261c

08001920 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001928:	f7ff ff5a 	bl	80017e0 <LL_RCC_GetAPB1Prescaler>
 800192c:	4603      	mov	r3, r0
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <RCC_GetPCLK1ClockFreq+0x24>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	40d3      	lsrs	r3, r2
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	0800262c 	.word	0x0800262c

08001948 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001950:	f7ff ff52 	bl	80017f8 <LL_RCC_GetAPB2Prescaler>
 8001954:	4603      	mov	r3, r0
 8001956:	0adb      	lsrs	r3, r3, #11
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <RCC_GetPCLK2ClockFreq+0x24>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	40d3      	lsrs	r3, r2
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0800262c 	.word	0x0800262c

08001970 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800197e:	f7ff ff47 	bl	8001810 <LL_RCC_PLL_GetMainSource>
 8001982:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d003      	beq.n	800199a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001992:	e00b      	b.n	80019ac <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001996:	607b      	str	r3, [r7, #4]
      break;
 8001998:	e00b      	b.n	80019b2 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800199a:	f7ff ff51 	bl	8001840 <LL_RCC_PLL_GetPrediv>
 800199e:	4603      	mov	r3, r0
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]
      break;
 80019aa:	e002      	b.n	80019b2 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80019ae:	607b      	str	r3, [r7, #4]
      break;
 80019b0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80019b2:	f7ff ff39 	bl	8001828 <LL_RCC_PLL_GetMultiplicator>
 80019b6:	4603      	mov	r3, r0
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	3302      	adds	r3, #2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	003d0900 	.word	0x003d0900
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <LL_RTC_SetAsynchPrescaler>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b292      	uxth	r2, r2
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60da      	str	r2, [r3, #12]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <LL_RTC_SetOutputSource>:
  *         @arg @ref LL_RTC_CALIB_OUTPUT_ALARM
  *         @arg @ref LL_RTC_CALIB_OUTPUT_SECOND
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetOutputSource(BKP_TypeDef *BKPx, uint32_t OutputSource)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <LL_RTC_EnableWriteProtection>:
  * @rmtoll CRL          CNF           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 0210 	bic.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <LL_RTC_DisableWriteProtection>:
  * @rmtoll CRL          RTC_CRL_CNF           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f043 0210 	orr.w	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	605a      	str	r2, [r3, #4]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <LL_RTC_TIME_Set>:
  * @param  RTCx RTC Instance
  * @param  TimeCounter Value between Min_Data=0x00 and Max_Data=0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Set(RTC_TypeDef *RTCx, uint32_t TimeCounter)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  /* Set RTC COUNTER MSB word */
  WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	0c1a      	lsrs	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	61da      	str	r2, [r3, #28]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <LL_RTC_TAMPER_Disable>:
  * @brief  Disable RTC_TAMPx Tamper
  * @rmtoll CR    TPE        LL_RTC_TAMPER_Disable\n
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TAMPER_Disable(BKP_TypeDef *BKPx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <LL_RTC_TAMPER_Disable+0x20>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <LL_RTC_TAMPER_Disable+0x20>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40006c00 	.word	0x40006c00

08001ab4 <LL_RTC_ClearFlag_ALR>:
  * @rmtoll CRL          ALRF         LL_RTC_ClearFlag_ALR
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALR(RTC_TypeDef *RTCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 0202 	bic.w	r2, r3, #2
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	605a      	str	r2, [r3, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <LL_RTC_ClearFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f023 0208 	bic.w	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	605a      	str	r2, [r3, #4]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <LL_RTC_ClearFlag_OW>:
  * @rmtoll CRL          OWF           LL_RTC_ClearFlag_OW
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_OW(RTC_TypeDef *RTCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 0204 	bic.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <LL_RTC_ClearFlag_SEC>:
  * @rmtoll CRL          SECF           LL_RTC_ClearFlag_SEC
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_SEC(RTC_TypeDef *RTCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 0201 	bic.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	605a      	str	r2, [r3, #4]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <LL_RTC_IsActiveFlag_RTOF>:
  * @rmtoll CRL          RTOFF         LL_RTC_IsActiveFlag_RTOF
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
  /* Waiting for synchro */
  if (LL_RTC_WaitForSynchro(RTCx) != ERROR)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f906 	bl	8001db8 <LL_RTC_WaitForSynchro>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d026      	beq.n	8001c00 <LL_RTC_Init+0x68>
  {
    /* Set Initialization mode */
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8a2 	bl	8001cfc <LL_RTC_EnterInitMode>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d020      	beq.n	8001c00 <LL_RTC_Init+0x68>
    {
      /* Clear Flag Bits */
      LL_RTC_ClearFlag_ALR(RTCx);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff78 	bl	8001ab4 <LL_RTC_ClearFlag_ALR>
      LL_RTC_ClearFlag_OW(RTCx);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffa5 	bl	8001b14 <LL_RTC_ClearFlag_OW>
      LL_RTC_ClearFlag_SEC(RTCx);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffb1 	bl	8001b32 <LL_RTC_ClearFlag_SEC>

      if (RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <LL_RTC_Init+0x46>
      {
        /* Disable the selected Tamper Pin */
        LL_RTC_TAMPER_Disable(BKP);
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <LL_RTC_Init+0x74>)
 8001bda:	f7ff ff59 	bl	8001a90 <LL_RTC_TAMPER_Disable>
      }
      /* Set the signal which will be routed to RTC Tamper Pin */
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <LL_RTC_Init+0x74>)
 8001be6:	f7ff ff11 	bl	8001a0c <LL_RTC_SetOutputSource>

      /* Configure Synchronous and Asynchronous prescaler factor */
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff feef 	bl	80019d4 <LL_RTC_SetAsynchPrescaler>

      /* Exit Initialization Mode */
      LL_RTC_ExitInitMode(RTCx);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8af 	bl	8001d5a <LL_RTC_ExitInitMode>

      status = SUCCESS;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40006c00 	.word	0x40006c00

08001c10 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	75fb      	strb	r3, [r7, #23]
  uint32_t counter_time = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Enter Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f869 	bl	8001cfc <LL_RTC_EnterInitMode>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d05d      	beq.n	8001cec <LL_RTC_TIME_Init+0xdc>
  {
    /* Check the input parameters format */
    if (RTC_Format == LL_RTC_FORMAT_BIN)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d117      	bne.n	8001c66 <LL_RTC_TIME_Init+0x56>
    {
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c40:	fb03 f202 	mul.w	r2, r3, r2
                                ((uint32_t)RTC_TimeStruct->Minutes * 60U) + \
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a5b      	subs	r3, r3, r1
 8001c50:	009b      	lsls	r3, r3, #2
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8001c52:	4413      	add	r3, r2
                                ((uint32_t)RTC_TimeStruct->Seconds));
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	7892      	ldrb	r2, [r2, #2]
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8001c58:	4413      	add	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
      LL_RTC_TIME_Set(RTCx, counter_time);
 8001c5c:	6939      	ldr	r1, [r7, #16]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7ff ff04 	bl	8001a6c <LL_RTC_TIME_Set>
 8001c64:	e040      	b.n	8001ce8 <LL_RTC_TIME_Init+0xd8>
    }
    else
    {
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c8c:	fb03 f202 	mul.w	r2, r3, r2
                      ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)) * 60U) + \
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	0089      	lsls	r1, r1, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	b2d9      	uxtb	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	785b      	ldrb	r3, [r3, #1]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	440b      	add	r3, r1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a5b      	subs	r3, r3, r1
 8001cb8:	009b      	lsls	r3, r3, #2
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8001cba:	4413      	add	r3, r2
                      ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds))));
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	7892      	ldrb	r2, [r2, #2]
 8001cc0:	0912      	lsrs	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	0089      	lsls	r1, r1, #2
 8001cc8:	440a      	add	r2, r1
 8001cca:	0052      	lsls	r2, r2, #1
 8001ccc:	b2d1      	uxtb	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	7892      	ldrb	r2, [r2, #2]
 8001cd2:	f002 020f 	and.w	r2, r2, #15
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440a      	add	r2, r1
 8001cda:	b2d2      	uxtb	r2, r2
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8001cdc:	4413      	add	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      LL_RTC_TIME_Set(RTCx, counter_time);
 8001ce0:	6939      	ldr	r1, [r7, #16]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fec2 	bl	8001a6c <LL_RTC_TIME_Set>
    }
    status = SUCCESS;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75fb      	strb	r3, [r7, #23]
  }
  /* Exit Initialization mode */
  LL_RTC_ExitInitMode(RTCx);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f834 	bl	8001d5a <LL_RTC_ExitInitMode>

  return status;
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d08:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff1c 	bl	8001b50 <LL_RTC_IsActiveFlag_RTOF>
 8001d18:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8001d1a:	e010      	b.n	8001d3e <LL_RTC_EnterInitMode+0x42>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001d1c:	f7ff ff2a 	bl	8001b74 <LL_SYSTICK_IsActiveCounterFlag>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <LL_RTC_EnterInitMode+0x30>
    {
      timeout --;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff0f 	bl	8001b50 <LL_RTC_IsActiveFlag_RTOF>
 8001d32:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <LL_RTC_EnterInitMode+0x42>
    {
      status = ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <LL_RTC_EnterInitMode+0x4e>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d1e8      	bne.n	8001d1c <LL_RTC_EnterInitMode+0x20>
    }
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fe7f 	bl	8001a4e <LL_RTC_DisableWriteProtection>

  return status;
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fe5d 	bl	8001a30 <LL_RTC_EnableWriteProtection>

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff feea 	bl	8001b50 <LL_RTC_IsActiveFlag_RTOF>
 8001d7c:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8001d7e:	e010      	b.n	8001da2 <LL_RTC_ExitInitMode+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001d80:	f7ff fef8 	bl	8001b74 <LL_SYSTICK_IsActiveCounterFlag>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <LL_RTC_ExitInitMode+0x36>
    {
      timeout --;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fedd 	bl	8001b50 <LL_RTC_IsActiveFlag_RTOF>
 8001d96:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <LL_RTC_ExitInitMode+0x48>
    {
      status = ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <LL_RTC_ExitInitMode+0x54>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d1e8      	bne.n	8001d80 <LL_RTC_ExitInitMode+0x26>
    }
  }
  return status;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8001dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fe91 	bl	8001af6 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fe7c 	bl	8001ad2 <LL_RTC_IsActiveFlag_RS>
 8001dda:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8001ddc:	e010      	b.n	8001e00 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001dde:	f7ff fec9 	bl	8001b74 <LL_SYSTICK_IsActiveCounterFlag>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d102      	bne.n	8001dee <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fe6f 	bl	8001ad2 <LL_RTC_IsActiveFlag_RS>
 8001df4:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <LL_RTC_WaitForSynchro+0x54>
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e8      	bne.n	8001dde <LL_RTC_WaitForSynchro+0x26>
    }
  }

  return (status);
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <LL_TIM_SetPrescaler>:
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <LL_TIM_SetAutoReload>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <LL_TIM_SetRepetitionCounter>:
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <LL_TIM_OC_SetCompareCH1>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_TIM_OC_SetCompareCH2>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <LL_TIM_OC_SetCompareCH3>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <LL_TIM_OC_SetCompareCH4>:
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	615a      	str	r2, [r3, #20]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
	...

08001eec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <LL_TIM_Init+0xb0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <LL_TIM_Init+0x30>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d007      	beq.n	8001f1c <LL_TIM_Init+0x30>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <LL_TIM_Init+0xb4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <LL_TIM_Init+0x30>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <LL_TIM_Init+0xb8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d106      	bne.n	8001f2a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <LL_TIM_Init+0xb0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <LL_TIM_Init+0x5e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d007      	beq.n	8001f4a <LL_TIM_Init+0x5e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <LL_TIM_Init+0xb4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <LL_TIM_Init+0x5e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <LL_TIM_Init+0xb8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d106      	bne.n	8001f58 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff63 	bl	8001e30 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff50 	bl	8001e16 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <LL_TIM_Init+0xb0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d105      	bne.n	8001f8a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff60 	bl	8001e4a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff9e 	bl	8001ecc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800

08001fa8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fbe:	d027      	beq.n	8002010 <LL_TIM_OC_Init+0x68>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc6:	d82a      	bhi.n	800201e <LL_TIM_OC_Init+0x76>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fce:	d018      	beq.n	8002002 <LL_TIM_OC_Init+0x5a>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd6:	d822      	bhi.n	800201e <LL_TIM_OC_Init+0x76>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <LL_TIM_OC_Init+0x3e>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d007      	beq.n	8001ff4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001fe4:	e01b      	b.n	800201e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f81f 	bl	800202c <OC1Config>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ff2:	e015      	b.n	8002020 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f87e 	bl	80020f8 <OC2Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8002000:	e00e      	b.n	8002020 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f8e1 	bl	80021cc <OC3Config>
 800200a:	4603      	mov	r3, r0
 800200c:	75fb      	strb	r3, [r7, #23]
      break;
 800200e:	e007      	b.n	8002020 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f944 	bl	80022a0 <OC4Config>
 8002018:	4603      	mov	r3, r0
 800201a:	75fb      	strb	r3, [r7, #23]
      break;
 800201c:	e000      	b.n	8002020 <LL_TIM_OC_Init+0x78>
      break;
 800201e:	bf00      	nop
  }

  return result;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f023 0201 	bic.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f023 0202 	bic.w	r2, r3, #2
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0201 	bic.w	r2, r3, #1
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <OC1Config+0xc8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d11e      	bne.n	80020cc <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f023 0208 	bic.w	r2, r3, #8
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f023 0204 	bic.w	r2, r3, #4
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fec0 	bl	8001e64 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40012c00 	.word	0x40012c00

080020f8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f023 0210 	bic.w	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0220 	bic.w	r2, r3, #32
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0210 	bic.w	r2, r3, #16
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <OC2Config+0xd0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d11f      	bne.n	80021a0 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	019b      	lsls	r3, r3, #6
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	019b      	lsls	r3, r3, #6
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fe63 	bl	8001e7e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40012c00 	.word	0x40012c00

080021cc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <OC3Config+0xd0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d11f      	bne.n	8002272 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	029b      	lsls	r3, r3, #10
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	015b      	lsls	r3, r3, #5
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fe07 	bl	8001e98 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00

080022a0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	031b      	lsls	r3, r3, #12
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	031b      	lsls	r3, r3, #12
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <OC4Config+0xa0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d107      	bne.n	8002318 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	019b      	lsls	r3, r3, #6
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fdc1 	bl	8001eb2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40012c00 	.word	0x40012c00

08002344 <LL_USART_IsEnabled>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <LL_USART_SetStopBitsLength>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	611a      	str	r2, [r3, #16]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <LL_USART_SetHWFlowCtrl>:
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	615a      	str	r2, [r3, #20]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <LL_USART_SetBaudRate>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <LL_USART_SetBaudRate+0xb8>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	b29b      	uxth	r3, r3
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	b299      	uxth	r1, r3
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <LL_USART_SetBaudRate+0xb8>)
 80023f8:	fba3 0302 	umull	r0, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	2064      	movs	r0, #100	; 0x64
 8002400:	fb00 f303 	mul.w	r3, r0, r3
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	3332      	adds	r3, #50	; 0x32
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <LL_USART_SetBaudRate+0xb8>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	b29b      	uxth	r3, r3
 8002414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002418:	b29b      	uxth	r3, r3
 800241a:	440b      	add	r3, r1
 800241c:	b299      	uxth	r1, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <LL_USART_SetBaudRate+0xb8>)
 8002434:	fba3 0302 	umull	r0, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2064      	movs	r0, #100	; 0x64
 800243c:	fb00 f303 	mul.w	r3, r0, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	3332      	adds	r3, #50	; 0x32
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <LL_USART_SetBaudRate+0xb8>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	b29b      	uxth	r3, r3
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	b29b      	uxth	r3, r3
 8002456:	440b      	add	r3, r1
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	51eb851f 	.word	0x51eb851f

08002470 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff5e 	bl	8002344 <LL_USART_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d145      	bne.n	800251a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002496:	f023 030c 	bic.w	r3, r3, #12
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	6851      	ldr	r1, [r2, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	4311      	orrs	r1, r2
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6912      	ldr	r2, [r2, #16]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff57 	bl	800236a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff63 	bl	800238e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f9c5 	bl	800185c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a13      	ldr	r2, [pc, #76]	; (8002524 <LL_USART_Init+0xb4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d102      	bne.n	80024e0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e00c      	b.n	80024fa <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <LL_USART_Init+0xb8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d102      	bne.n	80024ee <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e005      	b.n	80024fa <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <LL_USART_Init+0xbc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	69b9      	ldr	r1, [r7, #24]
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff4d 	bl	80023b4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800251a:	7ffb      	ldrb	r3, [r7, #31]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40013800 	.word	0x40013800
 8002528:	40004400 	.word	0x40004400
 800252c:	40004800 	.word	0x40004800

08002530 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <LL_InitTick+0x30>)
 8002544:	3b01      	subs	r3, #1
 8002546:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <LL_InitTick+0x30>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <LL_InitTick+0x30>)
 8002550:	2205      	movs	r2, #5
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800256c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffdd 	bl	8002530 <LL_InitTick>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002588:	4a03      	ldr	r2, [pc, #12]	; (8002598 <LL_SetSystemCoreClock+0x18>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000000 	.word	0x20000000

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2600      	movs	r6, #0
 80025a0:	4d0c      	ldr	r5, [pc, #48]	; (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	; (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	f000 f822 	bl	80025f4 <_init>
 80025b0:	2600      	movs	r6, #0
 80025b2:	4d0a      	ldr	r5, [pc, #40]	; (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <__libc_init_array+0x44>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a6      	cmp	r6, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c4:	4798      	blx	r3
 80025c6:	3601      	adds	r6, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ce:	4798      	blx	r3
 80025d0:	3601      	adds	r6, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	08002634 	.word	0x08002634
 80025d8:	08002634 	.word	0x08002634
 80025dc:	08002634 	.word	0x08002634
 80025e0:	08002638 	.word	0x08002638

080025e4 <memset>:
 80025e4:	4603      	mov	r3, r0
 80025e6:	4402      	add	r2, r0
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d100      	bne.n	80025ee <memset+0xa>
 80025ec:	4770      	bx	lr
 80025ee:	f803 1b01 	strb.w	r1, [r3], #1
 80025f2:	e7f9      	b.n	80025e8 <memset+0x4>

080025f4 <_init>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr

08002600 <_fini>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	bf00      	nop
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr
