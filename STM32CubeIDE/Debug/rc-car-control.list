
rc-car-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ac  080036ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080036ac  080036ac  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ac  080036ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080036b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000068  0800371c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800371c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_line   00008597  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007da0  00000000  00000000  00028628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc9  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00032398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007f054  00000000  00000000  00032d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000868  00000000  00000000  000b1d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017c41  00000000  00000000  000b25d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  000ca26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003490 	.word	0x08003490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003490 	.word	0x08003490

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 fe53 	bl	8001e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f002 fd25 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f001 f805 	bl	8001188 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000188:	080036b4 	.word	0x080036b4
  ldr r2, =_sbss
 800018c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000190:	200003e8 	.word	0x200003e8

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(uint16_t *all_virt_addr_table, uint16_t all_virt_addr_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]
	VirtAddVarTab = all_virt_addr_table;
 80001a4:	4a9f      	ldr	r2, [pc, #636]	; (8000424 <EE_Init+0x28c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6013      	str	r3, [r2, #0]
	EepromTotalDataSize = all_virt_addr_size;
 80001aa:	4a9f      	ldr	r2, [pc, #636]	; (8000428 <EE_Init+0x290>)
 80001ac:	887b      	ldrh	r3, [r7, #2]
 80001ae:	8013      	strh	r3, [r2, #0]

  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80001b0:	2306      	movs	r3, #6
 80001b2:	827b      	strh	r3, [r7, #18]
 80001b4:	2306      	movs	r3, #6
 80001b6:	823b      	strh	r3, [r7, #16]
  uint16_t VarIdx = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	81fb      	strh	r3, [r7, #14]
 80001c0:	2300      	movs	r3, #0
 80001c2:	81bb      	strh	r3, [r7, #12]
  int16_t x = -1;
 80001c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c8:	82bb      	strh	r3, [r7, #20]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80001ca:	4b98      	ldr	r3, [pc, #608]	; (800042c <EE_Init+0x294>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	827b      	strh	r3, [r7, #18]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80001d0:	4b97      	ldr	r3, [pc, #604]	; (8000430 <EE_Init+0x298>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	823b      	strh	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80001d6:	8a7b      	ldrh	r3, [r7, #18]
 80001d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001dc:	4293      	cmp	r3, r2
 80001de:	d00b      	beq.n	80001f8 <EE_Init+0x60>
 80001e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80001e4:	f280 8136 	bge.w	8000454 <EE_Init+0x2bc>
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	f000 80b5 	beq.w	8000358 <EE_Init+0x1c0>
 80001ee:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d033      	beq.n	800025e <EE_Init+0xc6>
 80001f6:	e12d      	b.n	8000454 <EE_Init+0x2bc>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d10a      	bne.n	8000214 <EE_Init+0x7c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80001fe:	488b      	ldr	r0, [pc, #556]	; (800042c <EE_Init+0x294>)
 8000200:	f001 fe12 	bl	8001e28 <FLASH_ErasePage>
 8000204:	4603      	mov	r3, r0
 8000206:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000208:	897b      	ldrh	r3, [r7, #10]
 800020a:	2b04      	cmp	r3, #4
 800020c:	f000 812b 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000210:	897b      	ldrh	r3, [r7, #10]
 8000212:	e130      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000214:	8a3b      	ldrh	r3, [r7, #16]
 8000216:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800021a:	4293      	cmp	r3, r2
 800021c:	d115      	bne.n	800024a <EE_Init+0xb2>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800021e:	4883      	ldr	r0, [pc, #524]	; (800042c <EE_Init+0x294>)
 8000220:	f001 fe02 	bl	8001e28 <FLASH_ErasePage>
 8000224:	4603      	mov	r3, r0
 8000226:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000228:	897b      	ldrh	r3, [r7, #10]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d001      	beq.n	8000232 <EE_Init+0x9a>
        {
          return FlashStatus;
 800022e:	897b      	ldrh	r3, [r7, #10]
 8000230:	e121      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000232:	2100      	movs	r1, #0
 8000234:	487e      	ldr	r0, [pc, #504]	; (8000430 <EE_Init+0x298>)
 8000236:	f001 fe29 	bl	8001e8c <FLASH_ProgramHalfWord>
 800023a:	4603      	mov	r3, r0
 800023c:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800023e:	897b      	ldrh	r3, [r7, #10]
 8000240:	2b04      	cmp	r3, #4
 8000242:	f000 8110 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000246:	897b      	ldrh	r3, [r7, #10]
 8000248:	e115      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800024a:	f000 f9bb 	bl	80005c4 <EE_Format>
 800024e:	4603      	mov	r3, r0
 8000250:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000252:	897b      	ldrh	r3, [r7, #10]
 8000254:	2b04      	cmp	r3, #4
 8000256:	f000 8106 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 800025a:	897b      	ldrh	r3, [r7, #10]
 800025c:	e10b      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800025e:	8a3b      	ldrh	r3, [r7, #16]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d154      	bne.n	800030e <EE_Init+0x176>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000264:	2300      	movs	r3, #0
 8000266:	82fb      	strh	r3, [r7, #22]
 8000268:	e036      	b.n	80002d8 <EE_Init+0x140>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800026a:	4b72      	ldr	r3, [pc, #456]	; (8000434 <EE_Init+0x29c>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	b29a      	uxth	r2, r3
 8000270:	4b6c      	ldr	r3, [pc, #432]	; (8000424 <EE_Init+0x28c>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	8afb      	ldrh	r3, [r7, #22]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	440b      	add	r3, r1
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d101      	bne.n	8000284 <EE_Init+0xec>
          {
            x = VarIdx;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 8000284:	8afa      	ldrh	r2, [r7, #22]
 8000286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800028a:	429a      	cmp	r2, r3
 800028c:	d021      	beq.n	80002d2 <EE_Init+0x13a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800028e:	4b65      	ldr	r3, [pc, #404]	; (8000424 <EE_Init+0x28c>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	8afb      	ldrh	r3, [r7, #22]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4413      	add	r3, r2
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	4967      	ldr	r1, [pc, #412]	; (8000438 <EE_Init+0x2a0>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f8f1 	bl	8000484 <EE_ReadVariable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d012      	beq.n	80002d2 <EE_Init+0x13a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80002ac:	4b5d      	ldr	r3, [pc, #372]	; (8000424 <EE_Init+0x28c>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	8afb      	ldrh	r3, [r7, #22]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	4a5f      	ldr	r2, [pc, #380]	; (8000438 <EE_Init+0x2a0>)
 80002ba:	8812      	ldrh	r2, [r2, #0]
 80002bc:	4611      	mov	r1, r2
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f9ec 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80002c4:	4603      	mov	r3, r0
 80002c6:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d001      	beq.n	80002d2 <EE_Init+0x13a>
              {
                return EepromStatus;
 80002ce:	89fb      	ldrh	r3, [r7, #14]
 80002d0:	e0d1      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3301      	adds	r3, #1
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	4b53      	ldr	r3, [pc, #332]	; (8000428 <EE_Init+0x290>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	8afa      	ldrh	r2, [r7, #22]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3c3      	bcc.n	800026a <EE_Init+0xd2>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	4851      	ldr	r0, [pc, #324]	; (800042c <EE_Init+0x294>)
 80002e6:	f001 fdd1 	bl	8001e8c <FLASH_ProgramHalfWord>
 80002ea:	4603      	mov	r3, r0
 80002ec:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80002ee:	897b      	ldrh	r3, [r7, #10]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d001      	beq.n	80002f8 <EE_Init+0x160>
        {
          return FlashStatus;
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	e0be      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80002f8:	484d      	ldr	r0, [pc, #308]	; (8000430 <EE_Init+0x298>)
 80002fa:	f001 fd95 	bl	8001e28 <FLASH_ErasePage>
 80002fe:	4603      	mov	r3, r0
 8000300:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000302:	897b      	ldrh	r3, [r7, #10]
 8000304:	2b04      	cmp	r3, #4
 8000306:	f000 80b0 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 800030a:	897b      	ldrh	r3, [r7, #10]
 800030c:	e0b3      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800030e:	8a3b      	ldrh	r3, [r7, #16]
 8000310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000314:	4293      	cmp	r3, r2
 8000316:	d115      	bne.n	8000344 <EE_Init+0x1ac>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000318:	4845      	ldr	r0, [pc, #276]	; (8000430 <EE_Init+0x298>)
 800031a:	f001 fd85 	bl	8001e28 <FLASH_ErasePage>
 800031e:	4603      	mov	r3, r0
 8000320:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000322:	897b      	ldrh	r3, [r7, #10]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d001      	beq.n	800032c <EE_Init+0x194>
        {
          return FlashStatus;
 8000328:	897b      	ldrh	r3, [r7, #10]
 800032a:	e0a4      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800032c:	2100      	movs	r1, #0
 800032e:	483f      	ldr	r0, [pc, #252]	; (800042c <EE_Init+0x294>)
 8000330:	f001 fdac 	bl	8001e8c <FLASH_ProgramHalfWord>
 8000334:	4603      	mov	r3, r0
 8000336:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000338:	897b      	ldrh	r3, [r7, #10]
 800033a:	2b04      	cmp	r3, #4
 800033c:	f000 8095 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000340:	897b      	ldrh	r3, [r7, #10]
 8000342:	e098      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000344:	f000 f93e 	bl	80005c4 <EE_Format>
 8000348:	4603      	mov	r3, r0
 800034a:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800034c:	897b      	ldrh	r3, [r7, #10]
 800034e:	2b04      	cmp	r3, #4
 8000350:	f000 808b 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000354:	897b      	ldrh	r3, [r7, #10]
 8000356:	e08e      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000358:	8a3b      	ldrh	r3, [r7, #16]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d109      	bne.n	8000372 <EE_Init+0x1da>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800035e:	f000 f931 	bl	80005c4 <EE_Format>
 8000362:	4603      	mov	r3, r0
 8000364:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	2b04      	cmp	r3, #4
 800036a:	f000 8080 	beq.w	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800036e:	897b      	ldrh	r3, [r7, #10]
 8000370:	e081      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000372:	8a3b      	ldrh	r3, [r7, #16]
 8000374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000378:	4293      	cmp	r3, r2
 800037a:	d109      	bne.n	8000390 <EE_Init+0x1f8>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800037c:	482c      	ldr	r0, [pc, #176]	; (8000430 <EE_Init+0x298>)
 800037e:	f001 fd53 	bl	8001e28 <FLASH_ErasePage>
 8000382:	4603      	mov	r3, r0
 8000384:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000386:	897b      	ldrh	r3, [r7, #10]
 8000388:	2b04      	cmp	r3, #4
 800038a:	d070      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800038c:	897b      	ldrh	r3, [r7, #10]
 800038e:	e072      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000390:	2300      	movs	r3, #0
 8000392:	82fb      	strh	r3, [r7, #22]
 8000394:	e036      	b.n	8000404 <EE_Init+0x26c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <EE_Init+0x2a4>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <EE_Init+0x28c>)
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	8afb      	ldrh	r3, [r7, #22]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	440b      	add	r3, r1
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d101      	bne.n	80003b0 <EE_Init+0x218>
          {
            x = VarIdx;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 80003b0:	8afa      	ldrh	r2, [r7, #22]
 80003b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d021      	beq.n	80003fe <EE_Init+0x266>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <EE_Init+0x28c>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	8afb      	ldrh	r3, [r7, #22]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	491c      	ldr	r1, [pc, #112]	; (8000438 <EE_Init+0x2a0>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f85b 	bl	8000484 <EE_ReadVariable>
 80003ce:	4603      	mov	r3, r0
 80003d0:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80003d2:	89bb      	ldrh	r3, [r7, #12]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d012      	beq.n	80003fe <EE_Init+0x266>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <EE_Init+0x28c>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <EE_Init+0x2a0>)
 80003e6:	8812      	ldrh	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f956 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80003f0:	4603      	mov	r3, r0
 80003f2:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d001      	beq.n	80003fe <EE_Init+0x266>
              {
                return EepromStatus;
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	e03b      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EE_Init+0x290>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	8afa      	ldrh	r2, [r7, #22]
 800040a:	429a      	cmp	r2, r3
 800040c:	d3c3      	bcc.n	8000396 <EE_Init+0x1fe>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800040e:	2100      	movs	r1, #0
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <EE_Init+0x298>)
 8000412:	f001 fd3b 	bl	8001e8c <FLASH_ProgramHalfWord>
 8000416:	4603      	mov	r3, r0
 8000418:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800041a:	897b      	ldrh	r3, [r7, #10]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d00f      	beq.n	8000440 <EE_Init+0x2a8>
        {
          return FlashStatus;
 8000420:	897b      	ldrh	r3, [r7, #10]
 8000422:	e028      	b.n	8000476 <EE_Init+0x2de>
 8000424:	20000084 	.word	0x20000084
 8000428:	20000088 	.word	0x20000088
 800042c:	0800f800 	.word	0x0800f800
 8000430:	0800fc00 	.word	0x0800fc00
 8000434:	0800f806 	.word	0x0800f806
 8000438:	2000008a 	.word	0x2000008a
 800043c:	0800fc06 	.word	0x0800fc06
        }
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <EE_Init+0x2e8>)
 8000442:	f001 fcf1 	bl	8001e28 <FLASH_ErasePage>
 8000446:	4603      	mov	r3, r0
 8000448:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800044a:	897b      	ldrh	r3, [r7, #10]
 800044c:	2b04      	cmp	r3, #4
 800044e:	d00e      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 8000450:	897b      	ldrh	r3, [r7, #10]
 8000452:	e010      	b.n	8000476 <EE_Init+0x2de>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8000454:	f000 f8b6 	bl	80005c4 <EE_Format>
 8000458:	4603      	mov	r3, r0
 800045a:	817b      	strh	r3, [r7, #10]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d007      	beq.n	8000472 <EE_Init+0x2da>
      {
        return FlashStatus;
 8000462:	897b      	ldrh	r3, [r7, #10]
 8000464:	e007      	b.n	8000476 <EE_Init+0x2de>
      break;
 8000466:	bf00      	nop
 8000468:	e004      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046a:	bf00      	nop
 800046c:	e002      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046e:	bf00      	nop
 8000470:	e000      	b.n	8000474 <EE_Init+0x2dc>
      }
      break;
 8000472:	bf00      	nop
  }

  return FLASH_COMPLETE;
 8000474:	2304      	movs	r3, #4
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	0800f800 	.word	0x0800f800

08000484 <EE_ReadVariable>:
  *           - EE_VAR_FOUND: if variable was found
  *           - EE_VAR_NOT_FOUND: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage;
  uint16_t AddressValue;
  uint16_t ReadStatus = EE_VAR_NOT_FOUND;
 8000490:	2301      	movs	r3, #1
 8000492:	83fb      	strh	r3, [r7, #30]
  uint32_t Address;
  uint32_t PageStartAddress;
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <EE_ReadVariable+0xb0>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <EE_ReadVariable+0x20>
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <EE_ReadVariable+0xb4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10c      	bne.n	80004be <EE_ReadVariable+0x3a>
	  return EE_NOT_INITIALIZED;
 80004a4:	23aa      	movs	r3, #170	; 0xaa
 80004a6:	e041      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	dc02      	bgt.n	80004b4 <EE_ReadVariable+0x30>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	da02      	bge.n	80004b8 <EE_ReadVariable+0x34>
 80004b2:	e004      	b.n	80004be <EE_ReadVariable+0x3a>
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d102      	bne.n	80004be <EE_ReadVariable+0x3a>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
	  case FLASH_TIMEOUT:
		  return f_stat;
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	e036      	b.n	800052c <EE_ReadVariable+0xa8>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 80004be:	f001 fd13 	bl	8001ee8 <FLASH_GetStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	75fb      	strb	r3, [r7, #23]
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d1ed      	bne.n	80004a8 <EE_ReadVariable+0x24>
	  }
  }


  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 f8a1 	bl	8000614 <EE_FindValidPage>
 80004d2:	4603      	mov	r3, r0
 80004d4:	82bb      	strh	r3, [r7, #20]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80004d6:	8abb      	ldrh	r3, [r7, #20]
 80004d8:	2bab      	cmp	r3, #171	; 0xab
 80004da:	d101      	bne.n	80004e0 <EE_ReadVariable+0x5c>
  {
    return  NO_VALID_PAGE;
 80004dc:	23ab      	movs	r3, #171	; 0xab
 80004de:	e025      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80004e0:	8abb      	ldrh	r3, [r7, #20]
 80004e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80004e6:	333e      	adds	r3, #62	; 0x3e
 80004e8:	029b      	lsls	r3, r3, #10
 80004ea:	613b      	str	r3, [r7, #16]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80004ec:	8abb      	ldrh	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	029a      	lsls	r2, r3, #10
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <EE_ReadVariable+0xb8>)
 80004f4:	4413      	add	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80004f8:	e012      	b.n	8000520 <EE_ReadVariable+0x9c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000500:	89fa      	ldrh	r2, [r7, #14]
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	429a      	cmp	r2, r3
 8000506:	d108      	bne.n	800051a <EE_ReadVariable+0x96>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3b02      	subs	r3, #2
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b29a      	uxth	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = EE_VAR_FOUND;
 8000514:	2300      	movs	r3, #0
 8000516:	83fb      	strh	r3, [r7, #30]

      break;
 8000518:	e007      	b.n	800052a <EE_ReadVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	3b04      	subs	r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
  while (Address > (PageStartAddress + 2))
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	3302      	adds	r3, #2
 8000524:	69ba      	ldr	r2, [r7, #24]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8e7      	bhi.n	80004fa <EE_ReadVariable+0x76>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800052a:	8bfb      	ldrh	r3, [r7, #30]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000088 	.word	0x20000088
 8000538:	20000084 	.word	0x20000084
 800053c:	0800f7fe 	.word	0x0800f7fe

08000540 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	4613      	mov	r3, r2
 800054e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	81fb      	strh	r3, [r7, #14]
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <EE_WriteVariable+0x7c>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d003      	beq.n	8000564 <EE_WriteVariable+0x24>
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <EE_WriteVariable+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10c      	bne.n	800057e <EE_WriteVariable+0x3e>
	  return EE_NOT_INITIALIZED;
 8000564:	23aa      	movs	r3, #170	; 0xaa
 8000566:	e025      	b.n	80005b4 <EE_WriteVariable+0x74>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	2b03      	cmp	r3, #3
 800056c:	dc02      	bgt.n	8000574 <EE_WriteVariable+0x34>
 800056e:	2b02      	cmp	r3, #2
 8000570:	da02      	bge.n	8000578 <EE_WriteVariable+0x38>
 8000572:	e004      	b.n	800057e <EE_WriteVariable+0x3e>
 8000574:	2b05      	cmp	r3, #5
 8000576:	d102      	bne.n	800057e <EE_WriteVariable+0x3e>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
  	  case FLASH_TIMEOUT:
  		  return f_stat;
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	b29b      	uxth	r3, r3
 800057c:	e01a      	b.n	80005b4 <EE_WriteVariable+0x74>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 800057e:	f001 fcb3 	bl	8001ee8 <FLASH_GetStatus>
 8000582:	4603      	mov	r3, r0
 8000584:	737b      	strb	r3, [r7, #13]
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d1ed      	bne.n	8000568 <EE_WriteVariable+0x28>
	  }
  }

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800058c:	88ba      	ldrh	r2, [r7, #4]
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f882 	bl	800069c <EE_VerifyPageFullWriteVariable>
 8000598:	4603      	mov	r3, r0
 800059a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	2b80      	cmp	r3, #128	; 0x80
 80005a0:	d107      	bne.n	80005b2 <EE_WriteVariable+0x72>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80005a2:	88ba      	ldrh	r2, [r7, #4]
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f8cf 	bl	800074c <EE_PageTransfer>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80005b2:	89fb      	ldrh	r3, [r7, #14]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000088 	.word	0x20000088
 80005c0:	20000084 	.word	0x20000084

080005c4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <EE_Format+0x48>)
 80005d0:	f001 fc2a 	bl	8001e28 <FLASH_ErasePage>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d001      	beq.n	80005e2 <EE_Format+0x1e>
  {
    return FlashStatus;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	e010      	b.n	8000604 <EE_Format+0x40>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <EE_Format+0x48>)
 80005e6:	f001 fc51 	bl	8001e8c <FLASH_ProgramHalfWord>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d001      	beq.n	80005f8 <EE_Format+0x34>
  {
    return FlashStatus;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	e005      	b.n	8000604 <EE_Format+0x40>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <EE_Format+0x4c>)
 80005fa:	f001 fc15 	bl	8001e28 <FLASH_ErasePage>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

  /* Return Page1 erase operation status */
  return FlashStatus;
 8000602:	79fb      	ldrb	r3, [r7, #7]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	0800f800 	.word	0x0800f800
 8000610:	0800fc00 	.word	0x0800fc00

08000614 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800061e:	2306      	movs	r3, #6
 8000620:	81fb      	strh	r3, [r7, #14]
 8000622:	2306      	movs	r3, #6
 8000624:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = *(__IO uint16_t*)PAGE0_BASE_ADDRESS;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <EE_FindValidPage+0x80>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <EE_FindValidPage+0x84>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d01b      	beq.n	8000670 <EE_FindValidPage+0x5c>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d125      	bne.n	8000688 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d108      	bne.n	8000654 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000648:	4293      	cmp	r3, r2
 800064a:	d101      	bne.n	8000650 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800064c:	2300      	movs	r3, #0
 800064e:	e01c      	b.n	800068a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000650:	2301      	movs	r3, #1
 8000652:	e01a      	b.n	800068a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000654:	89fb      	ldrh	r3, [r7, #14]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d108      	bne.n	800066c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800065a:	89bb      	ldrh	r3, [r7, #12]
 800065c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000660:	4293      	cmp	r3, r2
 8000662:	d101      	bne.n	8000668 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000664:	2301      	movs	r3, #1
 8000666:	e010      	b.n	800068a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000668:	2300      	movs	r3, #0
 800066a:	e00e      	b.n	800068a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800066c:	23ab      	movs	r3, #171	; 0xab
 800066e:	e00c      	b.n	800068a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000676:	2300      	movs	r3, #0
 8000678:	e007      	b.n	800068a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000680:	2301      	movs	r3, #1
 8000682:	e002      	b.n	800068a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000684:	23ab      	movs	r3, #171	; 0xab
 8000686:	e000      	b.n	800068a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000688:	2300      	movs	r3, #0
  }
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	0800f800 	.word	0x0800f800
 8000698:	0800fc00 	.word	0x0800fc00

0800069c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80006ac:	2304      	movs	r3, #4
 80006ae:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	823b      	strh	r3, [r7, #16]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <EE_VerifyPageFullWriteVariable+0xa4>)
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <EE_VerifyPageFullWriteVariable+0xa8>)
 80006ba:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffa9 	bl	8000614 <EE_FindValidPage>
 80006c2:	4603      	mov	r3, r0
 80006c4:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80006c6:	8a3b      	ldrh	r3, [r7, #16]
 80006c8:	2bab      	cmp	r3, #171	; 0xab
 80006ca:	d101      	bne.n	80006d0 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80006cc:	23ab      	movs	r3, #171	; 0xab
 80006ce:	e032      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80006d0:	8a3b      	ldrh	r3, [r7, #16]
 80006d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006d6:	333e      	adds	r3, #62	; 0x3e
 80006d8:	029b      	lsls	r3, r3, #10
 80006da:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80006dc:	8a3b      	ldrh	r3, [r7, #16]
 80006de:	3301      	adds	r3, #1
 80006e0:	029a      	lsls	r2, r3, #10
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <EE_VerifyPageFullWriteVariable+0xac>)
 80006e4:	4413      	add	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80006e8:	e020      	b.n	800072c <EE_VerifyPageFullWriteVariable+0x90>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f2:	d118      	bne.n	8000726 <EE_VerifyPageFullWriteVariable+0x8a>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	4619      	mov	r1, r3
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f001 fbc7 	bl	8001e8c <FLASH_ProgramHalfWord>
 80006fe:	4603      	mov	r3, r0
 8000700:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d002      	beq.n	800070e <EE_VerifyPageFullWriteVariable+0x72>
      {
        return FlashStatus;
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	b29b      	uxth	r3, r3
 800070c:	e013      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3302      	adds	r3, #2
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fbb8 	bl	8001e8c <FLASH_ProgramHalfWord>
 800071c:	4603      	mov	r3, r0
 800071e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	b29b      	uxth	r3, r3
 8000724:	e007      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3da      	bcc.n	80006ea <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000734:	2380      	movs	r3, #128	; 0x80
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	08010000 	.word	0x08010000
 8000744:	080107ff 	.word	0x080107ff
 8000748:	0800f7fe 	.word	0x0800f7fe

0800074c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	80fb      	strh	r3, [r7, #6]
 8000758:	4613      	mov	r3, r2
 800075a:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 800075c:	2304      	movs	r3, #4
 800075e:	757b      	strb	r3, [r7, #21]
  uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
 8000760:	4b47      	ldr	r3, [pc, #284]	; (8000880 <EE_PageTransfer+0x134>)
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <EE_PageTransfer+0x138>)
 8000766:	61bb      	str	r3, [r7, #24]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	827b      	strh	r3, [r7, #18]
 800076c:	2300      	movs	r3, #0
 800076e:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	823b      	strh	r3, [r7, #16]
 8000774:	2300      	movs	r3, #0
 8000776:	81fb      	strh	r3, [r7, #14]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff4b 	bl	8000614 <EE_FindValidPage>
 800077e:	4603      	mov	r3, r0
 8000780:	827b      	strh	r3, [r7, #18]

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000782:	8a7b      	ldrh	r3, [r7, #18]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d104      	bne.n	8000792 <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <EE_PageTransfer+0x13c>)
 800078a:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <EE_PageTransfer+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	e009      	b.n	80007a6 <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000792:	8a7b      	ldrh	r3, [r7, #18]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <EE_PageTransfer+0x56>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <EE_PageTransfer+0x140>)
 800079a:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <EE_PageTransfer+0x13c>)
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	e001      	b.n	80007a6 <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80007a2:	23ab      	movs	r3, #171	; 0xab
 80007a4:	e068      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 80007a6:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80007aa:	69f8      	ldr	r0, [r7, #28]
 80007ac:	f001 fb6e 	bl	8001e8c <FLASH_ProgramHalfWord>
 80007b0:	4603      	mov	r3, r0
 80007b2:	757b      	strb	r3, [r7, #21]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80007b4:	7d7b      	ldrb	r3, [r7, #21]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d002      	beq.n	80007c0 <EE_PageTransfer+0x74>
  {
    return FlashStatus;
 80007ba:	7d7b      	ldrb	r3, [r7, #21]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	e05b      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80007c0:	88ba      	ldrh	r2, [r7, #4]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff68 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80007cc:	4603      	mov	r3, r0
 80007ce:	823b      	strh	r3, [r7, #16]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 80007d0:	8a3b      	ldrh	r3, [r7, #16]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d001      	beq.n	80007da <EE_PageTransfer+0x8e>
  {
    return EepromStatus;
 80007d6:	8a3b      	ldrh	r3, [r7, #16]
 80007d8:	e04e      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	82fb      	strh	r3, [r7, #22]
 80007de:	e02d      	b.n	800083c <EE_PageTransfer+0xf0>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <EE_PageTransfer+0x144>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	8afb      	ldrh	r3, [r7, #22]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	88fa      	ldrh	r2, [r7, #6]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d021      	beq.n	8000836 <EE_PageTransfer+0xea>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <EE_PageTransfer+0x144>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4925      	ldr	r1, [pc, #148]	; (8000894 <EE_PageTransfer+0x148>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe3f 	bl	8000484 <EE_ReadVariable>
 8000806:	4603      	mov	r3, r0
 8000808:	81fb      	strh	r3, [r7, #14]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d012      	beq.n	8000836 <EE_PageTransfer+0xea>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <EE_PageTransfer+0x144>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <EE_PageTransfer+0x148>)
 800081e:	8812      	ldrh	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff3a 	bl	800069c <EE_VerifyPageFullWriteVariable>
 8000828:	4603      	mov	r3, r0
 800082a:	823b      	strh	r3, [r7, #16]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 800082c:	8a3b      	ldrh	r3, [r7, #16]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d001      	beq.n	8000836 <EE_PageTransfer+0xea>
        {
          return EepromStatus;
 8000832:	8a3b      	ldrh	r3, [r7, #16]
 8000834:	e020      	b.n	8000878 <EE_PageTransfer+0x12c>
  for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	3301      	adds	r3, #1
 800083a:	82fb      	strh	r3, [r7, #22]
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <EE_PageTransfer+0x14c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	8afa      	ldrh	r2, [r7, #22]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3cc      	bcc.n	80007e0 <EE_PageTransfer+0x94>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_ErasePage(OldPageAddress);
 8000846:	69b8      	ldr	r0, [r7, #24]
 8000848:	f001 faee 	bl	8001e28 <FLASH_ErasePage>
 800084c:	4603      	mov	r3, r0
 800084e:	757b      	strb	r3, [r7, #21]
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d002      	beq.n	800085c <EE_PageTransfer+0x110>
  {
    return FlashStatus;
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	b29b      	uxth	r3, r3
 800085a:	e00d      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 800085c:	2100      	movs	r1, #0
 800085e:	69f8      	ldr	r0, [r7, #28]
 8000860:	f001 fb14 	bl	8001e8c <FLASH_ProgramHalfWord>
 8000864:	4603      	mov	r3, r0
 8000866:	757b      	strb	r3, [r7, #21]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d002      	beq.n	8000874 <EE_PageTransfer+0x128>
  {
    return FlashStatus;
 800086e:	7d7b      	ldrb	r3, [r7, #21]
 8000870:	b29b      	uxth	r3, r3
 8000872:	e001      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000874:	7d7b      	ldrb	r3, [r7, #21]
 8000876:	b29b      	uxth	r3, r3
}
 8000878:	4618      	mov	r0, r3
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	080103ff 	.word	0x080103ff
 8000884:	08010000 	.word	0x08010000
 8000888:	0800f800 	.word	0x0800f800
 800088c:	0800fc00 	.word	0x0800fc00
 8000890:	20000084 	.word	0x20000084
 8000894:	2000008a 	.word	0x2000008a
 8000898:	20000088 	.word	0x20000088

0800089c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	611a      	str	r2, [r3, #16]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	615a      	str	r2, [r3, #20]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff ffbd 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000922:	2020      	movs	r0, #32
 8000924:	f7ff ffba 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000928:	2004      	movs	r0, #4
 800092a:	f7ff ffb7 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff ffb4 	bl	800089c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000934:	492b      	ldr	r1, [pc, #172]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000936:	482c      	ldr	r0, [pc, #176]	; (80009e8 <MX_GPIO_Init+0xe0>)
 8000938:	f7ff ffd7 	bl	80008ea <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(F_R_GPIO_Port, F_R_Pin);
 800093c:	f242 0120 	movw	r1, #8224	; 0x2020
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000942:	f7ff ffd2 	bl	80008ea <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000946:	4927      	ldr	r1, [pc, #156]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000948:	4829      	ldr	r0, [pc, #164]	; (80009f0 <MX_GPIO_Init+0xe8>)
 800094a:	f7ff ffce 	bl	80008ea <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Board_LED_Pin;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000956:	2301      	movs	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <MX_GPIO_Init+0xe0>)
 8000964:	f001 fbee 	bl	8002144 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_11
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_GPIO_Init+0xec>)
 800096a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000976:	f001 fbe5 	bl	8002144 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_R_Pin;
 800097a:	f242 0320 	movw	r3, #8224	; 0x2020
 800097e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000980:	2301      	movs	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000992:	f001 fbd7 	bl	8002144 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xf0>)
 8000998:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_GPIO_Init+0xe8>)
 80009a4:	f001 fbce 	bl	8002144 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_GPIO_Init+0xdc>)
 80009aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xe8>)
 80009be:	f001 fbc1 	bl	8002144 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_GPIO_Init+0xf4>)
 80009c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009c6:	2309      	movs	r3, #9
 80009c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0xe4>)
 80009d8:	f001 fbb4 	bl	8002144 <LL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	04200020 	.word	0x04200020
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	0498139b 	.word	0x0498139b
 80009f8:	04dffcff 	.word	0x04dffcff
 80009fc:	04010001 	.word	0x04010001

08000a00 <GPIO_BOARD_Led_ON>:

/* USER CODE BEGIN 2 */
void GPIO_BOARD_Led_ON(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000a04:	4902      	ldr	r1, [pc, #8]	; (8000a10 <GPIO_BOARD_Led_ON+0x10>)
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <GPIO_BOARD_Led_ON+0x14>)
 8000a08:	f7ff ff6f 	bl	80008ea <LL_GPIO_ResetOutputPin>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	04200020 	.word	0x04200020
 8000a14:	40011000 	.word	0x40011000

08000a18 <GPIO_BOARD_Led_OFF>:

void GPIO_BOARD_Led_OFF(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000a1c:	4902      	ldr	r1, [pc, #8]	; (8000a28 <GPIO_BOARD_Led_OFF+0x10>)
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <GPIO_BOARD_Led_OFF+0x14>)
 8000a20:	f7ff ff54 	bl	80008cc <LL_GPIO_SetOutputPin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	04200020 	.word	0x04200020
 8000a2c:	40011000 	.word	0x40011000

08000a30 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f003 0207 	and.w	r2, r3, #7
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	605a      	str	r2, [r3, #4]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <LL_IWDG_IsReady+0x18>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <LL_IWDG_IsReady+0x1a>
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000ae6:	f7ff ffa3 	bl	8000a30 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000aec:	f7ff ffba 	bl	8000a64 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_64);
 8000af0:	2104      	movs	r1, #4
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000af4:	f7ff ffc3 	bl	8000a7e <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 1000);
 8000af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000afe:	f7ff ffcd 	bl	8000a9c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000b02:	bf00      	nop
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000b06:	f7ff ffd8 	bl	8000aba <LL_IWDG_IsReady>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d1f9      	bne.n	8000b04 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000b12:	f7ff ff9a 	bl	8000a4a <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40003000 	.word	0x40003000

08000b20 <MX_IWDG_Reset>:

/* USER CODE BEGIN 1 */
void MX_IWDG_Reset(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	LL_IWDG_ReloadCounter(IWDG);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <MX_IWDG_Reset+0x10>)
 8000b26:	f7ff ff90 	bl	8000a4a <LL_IWDG_ReloadCounter>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003000 	.word	0x40003000

08000b34 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b44:	2b80      	cmp	r3, #128	; 0x80
 8000b46:	bf0c      	ite	eq
 8000b48:	2301      	moveq	r3, #1
 8000b4a:	2300      	movne	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60da      	str	r2, [r3, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	605a      	str	r2, [r3, #4]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <LOG_ResetLogger>:
static uint16_t log_tx_next_byte_index;
static uint32_t log_tx_time_finished;


void LOG_ResetLogger(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	log_tx_data_len = 0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <LOG_ResetLogger+0x20>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	801a      	strh	r2, [r3, #0]
	log_tx_next_byte_index = 0;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <LOG_ResetLogger+0x24>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	801a      	strh	r2, [r3, #0]
	log_tx_time_finished = SYS_GetTick() + 1;
 8000ba4:	f000 fd98 	bl	80016d8 <SYS_GetTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <LOG_ResetLogger+0x28>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200001ea 	.word	0x200001ea
 8000bb8:	200001ec 	.word	0x200001ec
 8000bbc:	200001f0 	.word	0x200001f0

08000bc0 <LOG_IsInProgress>:

uint8_t LOG_IsInProgress(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	return (log_tx_data_len > 0);
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <LOG_IsInProgress+0x1c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf14      	ite	ne
 8000bcc:	2301      	movne	r3, #1
 8000bce:	2300      	moveq	r3, #0
 8000bd0:	b2db      	uxtb	r3, r3
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200001ea 	.word	0x200001ea

08000be0 <LOG_SendLog>:
	return log_tx_time_finished;
}


void LOG_SendLog(uint8_t *data, uint16_t offset, uint16_t n_bytes)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	803b      	strh	r3, [r7, #0]
	uint16_t index = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	81fb      	strh	r3, [r7, #14]
	uint16_t length = (n_bytes < MAX_LOG_MESSAGE_LENGTH) ? n_bytes : MAX_LOG_MESSAGE_LENGTH;
 8000bf4:	883b      	ldrh	r3, [r7, #0]
 8000bf6:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bfa:	bf28      	it	cs
 8000bfc:	f44f 73af 	movcs.w	r3, #350	; 0x15e
 8000c00:	81bb      	strh	r3, [r7, #12]

	log_tx_data_len = length;
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <LOG_SendLog+0x68>)
 8000c04:	89bb      	ldrh	r3, [r7, #12]
 8000c06:	8013      	strh	r3, [r2, #0]
	log_tx_next_byte_index = 0;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <LOG_SendLog+0x6c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	801a      	strh	r2, [r3, #0]
	if (length > 0) {
 8000c0e:	89bb      	ldrh	r3, [r7, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d015      	beq.n	8000c40 <LOG_SendLog+0x60>
		do {
			log_tx_buffer[index ++] = data[offset ++];
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	807a      	strh	r2, [r7, #2]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	441a      	add	r2, r3
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	1c59      	adds	r1, r3, #1
 8000c24:	81f9      	strh	r1, [r7, #14]
 8000c26:	4619      	mov	r1, r3
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <LOG_SendLog+0x70>)
 8000c2c:	545a      	strb	r2, [r3, r1]
		} while (index < length);
 8000c2e:	89fa      	ldrh	r2, [r7, #14]
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3ee      	bcc.n	8000c14 <LOG_SendLog+0x34>
		LOG_EvaluateDataSend();
 8000c36:	f000 f80f 	bl	8000c58 <LOG_EvaluateDataSend>
		LL_USART_EnableIT_TXE(USART_LOG);
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <LOG_SendLog+0x74>)
 8000c3c:	f7ff ff8c 	bl	8000b58 <LL_USART_EnableIT_TXE>
	}

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001ea 	.word	0x200001ea
 8000c4c:	200001ec 	.word	0x200001ec
 8000c50:	2000008c 	.word	0x2000008c
 8000c54:	40004400 	.word	0x40004400

08000c58 <LOG_EvaluateDataSend>:


uint8_t LOG_EvaluateDataSend(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]
	if (log_tx_data_len == 0)
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <LOG_EvaluateDataSend+0x78>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <LOG_EvaluateDataSend+0x16>
	{
		return ret;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	e02b      	b.n	8000cc6 <LOG_EvaluateDataSend+0x6e>
	}
	else if (!LL_USART_IsActiveFlag_TXE(USART_LOG))
 8000c6e:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <LOG_EvaluateDataSend+0x7c>)
 8000c70:	f7ff ff60 	bl	8000b34 <LL_USART_IsActiveFlag_TXE>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <LOG_EvaluateDataSend+0x26>
	{
		return ret;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	e023      	b.n	8000cc6 <LOG_EvaluateDataSend+0x6e>
	}

	if (log_tx_next_byte_index < log_tx_data_len)
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <LOG_EvaluateDataSend+0x80>)
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <LOG_EvaluateDataSend+0x78>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d20f      	bcs.n	8000caa <LOG_EvaluateDataSend+0x52>
	{
		LL_USART_TransmitData8(USART_LOG, log_tx_buffer[log_tx_next_byte_index]);
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <LOG_EvaluateDataSend+0x80>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <LOG_EvaluateDataSend+0x84>)
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	4619      	mov	r1, r3
 8000c96:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <LOG_EvaluateDataSend+0x7c>)
 8000c98:	f7ff ff6d 	bl	8000b76 <LL_USART_TransmitData8>
		log_tx_next_byte_index ++;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <LOG_EvaluateDataSend+0x80>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LOG_EvaluateDataSend+0x80>)
 8000ca6:	801a      	strh	r2, [r3, #0]
 8000ca8:	e00c      	b.n	8000cc4 <LOG_EvaluateDataSend+0x6c>
	}
	else
	{
		log_tx_data_len = 0;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <LOG_EvaluateDataSend+0x78>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	801a      	strh	r2, [r3, #0]
		log_tx_next_byte_index = 0;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <LOG_EvaluateDataSend+0x80>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
		log_tx_time_finished = SYS_GetTick();
 8000cb6:	f000 fd0f 	bl	80016d8 <SYS_GetTick>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <LOG_EvaluateDataSend+0x88>)
 8000cbe:	6013      	str	r3, [r2, #0]
		ret = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
	}
	return ret;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001ea 	.word	0x200001ea
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	200001ec 	.word	0x200001ec
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	200001f0 	.word	0x200001f0

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4906      	ldr	r1, [pc, #24]	; (8000d7c <__NVIC_EnableIRQ+0x34>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <LL_RCC_HSE_Enable+0x18>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <LL_RCC_HSE_Enable+0x18>)
 8000e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <LL_RCC_HSE_IsReady+0x20>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000

08000e78 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <LL_RCC_LSI_Enable+0x18>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <LL_RCC_LSI_Enable+0x18>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_RCC_LSI_IsReady+0x20>)
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <LL_RCC_SetSysClkSource+0x24>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f023 0203 	bic.w	r2, r3, #3
 8000ec8:	4904      	ldr	r1, [pc, #16]	; (8000edc <LL_RCC_SetSysClkSource+0x24>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <LL_RCC_GetSysClkSource+0x14>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f08:	4904      	ldr	r1, [pc, #16]	; (8000f1c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f58:	4904      	ldr	r1, [pc, #16]	; (8000f6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_RCC_ConfigMCO>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, MCOxSource);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <LL_RCC_ConfigMCO+0x24>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <LL_RCC_ConfigMCO+0x24>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <LL_RCC_PLL_Enable+0x18>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <LL_RCC_PLL_Enable+0x18>)
 8000fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <LL_RCC_PLL_IsReady+0x20>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	4903      	ldr	r1, [pc, #12]	; (8001004 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000

08001008 <LL_APB1_GRP1_EnableClock>:
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <LL_APB1_GRP1_EnableClock+0x2c>)
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4013      	ands	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <LL_APB2_GRP1_EnableClock>:
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001042:	699a      	ldr	r2, [r3, #24]
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4313      	orrs	r3, r2
 800104a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LL_APB2_GRP1_EnableClock+0x2c>)
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <LL_FLASH_SetLatency+0x24>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 0207 	bic.w	r2, r3, #7
 8001078:	4904      	ldr	r1, [pc, #16]	; (800108c <LL_FLASH_SetLatency+0x24>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000

08001090 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <LL_FLASH_GetLatency+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0307 	and.w	r3, r3, #7
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	40022000 	.word	0x40022000

080010a8 <LL_USART_DisableIT_TXE>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
	...

080010c8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80010d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010d6:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80010de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e2:	6053      	str	r3, [r2, #4]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40010000 	.word	0x40010000

080010f0 <VerifyDataArray>:
void WriteDataArray(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t VerifyDataArray(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint16_t ee_result_code;
	uint16_t index;
	uint16_t data;

	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	80fb      	strh	r3, [r7, #6]
 80010fa:	e01b      	b.n	8001134 <VerifyDataArray+0x44>
		ee_result_code = EE_ReadVariable(DEMO_DATA_ADDRESS(index), &data);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001102:	b29b      	uxth	r3, r3
 8001104:	1cba      	adds	r2, r7, #2
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9bb 	bl	8000484 <EE_ReadVariable>
 800110e:	4603      	mov	r3, r0
 8001110:	80bb      	strh	r3, [r7, #4]
		if (ee_result_code != EE_VAR_FOUND) {
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <VerifyDataArray+0x2c>
			return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e00f      	b.n	800113c <VerifyDataArray+0x4c>
		} else if (data != DemoDataTable[index]) {
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <VerifyDataArray+0x54>)
 8001120:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <VerifyDataArray+0x3e>
			return 0;
 800112a:	2300      	movs	r3, #0
 800112c:	e006      	b.n	800113c <VerifyDataArray+0x4c>
	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	3301      	adds	r3, #1
 8001132:	80fb      	strh	r3, [r7, #6]
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	2b3f      	cmp	r3, #63	; 0x3f
 8001138:	d9e0      	bls.n	80010fc <VerifyDataArray+0xc>
		}
	}
	return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	080035d0 	.word	0x080035d0

08001148 <WriteDataArray>:

void WriteDataArray(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint16_t index;
	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 800114e:	2300      	movs	r3, #0
 8001150:	80fb      	strh	r3, [r7, #6]
 8001152:	e00e      	b.n	8001172 <WriteDataArray+0x2a>
		EE_WriteVariable(DEMO_DATA_ADDRESS(index), DemoDataTable[index]);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800115a:	b29a      	uxth	r2, r3
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4909      	ldr	r1, [pc, #36]	; (8001184 <WriteDataArray+0x3c>)
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	4619      	mov	r1, r3
 8001166:	4610      	mov	r0, r2
 8001168:	f7ff f9ea 	bl	8000540 <EE_WriteVariable>
	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	3301      	adds	r3, #1
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2b3f      	cmp	r3, #63	; 0x3f
 8001176:	d9ed      	bls.n	8001154 <WriteDataArray+0xc>
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	080035d0 	.word	0x080035d0

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Initialize EEPROM Virtual Address table
		EepromAllVirtAddrTable[0] = COUNTER_ADDRESS;
 800118e:	4b69      	ldr	r3, [pc, #420]	; (8001334 <main+0x1ac>)
 8001190:	f245 5255 	movw	r2, #21845	; 0x5555
 8001194:	801a      	strh	r2, [r3, #0]
		for (uint8_t index=0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	e00c      	b.n	80011b6 <main+0x2e>
			EepromAllVirtAddrTable[1+index] = DEMO_DATA_ADDRESS(index);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	3301      	adds	r3, #1
 80011a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011a8:	b291      	uxth	r1, r2
 80011aa:	4a62      	ldr	r2, [pc, #392]	; (8001334 <main+0x1ac>)
 80011ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t index=0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	3301      	adds	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ba:	d9ef      	bls.n	800119c <main+0x14>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ff3b 	bl	8001038 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011c6:	f7ff ff1f 	bl	8001008 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff fd8a 	bl	8000ce4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80011d0:	f7ff fdac 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2200      	movs	r2, #0
 80011d8:	210f      	movs	r1, #15
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fdfa 	bl	8000dd4 <NVIC_EncodePriority>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff fdca 	bl	8000d80 <__NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  NVIC_SetPriority(RCC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ec:	f7ff fd9e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fdec 	bl	8000dd4 <NVIC_EncodePriority>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	2005      	movs	r0, #5
 8001202:	f7ff fdbd 	bl	8000d80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RCC_IRQn);
 8001206:	2005      	movs	r0, #5
 8001208:	f7ff fd9e 	bl	8000d48 <__NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 800120c:	f7ff ff5c 	bl	80010c8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f8a0 	bl	8001354 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick->CTRL  &= ~SysTick_CTRL_CLKSOURCE_Msk;
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <main+0x1b0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a47      	ldr	r2, [pc, #284]	; (8001338 <main+0x1b0>)
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	6013      	str	r3, [r2, #0]
  SYS_ClearTick();
 8001220:	f000 fa40 	bl	80016a4 <SYS_ClearTick>
  SYS_IncTick();
 8001224:	f000 fa4a 	bl	80016bc <SYS_IncTick>
  SYS_IncTick();
 8001228:	f000 fa48 	bl	80016bc <SYS_IncTick>
  SYS_ResumeTick();
 800122c:	f000 fa5e 	bl	80016ec <SYS_ResumeTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f7ff fb6a 	bl	8000908 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001234:	f000 fb82 	bl	800193c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001238:	f000 fd10 	bl	8001c5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800123c:	f000 fd7c 	bl	8001d38 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8001240:	f7ff fc4e 	bl	8000ae0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  EE_Init(EepromAllVirtAddrTable, TOTAL_EEPROM_DATA_SIZE);		// EEPROM Init
 8001244:	2141      	movs	r1, #65	; 0x41
 8001246:	483b      	ldr	r0, [pc, #236]	; (8001334 <main+0x1ac>)
 8001248:	f7fe ffa6 	bl	8000198 <EE_Init>
    LOG_ResetLogger();											// Logger Init
 800124c:	f7ff fca2 	bl	8000b94 <LOG_ResetLogger>
    GPIO_BOARD_Led_OFF();
 8001250:	f7ff fbe2 	bl	8000a18 <GPIO_BOARD_Led_OFF>

    uint16_t counter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	803b      	strh	r3, [r7, #0]
    uint16_t n_bytes;
    uint16_t ee_result_code;

    ee_result_code = EE_ReadVariable(COUNTER_ADDRESS, &counter);
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	f245 5055 	movw	r0, #21845	; 0x5555
 8001260:	f7ff f910 	bl	8000484 <EE_ReadVariable>
 8001264:	4603      	mov	r3, r0
 8001266:	807b      	strh	r3, [r7, #2]
    if (ee_result_code == EE_VAR_FOUND) { // Not First time start
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <main+0x118>
  	  if (VerifyDataArray()) {
 800126e:	f7ff ff3f 	bl	80010f0 <VerifyDataArray>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <main+0x102>
  		  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - NOT first time. Counter = %d. Demo data array has been verified.\r\n", counter);
 8001278:	883b      	ldrh	r3, [r7, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	492f      	ldr	r1, [pc, #188]	; (800133c <main+0x1b4>)
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <main+0x1b8>)
 8001280:	f001 fccc 	bl	8002c1c <siprintf>
 8001284:	4603      	mov	r3, r0
 8001286:	80bb      	strh	r3, [r7, #4]
 8001288:	e020      	b.n	80012cc <main+0x144>
  	  } else {
  		  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - NOT first time. Counter = %d. Demo data array verification ERROR (try write it again).\r\n", counter);
 800128a:	883b      	ldrh	r3, [r7, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	492d      	ldr	r1, [pc, #180]	; (8001344 <main+0x1bc>)
 8001290:	482b      	ldr	r0, [pc, #172]	; (8001340 <main+0x1b8>)
 8001292:	f001 fcc3 	bl	8002c1c <siprintf>
 8001296:	4603      	mov	r3, r0
 8001298:	80bb      	strh	r3, [r7, #4]
  		  WriteDataArray();
 800129a:	f7ff ff55 	bl	8001148 <WriteDataArray>
 800129e:	e015      	b.n	80012cc <main+0x144>
  	  }

    } else if (ee_result_code == EE_VAR_NOT_FOUND) { // First time start
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10a      	bne.n	80012bc <main+0x134>
  	  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - FIRST time\r\n");
 80012a6:	4928      	ldr	r1, [pc, #160]	; (8001348 <main+0x1c0>)
 80012a8:	4825      	ldr	r0, [pc, #148]	; (8001340 <main+0x1b8>)
 80012aa:	f001 fcb7 	bl	8002c1c <siprintf>
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
  	  counter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	803b      	strh	r3, [r7, #0]
  	  WriteDataArray();
 80012b6:	f7ff ff47 	bl	8001148 <WriteDataArray>
 80012ba:	e007      	b.n	80012cc <main+0x144>

    } else {	// Error
  	  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - EEPROM error - %d\r\n", ee_result_code);
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	461a      	mov	r2, r3
 80012c0:	4922      	ldr	r1, [pc, #136]	; (800134c <main+0x1c4>)
 80012c2:	481f      	ldr	r0, [pc, #124]	; (8001340 <main+0x1b8>)
 80012c4:	f001 fcaa 	bl	8002c1c <siprintf>
 80012c8:	4603      	mov	r3, r0
 80012ca:	80bb      	strh	r3, [r7, #4]

    }

    LOG_SendLog(log_buffer, 0, n_bytes);
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	481b      	ldr	r0, [pc, #108]	; (8001340 <main+0x1b8>)
 80012d4:	f7ff fc84 	bl	8000be0 <LOG_SendLog>
    SYS_Delay(250);
 80012d8:	20fa      	movs	r0, #250	; 0xfa
 80012da:	f000 fa15 	bl	8001708 <SYS_Delay>
    MX_IWDG_Reset();
 80012de:	f7ff fc1f 	bl	8000b20 <MX_IWDG_Reset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter ++;
 80012e2:	883b      	ldrh	r3, [r7, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	803b      	strh	r3, [r7, #0]
	  	  ee_result_code = EE_WriteVariable(COUNTER_ADDRESS, counter);
 80012ea:	883b      	ldrh	r3, [r7, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f245 5055 	movw	r0, #21845	; 0x5555
 80012f2:	f7ff f925 	bl	8000540 <EE_WriteVariable>
 80012f6:	4603      	mov	r3, r0
 80012f8:	807b      	strh	r3, [r7, #2]

	  	  n_bytes = sprintf((char *)log_buffer, "\r\nCounter = %d, write status = %d", counter, ee_result_code);
 80012fa:	883b      	ldrh	r3, [r7, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	4913      	ldr	r1, [pc, #76]	; (8001350 <main+0x1c8>)
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <main+0x1b8>)
 8001304:	f001 fc8a 	bl	8002c1c <siprintf>
 8001308:	4603      	mov	r3, r0
 800130a:	80bb      	strh	r3, [r7, #4]
	  	  LOG_SendLog(log_buffer, 0, n_bytes);
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	461a      	mov	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <main+0x1b8>)
 8001314:	f7ff fc64 	bl	8000be0 <LOG_SendLog>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	GPIO_BOARD_Led_ON();
 8001318:	f7ff fb72 	bl	8000a00 <GPIO_BOARD_Led_ON>
	  		  SYS_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f000 f9f3 	bl	8001708 <SYS_Delay>
	  		  GPIO_BOARD_Led_OFF();
 8001322:	f7ff fb79 	bl	8000a18 <GPIO_BOARD_Led_OFF>
	  		  SYS_Delay(900);
 8001326:	f44f 7061 	mov.w	r0, #900	; 0x384
 800132a:	f000 f9ed 	bl	8001708 <SYS_Delay>
	  		  MX_IWDG_Reset();
 800132e:	f7ff fbf7 	bl	8000b20 <MX_IWDG_Reset>
	  counter ++;
 8001332:	e7d6      	b.n	80012e2 <main+0x15a>
 8001334:	20000350 	.word	0x20000350
 8001338:	e000e010 	.word	0xe000e010
 800133c:	080034a8 	.word	0x080034a8
 8001340:	200001f4 	.word	0x200001f4
 8001344:	080034fc 	.word	0x080034fc
 8001348:	08003568 	.word	0x08003568
 800134c:	08003588 	.word	0x08003588
 8001350:	080035ac 	.word	0x080035ac

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fe85 	bl	8001068 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800135e:	bf00      	nop
 8001360:	f7ff fe96 	bl	8001090 <LL_FLASH_GetLatency>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d1fa      	bne.n	8001360 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800136a:	f7ff fd65 	bl	8000e38 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800136e:	bf00      	nop
 8001370:	f7ff fd70 	bl	8000e54 <LL_RCC_HSE_IsReady>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d1fa      	bne.n	8001370 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 800137a:	f7ff fd7d 	bl	8000e78 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800137e:	bf00      	nop
 8001380:	f7ff fd88 	bl	8000e94 <LL_RCC_LSI_IsReady>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d1fa      	bne.n	8001380 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 800138a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800138e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001392:	f7ff fe21 	bl	8000fd8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001396:	f7ff fdff 	bl	8000f98 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800139a:	bf00      	nop
 800139c:	f7ff fe0a 	bl	8000fb4 <LL_RCC_PLL_IsReady>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1fa      	bne.n	800139c <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fda6 	bl	8000ef8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80013ac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80013b0:	f7ff fdb6 	bl	8000f20 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 80013b4:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80013b8:	f7ff fdc6 	bl	8000f48 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff fd7b 	bl	8000eb8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80013c2:	bf00      	nop
 80013c4:	f7ff fd8c 	bl	8000ee0 <LL_RCC_GetSysClkSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d1fa      	bne.n	80013c4 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(6000000);
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <SystemClock_Config+0x94>)
 80013d0:	f001 fbd6 	bl	8002b80 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <SystemClock_Config+0x98>)
 80013d6:	f001 fbe1 	bl	8002b9c <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_PLLCLK_DIV_2);
 80013da:	f04f 60e0 	mov.w	r0, #117440512	; 0x7000000
 80013de:	f7ff fdc7 	bl	8000f70 <LL_RCC_ConfigMCO>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	005b8d80 	.word	0x005b8d80
 80013ec:	02dc6c00 	.word	0x02dc6c00

080013f0 <USART1_RX_Callback>:

/* USER CODE BEGIN 4 */
void USART1_RX_Callback(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
	//uint8_t data = LL_USART_ReceiveData8(USART1);
	//TODO Process this data !!!!!!!!!!!!!!!!!!!!!!!!
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <USART2_TX_Callback>:

void USART2_TX_Callback(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	LOG_EvaluateDataSend();
 8001400:	f7ff fc2a 	bl	8000c58 <LOG_EvaluateDataSend>
	if(!LOG_IsInProgress()) {
 8001404:	f7ff fbdc 	bl	8000bc0 <LOG_IsInProgress>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <USART2_TX_Callback+0x18>
		LL_USART_DisableIT_TXE(USART2);
 800140e:	4802      	ldr	r0, [pc, #8]	; (8001418 <USART2_TX_Callback+0x1c>)
 8001410:	f7ff fe4a 	bl	80010a8 <LL_USART_DisableIT_TXE>
	}
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40004400 	.word	0x40004400

0800141c <LL_USART_IsActiveFlag_FE>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b02      	cmp	r3, #2
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <LL_USART_IsActiveFlag_NE>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b04      	cmp	r3, #4
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <LL_USART_IsActiveFlag_ORE>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b08      	cmp	r3, #8
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <LL_USART_IsActiveFlag_RXNE>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	2b20      	cmp	r3, #32
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <LL_USART_IsActiveFlag_TXE>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	2b80      	cmp	r3, #128	; 0x80
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <LL_USART_IsEnabledIT_RXNE>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <LL_USART_IsEnabledIT_TXE>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001504:	2b80      	cmp	r3, #128	; 0x80
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	SYS_IncTick();
 800155e:	f000 f8ad 	bl	80016bc <SYS_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}

08001566 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
	...

08001574 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <USART1_IRQHandler+0x50>)
 800157a:	f7ff ff85 	bl	8001488 <LL_USART_IsActiveFlag_RXNE>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <USART1_IRQHandler+0x22>
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <USART1_IRQHandler+0x50>)
 8001586:	f7ff ffa3 	bl	80014d0 <LL_USART_IsEnabledIT_RXNE>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <USART1_IRQHandler+0x22>
	{
		USART1_RX_Callback();
 8001590:	f7ff ff2e 	bl	80013f0 <USART1_RX_Callback>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001594:	e013      	b.n	80015be <USART1_IRQHandler+0x4a>
	else if(LL_USART_IsActiveFlag_ORE(USART1) || LL_USART_IsActiveFlag_FE(USART1) || LL_USART_IsActiveFlag_NE(USART1))
 8001596:	480b      	ldr	r0, [pc, #44]	; (80015c4 <USART1_IRQHandler+0x50>)
 8001598:	f7ff ff64 	bl	8001464 <LL_USART_IsActiveFlag_ORE>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <USART1_IRQHandler+0x46>
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <USART1_IRQHandler+0x50>)
 80015a4:	f7ff ff3a 	bl	800141c <LL_USART_IsActiveFlag_FE>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d105      	bne.n	80015ba <USART1_IRQHandler+0x46>
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <USART1_IRQHandler+0x50>)
 80015b0:	f7ff ff46 	bl	8001440 <LL_USART_IsActiveFlag_NE>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <USART1_IRQHandler+0x4a>
		(void) USART1->DR;
 80015ba:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <USART1_IRQHandler+0x50>)
 80015bc:	685b      	ldr	r3, [r3, #4]
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40013800 	.word	0x40013800

080015c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2) || LL_USART_IsActiveFlag_NE(USART2))
 80015cc:	4819      	ldr	r0, [pc, #100]	; (8001634 <USART2_IRQHandler+0x6c>)
 80015ce:	f7ff ff49 	bl	8001464 <LL_USART_IsActiveFlag_ORE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <USART2_IRQHandler+0x28>
 80015d8:	4816      	ldr	r0, [pc, #88]	; (8001634 <USART2_IRQHandler+0x6c>)
 80015da:	f7ff ff1f 	bl	800141c <LL_USART_IsActiveFlag_FE>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <USART2_IRQHandler+0x28>
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <USART2_IRQHandler+0x6c>)
 80015e6:	f7ff ff2b 	bl	8001440 <LL_USART_IsActiveFlag_NE>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <USART2_IRQHandler+0x2e>
	{
		(void) USART2->DR;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <USART2_IRQHandler+0x6c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015f4:	e01b      	b.n	800162e <USART2_IRQHandler+0x66>
		if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80015f6:	480f      	ldr	r0, [pc, #60]	; (8001634 <USART2_IRQHandler+0x6c>)
 80015f8:	f7ff ff46 	bl	8001488 <LL_USART_IsActiveFlag_RXNE>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <USART2_IRQHandler+0x4a>
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <USART2_IRQHandler+0x6c>)
 8001604:	f7ff ff64 	bl	80014d0 <LL_USART_IsEnabledIT_RXNE>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <USART2_IRQHandler+0x4a>
			USART2_RX_Callback();
 800160e:	f000 fbff 	bl	8001e10 <USART2_RX_Callback>
		if (LL_USART_IsActiveFlag_TXE(USART2) && LL_USART_IsEnabledIT_TXE(USART2))
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <USART2_IRQHandler+0x6c>)
 8001614:	f7ff ff4a 	bl	80014ac <LL_USART_IsActiveFlag_TXE>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <USART2_IRQHandler+0x66>
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <USART2_IRQHandler+0x6c>)
 8001620:	f7ff ff68 	bl	80014f4 <LL_USART_IsEnabledIT_TXE>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <USART2_IRQHandler+0x66>
			USART2_TX_Callback();
 800162a:	f7ff fee7 	bl	80013fc <USART2_TX_Callback>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f001 faa6 	bl	8002bb8 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20005000 	.word	0x20005000
 8001698:	00000400 	.word	0x00000400
 800169c:	20000344 	.word	0x20000344
 80016a0:	200003e8 	.word	0x200003e8

080016a4 <SYS_ClearTick>:
 */
#include "systick.h"

volatile uint32_t uwTick;

void SYS_ClearTick(void) {
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
	uwTick = 0;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <SYS_ClearTick+0x14>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200003d4 	.word	0x200003d4

080016bc <SYS_IncTick>:

void SYS_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	uwTick ++;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SYS_IncTick+0x18>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <SYS_IncTick+0x18>)
 80016c8:	6013      	str	r3, [r2, #0]
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200003d4 	.word	0x200003d4

080016d8 <SYS_GetTick>:

uint32_t SYS_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	return uwTick;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <SYS_GetTick+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	200003d4 	.word	0x200003d4

080016ec <SYS_ResumeTick>:
	/* Disable SysTick Interrupt */
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}

void SYS_ResumeTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	/* Enable SysTick Interrupt */
	SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SYS_ResumeTick+0x18>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <SYS_ResumeTick+0x18>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e010 	.word	0xe000e010

08001708 <SYS_Delay>:

void SYS_Delay(__IO uint32_t delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = SYS_GetTick();
 8001710:	f7ff ffe2 	bl	80016d8 <SYS_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

	/* Add a period to guaranty minimum wait */
	if (delay == 0)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d104      	bne.n	8001726 <SYS_Delay+0x1e>
    {
		delay ++;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
    }

	while((SYS_GetTick() - tickstart) < delay)
 8001722:	e000      	b.n	8001726 <SYS_Delay+0x1e>
	{
		__WFI();
 8001724:	bf30      	wfi
	while((SYS_GetTick() - tickstart) < delay)
 8001726:	f7ff ffd7 	bl	80016d8 <SYS_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad2      	subs	r2, r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3f6      	bcc.n	8001724 <SYS_Delay+0x1c>
	}
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <LL_APB1_GRP1_EnableClock>:
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <LL_APB1_GRP1_EnableClock+0x2c>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <LL_APB1_GRP1_EnableClock+0x2c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <LL_APB2_GRP1_EnableClock>:
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <LL_APB2_GRP1_EnableClock+0x2c>)
 800177a:	699a      	ldr	r2, [r3, #24]
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <LL_APB2_GRP1_EnableClock+0x2c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001786:	699a      	ldr	r2, [r3, #24]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d01c      	beq.n	800180a <LL_TIM_OC_DisableFast+0x4a>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d017      	beq.n	8001806 <LL_TIM_OC_DisableFast+0x46>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d012      	beq.n	8001802 <LL_TIM_OC_DisableFast+0x42>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d00d      	beq.n	80017fe <LL_TIM_OC_DisableFast+0x3e>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e8:	d007      	beq.n	80017fa <LL_TIM_OC_DisableFast+0x3a>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f0:	d101      	bne.n	80017f6 <LL_TIM_OC_DisableFast+0x36>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e00a      	b.n	800180c <LL_TIM_OC_DisableFast+0x4c>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e008      	b.n	800180c <LL_TIM_OC_DisableFast+0x4c>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <LL_TIM_OC_DisableFast+0x4c>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <LL_TIM_OC_DisableFast+0x4c>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <LL_TIM_OC_DisableFast+0x4c>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_TIM_OC_DisableFast+0x4c>
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3318      	adds	r3, #24
 8001812:	4619      	mov	r1, r3
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <LL_TIM_OC_DisableFast+0x80>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	440b      	add	r3, r1
 800181c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <LL_TIM_OC_DisableFast+0x84>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	4619      	mov	r1, r3
 800182a:	2304      	movs	r3, #4
 800182c:	408b      	lsls	r3, r1
 800182e:	43db      	mvns	r3, r3
 8001830:	401a      	ands	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	601a      	str	r2, [r3, #0]

}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	08003650 	.word	0x08003650
 8001844:	08003658 	.word	0x08003658

08001848 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d01c      	beq.n	8001892 <LL_TIM_OC_EnablePreload+0x4a>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b04      	cmp	r3, #4
 800185c:	d017      	beq.n	800188e <LL_TIM_OC_EnablePreload+0x46>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b10      	cmp	r3, #16
 8001862:	d012      	beq.n	800188a <LL_TIM_OC_EnablePreload+0x42>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d00d      	beq.n	8001886 <LL_TIM_OC_EnablePreload+0x3e>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001870:	d007      	beq.n	8001882 <LL_TIM_OC_EnablePreload+0x3a>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001878:	d101      	bne.n	800187e <LL_TIM_OC_EnablePreload+0x36>
 800187a:	2305      	movs	r3, #5
 800187c:	e00a      	b.n	8001894 <LL_TIM_OC_EnablePreload+0x4c>
 800187e:	2306      	movs	r3, #6
 8001880:	e008      	b.n	8001894 <LL_TIM_OC_EnablePreload+0x4c>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <LL_TIM_OC_EnablePreload+0x4c>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <LL_TIM_OC_EnablePreload+0x4c>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <LL_TIM_OC_EnablePreload+0x4c>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_TIM_OC_EnablePreload+0x4c>
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3318      	adds	r3, #24
 800189a:	4619      	mov	r1, r3
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LL_TIM_OC_EnablePreload+0x80>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	440b      	add	r3, r1
 80018a4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <LL_TIM_OC_EnablePreload+0x84>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	4619      	mov	r1, r3
 80018b2:	2308      	movs	r3, #8
 80018b4:	408b      	lsls	r3, r1
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	08003650 	.word	0x08003650
 80018cc:	08003658 	.word	0x08003658

080018d0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e2:	f023 0307 	bic.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
	...

0800193c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b092      	sub	sp, #72	; 0x48
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2220      	movs	r2, #32
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f956 	bl	8002c0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800196e:	2002      	movs	r0, #2
 8001970:	f7ff fee6 	bl	8001740 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 114;
 8001974:	2372      	movs	r3, #114	; 0x72
 8001976:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 2004;
 800197c:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198a:	4619      	mov	r1, r3
 800198c:	4843      	ldr	r0, [pc, #268]	; (8001a9c <MX_TIM3_Init+0x160>)
 800198e:	f000 fdbb 	bl	8002508 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001992:	4842      	ldr	r0, [pc, #264]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001994:	f7ff ff04 	bl	80017a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001998:	2100      	movs	r1, #0
 800199a:	4840      	ldr	r0, [pc, #256]	; (8001a9c <MX_TIM3_Init+0x160>)
 800199c:	f7ff ff98 	bl	80018d0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80019a0:	2101      	movs	r1, #1
 80019a2:	483e      	ldr	r0, [pc, #248]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019a4:	f7ff ff50 	bl	8001848 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80019a8:	2360      	movs	r3, #96	; 0x60
 80019aa:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 990;
 80019b4:	f240 33de 	movw	r3, #990	; 0x3de
 80019b8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	461a      	mov	r2, r3
 80019c4:	2101      	movs	r1, #1
 80019c6:	4835      	ldr	r0, [pc, #212]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019c8:	f000 fdfc 	bl	80025c4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80019cc:	2101      	movs	r1, #1
 80019ce:	4833      	ldr	r0, [pc, #204]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019d0:	f7ff fef6 	bl	80017c0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 80019d4:	2110      	movs	r1, #16
 80019d6:	4831      	ldr	r0, [pc, #196]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019d8:	f7ff ff36 	bl	8001848 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 1001;
 80019dc:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80019e0:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	461a      	mov	r2, r3
 80019e8:	2110      	movs	r1, #16
 80019ea:	482c      	ldr	r0, [pc, #176]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019ec:	f000 fdea 	bl	80025c4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80019f0:	2110      	movs	r1, #16
 80019f2:	482a      	ldr	r0, [pc, #168]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019f4:	f7ff fee4 	bl	80017c0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 80019f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fc:	4827      	ldr	r0, [pc, #156]	; (8001a9c <MX_TIM3_Init+0x160>)
 80019fe:	f7ff ff23 	bl	8001848 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	461a      	mov	r2, r3
 8001a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0c:	4823      	ldr	r0, [pc, #140]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a0e:	f000 fdd9 	bl	80025c4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8001a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a16:	4821      	ldr	r0, [pc, #132]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a18:	f7ff fed2 	bl	80017c0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a20:	481e      	ldr	r0, [pc, #120]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a22:	f7ff ff11 	bl	8001848 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a32:	f000 fdc7 	bl	80025c4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a3c:	f7ff fec0 	bl	80017c0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4816      	ldr	r0, [pc, #88]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a44:	f7ff ff58 	bl	80018f8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001a48:	4814      	ldr	r0, [pc, #80]	; (8001a9c <MX_TIM3_Init+0x160>)
 8001a4a:	f7ff ff67 	bl	800191c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001a4e:	2004      	movs	r0, #4
 8001a50:	f7ff fe8e 	bl	8001770 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a54:	2008      	movs	r0, #8
 8001a56:	f7ff fe8b 	bl	8001770 <LL_APB2_GRP1_EnableClock>
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = PWM_SPEED_Pin|PWM_RUDE_Pin;
 8001a5a:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001a5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a60:	2309      	movs	r3, #9
 8001a62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a64:	2302      	movs	r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <MX_TIM3_Init+0x164>)
 8001a72:	f000 fb67 	bl	8002144 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM_CAM_YAW_Pin|PWM_CAM_PITCH_Pin;
 8001a76:	f240 3303 	movw	r3, #771	; 0x303
 8001a7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a7c:	2309      	movs	r3, #9
 8001a7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a80:	2302      	movs	r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM3_Init+0x168>)
 8001a8e:	f000 fb59 	bl	8002144 <LL_GPIO_Init>

}
 8001a92:	bf00      	nop
 8001a94:	3748      	adds	r7, #72	; 0x48
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00

08001aa8 <__NVIC_GetPriorityGrouping>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4906      	ldr	r1, [pc, #24]	; (8001af8 <__NVIC_EnableIRQ+0x34>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <LL_APB1_GRP1_EnableClock>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <LL_APB2_GRP1_EnableClock>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000

08001c14 <LL_USART_Enable>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <LL_USART_ConfigAsyncMode>:
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	615a      	str	r2, [r3, #20]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	463b      	mov	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001c84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c88:	f7ff ffac 	bl	8001be4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001c8c:	2004      	movs	r0, #4
 8001c8e:	f7ff ffa9 	bl	8001be4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = U1TX_Pin;
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <MX_USART1_UART_Init+0xc8>)
 8001c94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c96:	2309      	movs	r3, #9
 8001c98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(U1TX_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4820      	ldr	r0, [pc, #128]	; (8001d28 <MX_USART1_UART_Init+0xcc>)
 8001ca8:	f000 fa4c 	bl	8002144 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sBUS_Pin;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_USART1_UART_Init+0xd0>)
 8001cae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sBUS_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481a      	ldr	r0, [pc, #104]	; (8001d28 <MX_USART1_UART_Init+0xcc>)
 8001cbe:	f000 fa41 	bl	8002144 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001cc2:	f7ff fef1 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff3f 	bl	8001b50 <NVIC_EncodePriority>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	2025      	movs	r0, #37	; 0x25
 8001cd8:	f7ff ff10 	bl	8001afc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001cdc:	2025      	movs	r0, #37	; 0x25
 8001cde:	f7ff fef1 	bl	8001ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_USART1_UART_Init+0xd4>)
 8001ce4:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480a      	ldr	r0, [pc, #40]	; (8001d34 <MX_USART1_UART_Init+0xd8>)
 8001d0c:	f000 febe 	bl	8002a8c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <MX_USART1_UART_Init+0xd8>)
 8001d12:	f7ff ff8e 	bl	8001c32 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <MX_USART1_UART_Init+0xd8>)
 8001d18:	f7ff ff7c 	bl	8001c14 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	3730      	adds	r7, #48	; 0x30
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	04020002 	.word	0x04020002
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	04040004 	.word	0x04040004
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	40013800 	.word	0x40013800

08001d38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001d60:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d64:	f7ff ff26 	bl	8001bb4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001d68:	2004      	movs	r0, #4
 8001d6a:	f7ff ff3b 	bl	8001be4 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LOG_OUT_Pin;
 8001d6e:	f240 4304 	movw	r3, #1028	; 0x404
 8001d72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d74:	2309      	movs	r3, #9
 8001d76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LOG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d80:	463b      	mov	r3, r7
 8001d82:	4619      	mov	r1, r3
 8001d84:	4820      	ldr	r0, [pc, #128]	; (8001e08 <MX_USART2_UART_Init+0xd0>)
 8001d86:	f000 f9dd 	bl	8002144 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = U2RX_Pin;
 8001d8a:	f640 0308 	movw	r3, #2056	; 0x808
 8001d8e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d90:	2308      	movs	r3, #8
 8001d92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(U2RX_GPIO_Port, &GPIO_InitStruct);
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <MX_USART2_UART_Init+0xd0>)
 8001d9e:	f000 f9d1 	bl	8002144 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001da2:	f7ff fe81 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fecf 	bl	8001b50 <NVIC_EncodePriority>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	2026      	movs	r0, #38	; 0x26
 8001db8:	f7ff fea0 	bl	8001afc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001dbc:	2026      	movs	r0, #38	; 0x26
 8001dbe:	f7ff fe81 	bl	8001ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001dc2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001dc6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001dda:	230c      	movs	r3, #12
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_USART2_UART_Init+0xd4>)
 8001dee:	f000 fe4d 	bl	8002a8c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_USART2_UART_Init+0xd4>)
 8001df4:	f7ff ff1d 	bl	8001c32 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_USART2_UART_Init+0xd4>)
 8001dfa:	f7ff ff0b 	bl	8001c14 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	3730      	adds	r7, #48	; 0x30
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40004400 	.word	0x40004400

08001e10 <USART2_RX_Callback>:
{
	// Override this
}

__weak void USART2_RX_Callback(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	// Override this
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001e30:	2304      	movs	r3, #4
 8001e32:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001e34:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001e38:	f000 f8aa 	bl	8001f90 <FLASH_WaitForLastOperation>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d11b      	bne.n	8001e7e <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e62:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001e64:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001e68:	f000 f892 	bl	8001f90 <FLASH_WaitForLastOperation>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	4904      	ldr	r1, [pc, #16]	; (8001e88 <FLASH_ErasePage+0x60>)
 8001e76:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40022000 	.word	0x40022000

08001e8c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ea0:	f000 f876 	bl	8001f90 <FLASH_WaitForLastOperation>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d115      	bne.n	8001eda <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <FLASH_ProgramHalfWord+0x58>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <FLASH_ProgramHalfWord+0x58>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	887a      	ldrh	r2, [r7, #2]
 8001ebe:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ec0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ec4:	f000 f864 	bl	8001f90 <FLASH_WaitForLastOperation>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <FLASH_ProgramHalfWord+0x58>)
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <FLASH_ProgramHalfWord+0x58>)
 8001ed2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetStatus(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <FLASH_GetStatus+0x50>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8001efe:	2301      	movs	r3, #1
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e013      	b.n	8001f2c <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <FLASH_GetStatus+0x50>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001f10:	2302      	movs	r3, #2
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	e00a      	b.n	8001f2c <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <FLASH_GetStatus+0x50>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <FLASH_GetStatus+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8001f22:	2303      	movs	r3, #3
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e001      	b.n	8001f2c <FLASH_GetStatus+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40022000 	.word	0x40022000

08001f3c <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8001f42:	2304      	movs	r3, #4
 8001f44:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <FLASH_GetBank1Status+0x50>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e013      	b.n	8001f80 <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <FLASH_GetBank1Status+0x50>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001f64:	2302      	movs	r3, #2
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	e00a      	b.n	8001f80 <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <FLASH_GetBank1Status+0x50>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8001f76:	2303      	movs	r3, #3
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	e001      	b.n	8001f80 <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8001f80:	79fb      	ldrb	r3, [r7, #7]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40022000 	.word	0x40022000

08001f90 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8001f9c:	f7ff ffce 	bl	8001f3c <FLASH_GetBank1Status>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001fa4:	e006      	b.n	8001fb4 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 8001fa6:	f7ff ffc9 	bl	8001f3c <FLASH_GetBank1Status>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <FLASH_WaitForLastOperation+0x30>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f2      	bne.n	8001fa6 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <LL_GPIO_SetPinMode>:
{
 8001fd4:	b490      	push	{r4, r7}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0e1b      	lsrs	r3, r3, #24
 8001fe8:	4413      	add	r3, r2
 8001fea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	210f      	movs	r1, #15
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	401a      	ands	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	61bb      	str	r3, [r7, #24]
  return result;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	6023      	str	r3, [r4, #0]
}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bc90      	pop	{r4, r7}
 8002036:	4770      	bx	lr

08002038 <LL_GPIO_SetPinSpeed>:
{
 8002038:	b490      	push	{r4, r7}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	0e1b      	lsrs	r3, r3, #24
 800204c:	4413      	add	r3, r2
 800204e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	613b      	str	r3, [r7, #16]
  return result;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	2103      	movs	r1, #3
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	401a      	ands	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	61bb      	str	r3, [r7, #24]
  return result;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	6023      	str	r3, [r4, #0]
}
 8002092:	bf00      	nop
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bc90      	pop	{r4, r7}
 800209a:	4770      	bx	lr

0800209c <LL_GPIO_SetPinOutputType>:
{
 800209c:	b490      	push	{r4, r7}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0e1b      	lsrs	r3, r3, #24
 80020b0:	4413      	add	r3, r2
 80020b2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	613b      	str	r3, [r7, #16]
  return result;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	2104      	movs	r1, #4
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	401a      	ands	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	61bb      	str	r3, [r7, #24]
  return result;
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	6023      	str	r3, [r4, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc90      	pop	{r4, r7}
 80020fe:	4770      	bx	lr

08002100 <LL_GPIO_SetPinPull>:
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	43db      	mvns	r3, r3
 8002116:	401a      	ands	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	613b      	str	r3, [r7, #16]
  return result;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	408b      	lsls	r3, r1
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	60da      	str	r2, [r3, #12]
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	60fb      	str	r3, [r7, #12]
  return result;
 8002164:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800216e:	e044      	b.n	80021fa <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	409a      	lsls	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03a      	beq.n	80021f4 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2b07      	cmp	r3, #7
 8002182:	d806      	bhi.n	8002192 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002184:	f240 1201 	movw	r2, #257	; 0x101
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	e008      	b.n	80021a4 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b08      	subs	r3, #8
 8002196:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021a2:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d106      	bne.n	80021ba <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	461a      	mov	r2, r3
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffa3 	bl	8002100 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	461a      	mov	r2, r3
 80021c0:	69b9      	ldr	r1, [r7, #24]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff06 	bl	8001fd4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d003      	beq.n	80021d8 <LL_GPIO_Init+0x94>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d10d      	bne.n	80021f4 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff54 	bl	800209c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	3301      	adds	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1b4      	bne.n	8002170 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <LL_RCC_GetSysClkSource>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <LL_RCC_GetSysClkSource+0x14>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000

08002228 <LL_RCC_GetAHBPrescaler>:
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <LL_RCC_GetAHBPrescaler+0x14>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40021000 	.word	0x40021000

08002240 <LL_RCC_GetAPB1Prescaler>:
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000

08002258 <LL_RCC_GetAPB2Prescaler>:
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <LL_RCC_GetAPB2Prescaler+0x14>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40021000 	.word	0x40021000

08002270 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <LL_RCC_PLL_GetMainSource+0x14>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40021000 	.word	0x40021000

08002288 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000

080022a0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <LL_RCC_PLL_GetPrediv+0x18>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0c5b      	lsrs	r3, r3, #17
 80022aa:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80022c4:	f000 f820 	bl	8002308 <RCC_GetSystemClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f83e 	bl	8002354 <RCC_GetHCLKClockFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f84c 	bl	8002380 <RCC_GetPCLK1ClockFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f858 	bl	80023a8 <RCC_GetPCLK2ClockFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60da      	str	r2, [r3, #12]
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002312:	f7ff ff7d 	bl	8002210 <LL_RCC_GetSysClkSource>
 8002316:	4603      	mov	r3, r0
 8002318:	2b08      	cmp	r3, #8
 800231a:	d00c      	beq.n	8002336 <RCC_GetSystemClockFreq+0x2e>
 800231c:	2b08      	cmp	r3, #8
 800231e:	d80e      	bhi.n	800233e <RCC_GetSystemClockFreq+0x36>
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <RCC_GetSystemClockFreq+0x22>
 8002324:	2b04      	cmp	r3, #4
 8002326:	d003      	beq.n	8002330 <RCC_GetSystemClockFreq+0x28>
 8002328:	e009      	b.n	800233e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <RCC_GetSystemClockFreq+0x48>)
 800232c:	607b      	str	r3, [r7, #4]
      break;
 800232e:	e009      	b.n	8002344 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <RCC_GetSystemClockFreq+0x48>)
 8002332:	607b      	str	r3, [r7, #4]
      break;
 8002334:	e006      	b.n	8002344 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002336:	f000 f84b 	bl	80023d0 <RCC_PLL_GetFreqDomain_SYS>
 800233a:	6078      	str	r0, [r7, #4]
      break;
 800233c:	e002      	b.n	8002344 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <RCC_GetSystemClockFreq+0x48>)
 8002340:	607b      	str	r3, [r7, #4]
      break;
 8002342:	bf00      	nop
  }

  return frequency;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	007a1200 	.word	0x007a1200

08002354 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800235c:	f7ff ff64 	bl	8002228 <LL_RCC_GetAHBPrescaler>
 8002360:	4603      	mov	r3, r0
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <RCC_GetHCLKClockFreq+0x28>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	40d3      	lsrs	r3, r2
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	08003660 	.word	0x08003660

08002380 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002388:	f7ff ff5a 	bl	8002240 <LL_RCC_GetAPB1Prescaler>
 800238c:	4603      	mov	r3, r0
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	40d3      	lsrs	r3, r2
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	08003670 	.word	0x08003670

080023a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80023b0:	f7ff ff52 	bl	8002258 <LL_RCC_GetAPB2Prescaler>
 80023b4:	4603      	mov	r3, r0
 80023b6:	0adb      	lsrs	r3, r3, #11
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <RCC_GetPCLK2ClockFreq+0x24>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	40d3      	lsrs	r3, r2
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	08003670 	.word	0x08003670

080023d0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80023de:	f7ff ff47 	bl	8002270 <LL_RCC_PLL_GetMainSource>
 80023e2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d003      	beq.n	80023fa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80023f2:	e00b      	b.n	800240c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80023f6:	607b      	str	r3, [r7, #4]
      break;
 80023f8:	e00b      	b.n	8002412 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80023fa:	f7ff ff51 	bl	80022a0 <LL_RCC_PLL_GetPrediv>
 80023fe:	4603      	mov	r3, r0
 8002400:	3301      	adds	r3, #1
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	607b      	str	r3, [r7, #4]
      break;
 800240a:	e002      	b.n	8002412 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800240e:	607b      	str	r3, [r7, #4]
      break;
 8002410:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002412:	f7ff ff39 	bl	8002288 <LL_RCC_PLL_GetMultiplicator>
 8002416:	4603      	mov	r3, r0
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	3302      	adds	r3, #2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	fb02 f303 	mul.w	r3, r2, r3
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	003d0900 	.word	0x003d0900
 8002430:	007a1200 	.word	0x007a1200

08002434 <LL_TIM_SetPrescaler>:
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_TIM_SetAutoReload>:
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <LL_TIM_SetRepetitionCounter>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <LL_TIM_OC_SetCompareCH1>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <LL_TIM_OC_SetCompareCH2>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <LL_TIM_OC_SetCompareCH3>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <LL_TIM_OC_SetCompareCH4>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	615a      	str	r2, [r3, #20]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <LL_TIM_Init+0xb0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <LL_TIM_Init+0x30>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002526:	d007      	beq.n	8002538 <LL_TIM_Init+0x30>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a24      	ldr	r2, [pc, #144]	; (80025bc <LL_TIM_Init+0xb4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <LL_TIM_Init+0x30>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <LL_TIM_Init+0xb8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d106      	bne.n	8002546 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <LL_TIM_Init+0xb0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <LL_TIM_Init+0x5e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d007      	beq.n	8002566 <LL_TIM_Init+0x5e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <LL_TIM_Init+0xb4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <LL_TIM_Init+0x5e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <LL_TIM_Init+0xb8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d106      	bne.n	8002574 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff64 	bl	800244e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff51 	bl	8002434 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <LL_TIM_Init+0xb0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d105      	bne.n	80025a6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff61 	bl	8002468 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff9f 	bl	80024ea <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40000800 	.word	0x40000800

080025c4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d027      	beq.n	800262c <LL_TIM_OC_Init+0x68>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d82a      	bhi.n	800263a <LL_TIM_OC_Init+0x76>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ea:	d018      	beq.n	800261e <LL_TIM_OC_Init+0x5a>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f2:	d822      	bhi.n	800263a <LL_TIM_OC_Init+0x76>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <LL_TIM_OC_Init+0x3e>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d007      	beq.n	8002610 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002600:	e01b      	b.n	800263a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f81f 	bl	8002648 <OC1Config>
 800260a:	4603      	mov	r3, r0
 800260c:	75fb      	strb	r3, [r7, #23]
      break;
 800260e:	e015      	b.n	800263c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f87e 	bl	8002714 <OC2Config>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]
      break;
 800261c:	e00e      	b.n	800263c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f8e1 	bl	80027e8 <OC3Config>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]
      break;
 800262a:	e007      	b.n	800263c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f944 	bl	80028bc <OC4Config>
 8002634:	4603      	mov	r3, r0
 8002636:	75fb      	strb	r3, [r7, #23]
      break;
 8002638:	e000      	b.n	800263c <LL_TIM_OC_Init+0x78>
      break;
 800263a:	bf00      	nop
  }

  return result;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0201 	bic.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0202 	bic.w	r2, r3, #2
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0201 	bic.w	r2, r3, #1
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1a      	ldr	r2, [pc, #104]	; (8002710 <OC1Config+0xc8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d11e      	bne.n	80026e8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f023 0208 	bic.w	r2, r3, #8
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 0204 	bic.w	r2, r3, #4
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fec1 	bl	8002482 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40012c00 	.word	0x40012c00

08002714 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0210 	bic.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0220 	bic.w	r2, r3, #32
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0210 	bic.w	r2, r3, #16
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <OC2Config+0xd0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d11f      	bne.n	80027bc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	019b      	lsls	r3, r3, #6
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fe64 	bl	800249c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <OC3Config+0xd0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d11f      	bne.n	800288e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	029b      	lsls	r3, r3, #10
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	029b      	lsls	r3, r3, #10
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	015b      	lsls	r3, r3, #5
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fe08 	bl	80024b6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00

080028bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	031b      	lsls	r3, r3, #12
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	031b      	lsls	r3, r3, #12
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <OC4Config+0xa0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d107      	bne.n	8002934 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	019b      	lsls	r3, r3, #6
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fdc2 	bl	80024d0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40012c00 	.word	0x40012c00

08002960 <LL_USART_IsEnabled>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <LL_USART_SetStopBitsLength>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <LL_USART_SetHWFlowCtrl>:
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	615a      	str	r2, [r3, #20]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
	...

080029d0 <LL_USART_SetBaudRate>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009a      	lsls	r2, r3, #2
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <LL_USART_SetBaudRate+0xb8>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	b299      	uxth	r1, r3
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <LL_USART_SetBaudRate+0xb8>)
 8002a14:	fba3 0302 	umull	r0, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	fb00 f303 	mul.w	r3, r0, r3
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	3332      	adds	r3, #50	; 0x32
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <LL_USART_SetBaudRate+0xb8>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	440b      	add	r3, r1
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009a      	lsls	r2, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <LL_USART_SetBaudRate+0xb8>)
 8002a50:	fba3 0302 	umull	r0, r3, r3, r2
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	2064      	movs	r0, #100	; 0x64
 8002a58:	fb00 f303 	mul.w	r3, r0, r3
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	3332      	adds	r3, #50	; 0x32
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <LL_USART_SetBaudRate+0xb8>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	440b      	add	r3, r1
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	51eb851f 	.word	0x51eb851f

08002a8c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff5e 	bl	8002960 <LL_USART_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d145      	bne.n	8002b36 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ab2:	f023 030c 	bic.w	r3, r3, #12
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	6851      	ldr	r1, [r2, #4]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	68d2      	ldr	r2, [r2, #12]
 8002abe:	4311      	orrs	r1, r2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	6912      	ldr	r2, [r2, #16]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff57 	bl	8002986 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ff63 	bl	80029aa <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fbe7 	bl	80022bc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <LL_USART_Init+0xb4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d102      	bne.n	8002afc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e00c      	b.n	8002b16 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <LL_USART_Init+0xb8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d102      	bne.n	8002b0a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	e005      	b.n	8002b16 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <LL_USART_Init+0xbc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00c      	beq.n	8002b36 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002b24:	2300      	movs	r3, #0
 8002b26:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff4d 	bl	80029d0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40004400 	.word	0x40004400
 8002b48:	40004800 	.word	0x40004800

08002b4c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <LL_InitTick+0x30>)
 8002b60:	3b01      	subs	r3, #1
 8002b62:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <LL_InitTick+0x30>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6a:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <LL_InitTick+0x30>)
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ffdd 	bl	8002b4c <LL_InitTick>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <LL_SetSystemCoreClock+0x18>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <__errno>:
 8002bb8:	4b01      	ldr	r3, [pc, #4]	; (8002bc0 <__errno+0x8>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	4d0c      	ldr	r5, [pc, #48]	; (8002bfc <__libc_init_array+0x38>)
 8002bca:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bcc:	1b64      	subs	r4, r4, r5
 8002bce:	10a4      	asrs	r4, r4, #2
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	f000 fc5c 	bl	8003490 <_init>
 8002bd8:	2600      	movs	r6, #0
 8002bda:	4d0a      	ldr	r5, [pc, #40]	; (8002c04 <__libc_init_array+0x40>)
 8002bdc:	4c0a      	ldr	r4, [pc, #40]	; (8002c08 <__libc_init_array+0x44>)
 8002bde:	1b64      	subs	r4, r4, r5
 8002be0:	10a4      	asrs	r4, r4, #2
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	080036ac 	.word	0x080036ac
 8002c00:	080036ac 	.word	0x080036ac
 8002c04:	080036ac 	.word	0x080036ac
 8002c08:	080036b0 	.word	0x080036b0

08002c0c <memset>:
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4402      	add	r2, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <siprintf>:
 8002c1c:	b40e      	push	{r1, r2, r3}
 8002c1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c22:	b500      	push	{lr}
 8002c24:	b09c      	sub	sp, #112	; 0x70
 8002c26:	ab1d      	add	r3, sp, #116	; 0x74
 8002c28:	9002      	str	r0, [sp, #8]
 8002c2a:	9006      	str	r0, [sp, #24]
 8002c2c:	9107      	str	r1, [sp, #28]
 8002c2e:	9104      	str	r1, [sp, #16]
 8002c30:	4808      	ldr	r0, [pc, #32]	; (8002c54 <siprintf+0x38>)
 8002c32:	4909      	ldr	r1, [pc, #36]	; (8002c58 <siprintf+0x3c>)
 8002c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c38:	9105      	str	r1, [sp, #20]
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	a902      	add	r1, sp, #8
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	f000 f868 	bl	8002d14 <_svfiprintf_r>
 8002c44:	2200      	movs	r2, #0
 8002c46:	9b02      	ldr	r3, [sp, #8]
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	b01c      	add	sp, #112	; 0x70
 8002c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c50:	b003      	add	sp, #12
 8002c52:	4770      	bx	lr
 8002c54:	20000004 	.word	0x20000004
 8002c58:	ffff0208 	.word	0xffff0208

08002c5c <__ssputs_r>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	688e      	ldr	r6, [r1, #8]
 8002c62:	4682      	mov	sl, r0
 8002c64:	429e      	cmp	r6, r3
 8002c66:	460c      	mov	r4, r1
 8002c68:	4690      	mov	r8, r2
 8002c6a:	461f      	mov	r7, r3
 8002c6c:	d838      	bhi.n	8002ce0 <__ssputs_r+0x84>
 8002c6e:	898a      	ldrh	r2, [r1, #12]
 8002c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c74:	d032      	beq.n	8002cdc <__ssputs_r+0x80>
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	6909      	ldr	r1, [r1, #16]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	eba5 0901 	sub.w	r9, r5, r1
 8002c80:	6965      	ldr	r5, [r4, #20]
 8002c82:	444b      	add	r3, r9
 8002c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c8c:	106d      	asrs	r5, r5, #1
 8002c8e:	429d      	cmp	r5, r3
 8002c90:	bf38      	it	cc
 8002c92:	461d      	movcc	r5, r3
 8002c94:	0553      	lsls	r3, r2, #21
 8002c96:	d531      	bpl.n	8002cfc <__ssputs_r+0xa0>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f000 fb53 	bl	8003344 <_malloc_r>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	b950      	cbnz	r0, 8002cb8 <__ssputs_r+0x5c>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f8ca 3000 	str.w	r3, [sl]
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb2:	81a3      	strh	r3, [r4, #12]
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	464a      	mov	r2, r9
 8002cba:	6921      	ldr	r1, [r4, #16]
 8002cbc:	f000 face 	bl	800325c <memcpy>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	6126      	str	r6, [r4, #16]
 8002cce:	444e      	add	r6, r9
 8002cd0:	6026      	str	r6, [r4, #0]
 8002cd2:	463e      	mov	r6, r7
 8002cd4:	6165      	str	r5, [r4, #20]
 8002cd6:	eba5 0509 	sub.w	r5, r5, r9
 8002cda:	60a5      	str	r5, [r4, #8]
 8002cdc:	42be      	cmp	r6, r7
 8002cde:	d900      	bls.n	8002ce2 <__ssputs_r+0x86>
 8002ce0:	463e      	mov	r6, r7
 8002ce2:	4632      	mov	r2, r6
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	6820      	ldr	r0, [r4, #0]
 8002ce8:	f000 fac6 	bl	8003278 <memmove>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	1b9b      	subs	r3, r3, r6
 8002cf2:	4432      	add	r2, r6
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	60a3      	str	r3, [r4, #8]
 8002cf8:	6022      	str	r2, [r4, #0]
 8002cfa:	e7db      	b.n	8002cb4 <__ssputs_r+0x58>
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	f000 fb7b 	bl	80033f8 <_realloc_r>
 8002d02:	4606      	mov	r6, r0
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1e1      	bne.n	8002ccc <__ssputs_r+0x70>
 8002d08:	4650      	mov	r0, sl
 8002d0a:	6921      	ldr	r1, [r4, #16]
 8002d0c:	f000 face 	bl	80032ac <_free_r>
 8002d10:	e7c7      	b.n	8002ca2 <__ssputs_r+0x46>
	...

08002d14 <_svfiprintf_r>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	4698      	mov	r8, r3
 8002d1a:	898b      	ldrh	r3, [r1, #12]
 8002d1c:	4607      	mov	r7, r0
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	460d      	mov	r5, r1
 8002d22:	4614      	mov	r4, r2
 8002d24:	b09d      	sub	sp, #116	; 0x74
 8002d26:	d50e      	bpl.n	8002d46 <_svfiprintf_r+0x32>
 8002d28:	690b      	ldr	r3, [r1, #16]
 8002d2a:	b963      	cbnz	r3, 8002d46 <_svfiprintf_r+0x32>
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	f000 fb09 	bl	8003344 <_malloc_r>
 8002d32:	6028      	str	r0, [r5, #0]
 8002d34:	6128      	str	r0, [r5, #16]
 8002d36:	b920      	cbnz	r0, 8002d42 <_svfiprintf_r+0x2e>
 8002d38:	230c      	movs	r3, #12
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	e0d1      	b.n	8002ee6 <_svfiprintf_r+0x1d2>
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	616b      	str	r3, [r5, #20]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9309      	str	r3, [sp, #36]	; 0x24
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d50:	2330      	movs	r3, #48	; 0x30
 8002d52:	f04f 0901 	mov.w	r9, #1
 8002d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f00 <_svfiprintf_r+0x1ec>
 8002d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d62:	4623      	mov	r3, r4
 8002d64:	469a      	mov	sl, r3
 8002d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d6a:	b10a      	cbz	r2, 8002d70 <_svfiprintf_r+0x5c>
 8002d6c:	2a25      	cmp	r2, #37	; 0x25
 8002d6e:	d1f9      	bne.n	8002d64 <_svfiprintf_r+0x50>
 8002d70:	ebba 0b04 	subs.w	fp, sl, r4
 8002d74:	d00b      	beq.n	8002d8e <_svfiprintf_r+0x7a>
 8002d76:	465b      	mov	r3, fp
 8002d78:	4622      	mov	r2, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	f7ff ff6d 	bl	8002c5c <__ssputs_r>
 8002d82:	3001      	adds	r0, #1
 8002d84:	f000 80aa 	beq.w	8002edc <_svfiprintf_r+0x1c8>
 8002d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d8a:	445a      	add	r2, fp
 8002d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a2 	beq.w	8002edc <_svfiprintf_r+0x1c8>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da2:	f10a 0a01 	add.w	sl, sl, #1
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	9307      	str	r3, [sp, #28]
 8002daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dae:	931a      	str	r3, [sp, #104]	; 0x68
 8002db0:	4654      	mov	r4, sl
 8002db2:	2205      	movs	r2, #5
 8002db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db8:	4851      	ldr	r0, [pc, #324]	; (8002f00 <_svfiprintf_r+0x1ec>)
 8002dba:	f000 fa41 	bl	8003240 <memchr>
 8002dbe:	9a04      	ldr	r2, [sp, #16]
 8002dc0:	b9d8      	cbnz	r0, 8002dfa <_svfiprintf_r+0xe6>
 8002dc2:	06d0      	lsls	r0, r2, #27
 8002dc4:	bf44      	itt	mi
 8002dc6:	2320      	movmi	r3, #32
 8002dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dcc:	0711      	lsls	r1, r2, #28
 8002dce:	bf44      	itt	mi
 8002dd0:	232b      	movmi	r3, #43	; 0x2b
 8002dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dda:	2b2a      	cmp	r3, #42	; 0x2a
 8002ddc:	d015      	beq.n	8002e0a <_svfiprintf_r+0xf6>
 8002dde:	4654      	mov	r4, sl
 8002de0:	2000      	movs	r0, #0
 8002de2:	f04f 0c0a 	mov.w	ip, #10
 8002de6:	9a07      	ldr	r2, [sp, #28]
 8002de8:	4621      	mov	r1, r4
 8002dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dee:	3b30      	subs	r3, #48	; 0x30
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d94e      	bls.n	8002e92 <_svfiprintf_r+0x17e>
 8002df4:	b1b0      	cbz	r0, 8002e24 <_svfiprintf_r+0x110>
 8002df6:	9207      	str	r2, [sp, #28]
 8002df8:	e014      	b.n	8002e24 <_svfiprintf_r+0x110>
 8002dfa:	eba0 0308 	sub.w	r3, r0, r8
 8002dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	46a2      	mov	sl, r4
 8002e06:	9304      	str	r3, [sp, #16]
 8002e08:	e7d2      	b.n	8002db0 <_svfiprintf_r+0x9c>
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	1d19      	adds	r1, r3, #4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	9103      	str	r1, [sp, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bfbb      	ittet	lt
 8002e16:	425b      	neglt	r3, r3
 8002e18:	f042 0202 	orrlt.w	r2, r2, #2
 8002e1c:	9307      	strge	r3, [sp, #28]
 8002e1e:	9307      	strlt	r3, [sp, #28]
 8002e20:	bfb8      	it	lt
 8002e22:	9204      	strlt	r2, [sp, #16]
 8002e24:	7823      	ldrb	r3, [r4, #0]
 8002e26:	2b2e      	cmp	r3, #46	; 0x2e
 8002e28:	d10c      	bne.n	8002e44 <_svfiprintf_r+0x130>
 8002e2a:	7863      	ldrb	r3, [r4, #1]
 8002e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2e:	d135      	bne.n	8002e9c <_svfiprintf_r+0x188>
 8002e30:	9b03      	ldr	r3, [sp, #12]
 8002e32:	3402      	adds	r4, #2
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	9203      	str	r2, [sp, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bfb8      	it	lt
 8002e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e42:	9305      	str	r3, [sp, #20]
 8002e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f10 <_svfiprintf_r+0x1fc>
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	7821      	ldrb	r1, [r4, #0]
 8002e4e:	f000 f9f7 	bl	8003240 <memchr>
 8002e52:	b140      	cbz	r0, 8002e66 <_svfiprintf_r+0x152>
 8002e54:	2340      	movs	r3, #64	; 0x40
 8002e56:	eba0 000a 	sub.w	r0, r0, sl
 8002e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e5e:	9b04      	ldr	r3, [sp, #16]
 8002e60:	3401      	adds	r4, #1
 8002e62:	4303      	orrs	r3, r0
 8002e64:	9304      	str	r3, [sp, #16]
 8002e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6a:	2206      	movs	r2, #6
 8002e6c:	4825      	ldr	r0, [pc, #148]	; (8002f04 <_svfiprintf_r+0x1f0>)
 8002e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e72:	f000 f9e5 	bl	8003240 <memchr>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d038      	beq.n	8002eec <_svfiprintf_r+0x1d8>
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <_svfiprintf_r+0x1f4>)
 8002e7c:	bb1b      	cbnz	r3, 8002ec6 <_svfiprintf_r+0x1b2>
 8002e7e:	9b03      	ldr	r3, [sp, #12]
 8002e80:	3307      	adds	r3, #7
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	3308      	adds	r3, #8
 8002e88:	9303      	str	r3, [sp, #12]
 8002e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8c:	4433      	add	r3, r6
 8002e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e90:	e767      	b.n	8002d62 <_svfiprintf_r+0x4e>
 8002e92:	460c      	mov	r4, r1
 8002e94:	2001      	movs	r0, #1
 8002e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e9a:	e7a5      	b.n	8002de8 <_svfiprintf_r+0xd4>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f04f 0c0a 	mov.w	ip, #10
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	3401      	adds	r4, #1
 8002ea6:	9305      	str	r3, [sp, #20]
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eae:	3a30      	subs	r2, #48	; 0x30
 8002eb0:	2a09      	cmp	r2, #9
 8002eb2:	d903      	bls.n	8002ebc <_svfiprintf_r+0x1a8>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0c5      	beq.n	8002e44 <_svfiprintf_r+0x130>
 8002eb8:	9105      	str	r1, [sp, #20]
 8002eba:	e7c3      	b.n	8002e44 <_svfiprintf_r+0x130>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ec4:	e7f0      	b.n	8002ea8 <_svfiprintf_r+0x194>
 8002ec6:	ab03      	add	r3, sp, #12
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	462a      	mov	r2, r5
 8002ecc:	4638      	mov	r0, r7
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <_svfiprintf_r+0x1f8>)
 8002ed0:	a904      	add	r1, sp, #16
 8002ed2:	f3af 8000 	nop.w
 8002ed6:	1c42      	adds	r2, r0, #1
 8002ed8:	4606      	mov	r6, r0
 8002eda:	d1d6      	bne.n	8002e8a <_svfiprintf_r+0x176>
 8002edc:	89ab      	ldrh	r3, [r5, #12]
 8002ede:	065b      	lsls	r3, r3, #25
 8002ee0:	f53f af2c 	bmi.w	8002d3c <_svfiprintf_r+0x28>
 8002ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ee6:	b01d      	add	sp, #116	; 0x74
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eec:	ab03      	add	r3, sp, #12
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <_svfiprintf_r+0x1f8>)
 8002ef6:	a904      	add	r1, sp, #16
 8002ef8:	f000 f87c 	bl	8002ff4 <_printf_i>
 8002efc:	e7eb      	b.n	8002ed6 <_svfiprintf_r+0x1c2>
 8002efe:	bf00      	nop
 8002f00:	08003678 	.word	0x08003678
 8002f04:	08003682 	.word	0x08003682
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	08002c5d 	.word	0x08002c5d
 8002f10:	0800367e 	.word	0x0800367e

08002f14 <_printf_common>:
 8002f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f18:	4616      	mov	r6, r2
 8002f1a:	4699      	mov	r9, r3
 8002f1c:	688a      	ldr	r2, [r1, #8]
 8002f1e:	690b      	ldr	r3, [r1, #16]
 8002f20:	4607      	mov	r7, r0
 8002f22:	4293      	cmp	r3, r2
 8002f24:	bfb8      	it	lt
 8002f26:	4613      	movlt	r3, r2
 8002f28:	6033      	str	r3, [r6, #0]
 8002f2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f2e:	460c      	mov	r4, r1
 8002f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f34:	b10a      	cbz	r2, 8002f3a <_printf_common+0x26>
 8002f36:	3301      	adds	r3, #1
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	0699      	lsls	r1, r3, #26
 8002f3e:	bf42      	ittt	mi
 8002f40:	6833      	ldrmi	r3, [r6, #0]
 8002f42:	3302      	addmi	r3, #2
 8002f44:	6033      	strmi	r3, [r6, #0]
 8002f46:	6825      	ldr	r5, [r4, #0]
 8002f48:	f015 0506 	ands.w	r5, r5, #6
 8002f4c:	d106      	bne.n	8002f5c <_printf_common+0x48>
 8002f4e:	f104 0a19 	add.w	sl, r4, #25
 8002f52:	68e3      	ldr	r3, [r4, #12]
 8002f54:	6832      	ldr	r2, [r6, #0]
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	42ab      	cmp	r3, r5
 8002f5a:	dc28      	bgt.n	8002fae <_printf_common+0x9a>
 8002f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f60:	1e13      	subs	r3, r2, #0
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	bf18      	it	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	0692      	lsls	r2, r2, #26
 8002f6a:	d42d      	bmi.n	8002fc8 <_printf_common+0xb4>
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	4638      	mov	r0, r7
 8002f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f74:	47c0      	blx	r8
 8002f76:	3001      	adds	r0, #1
 8002f78:	d020      	beq.n	8002fbc <_printf_common+0xa8>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	68e5      	ldr	r5, [r4, #12]
 8002f7e:	f003 0306 	and.w	r3, r3, #6
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf18      	it	ne
 8002f86:	2500      	movne	r5, #0
 8002f88:	6832      	ldr	r2, [r6, #0]
 8002f8a:	f04f 0600 	mov.w	r6, #0
 8002f8e:	68a3      	ldr	r3, [r4, #8]
 8002f90:	bf08      	it	eq
 8002f92:	1aad      	subeq	r5, r5, r2
 8002f94:	6922      	ldr	r2, [r4, #16]
 8002f96:	bf08      	it	eq
 8002f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bfc4      	itt	gt
 8002fa0:	1a9b      	subgt	r3, r3, r2
 8002fa2:	18ed      	addgt	r5, r5, r3
 8002fa4:	341a      	adds	r4, #26
 8002fa6:	42b5      	cmp	r5, r6
 8002fa8:	d11a      	bne.n	8002fe0 <_printf_common+0xcc>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e008      	b.n	8002fc0 <_printf_common+0xac>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	4652      	mov	r2, sl
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	47c0      	blx	r8
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d103      	bne.n	8002fc4 <_printf_common+0xb0>
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc4:	3501      	adds	r5, #1
 8002fc6:	e7c4      	b.n	8002f52 <_printf_common+0x3e>
 8002fc8:	2030      	movs	r0, #48	; 0x30
 8002fca:	18e1      	adds	r1, r4, r3
 8002fcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fd6:	4422      	add	r2, r4
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fde:	e7c5      	b.n	8002f6c <_printf_common+0x58>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	47c0      	blx	r8
 8002fea:	3001      	adds	r0, #1
 8002fec:	d0e6      	beq.n	8002fbc <_printf_common+0xa8>
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7d9      	b.n	8002fa6 <_printf_common+0x92>
	...

08002ff4 <_printf_i>:
 8002ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	7e27      	ldrb	r7, [r4, #24]
 8002ffc:	4691      	mov	r9, r2
 8002ffe:	2f78      	cmp	r7, #120	; 0x78
 8003000:	4680      	mov	r8, r0
 8003002:	469a      	mov	sl, r3
 8003004:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800300a:	d807      	bhi.n	800301c <_printf_i+0x28>
 800300c:	2f62      	cmp	r7, #98	; 0x62
 800300e:	d80a      	bhi.n	8003026 <_printf_i+0x32>
 8003010:	2f00      	cmp	r7, #0
 8003012:	f000 80d9 	beq.w	80031c8 <_printf_i+0x1d4>
 8003016:	2f58      	cmp	r7, #88	; 0x58
 8003018:	f000 80a4 	beq.w	8003164 <_printf_i+0x170>
 800301c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003024:	e03a      	b.n	800309c <_printf_i+0xa8>
 8003026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800302a:	2b15      	cmp	r3, #21
 800302c:	d8f6      	bhi.n	800301c <_printf_i+0x28>
 800302e:	a001      	add	r0, pc, #4	; (adr r0, 8003034 <_printf_i+0x40>)
 8003030:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003034:	0800308d 	.word	0x0800308d
 8003038:	080030a1 	.word	0x080030a1
 800303c:	0800301d 	.word	0x0800301d
 8003040:	0800301d 	.word	0x0800301d
 8003044:	0800301d 	.word	0x0800301d
 8003048:	0800301d 	.word	0x0800301d
 800304c:	080030a1 	.word	0x080030a1
 8003050:	0800301d 	.word	0x0800301d
 8003054:	0800301d 	.word	0x0800301d
 8003058:	0800301d 	.word	0x0800301d
 800305c:	0800301d 	.word	0x0800301d
 8003060:	080031af 	.word	0x080031af
 8003064:	080030d1 	.word	0x080030d1
 8003068:	08003191 	.word	0x08003191
 800306c:	0800301d 	.word	0x0800301d
 8003070:	0800301d 	.word	0x0800301d
 8003074:	080031d1 	.word	0x080031d1
 8003078:	0800301d 	.word	0x0800301d
 800307c:	080030d1 	.word	0x080030d1
 8003080:	0800301d 	.word	0x0800301d
 8003084:	0800301d 	.word	0x0800301d
 8003088:	08003199 	.word	0x08003199
 800308c:	680b      	ldr	r3, [r1, #0]
 800308e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	600a      	str	r2, [r1, #0]
 8003098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800309c:	2301      	movs	r3, #1
 800309e:	e0a4      	b.n	80031ea <_printf_i+0x1f6>
 80030a0:	6825      	ldr	r5, [r4, #0]
 80030a2:	6808      	ldr	r0, [r1, #0]
 80030a4:	062e      	lsls	r6, r5, #24
 80030a6:	f100 0304 	add.w	r3, r0, #4
 80030aa:	d50a      	bpl.n	80030c2 <_printf_i+0xce>
 80030ac:	6805      	ldr	r5, [r0, #0]
 80030ae:	600b      	str	r3, [r1, #0]
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	da03      	bge.n	80030bc <_printf_i+0xc8>
 80030b4:	232d      	movs	r3, #45	; 0x2d
 80030b6:	426d      	negs	r5, r5
 80030b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030bc:	230a      	movs	r3, #10
 80030be:	485e      	ldr	r0, [pc, #376]	; (8003238 <_printf_i+0x244>)
 80030c0:	e019      	b.n	80030f6 <_printf_i+0x102>
 80030c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80030c6:	6805      	ldr	r5, [r0, #0]
 80030c8:	600b      	str	r3, [r1, #0]
 80030ca:	bf18      	it	ne
 80030cc:	b22d      	sxthne	r5, r5
 80030ce:	e7ef      	b.n	80030b0 <_printf_i+0xbc>
 80030d0:	680b      	ldr	r3, [r1, #0]
 80030d2:	6825      	ldr	r5, [r4, #0]
 80030d4:	1d18      	adds	r0, r3, #4
 80030d6:	6008      	str	r0, [r1, #0]
 80030d8:	0628      	lsls	r0, r5, #24
 80030da:	d501      	bpl.n	80030e0 <_printf_i+0xec>
 80030dc:	681d      	ldr	r5, [r3, #0]
 80030de:	e002      	b.n	80030e6 <_printf_i+0xf2>
 80030e0:	0669      	lsls	r1, r5, #25
 80030e2:	d5fb      	bpl.n	80030dc <_printf_i+0xe8>
 80030e4:	881d      	ldrh	r5, [r3, #0]
 80030e6:	2f6f      	cmp	r7, #111	; 0x6f
 80030e8:	bf0c      	ite	eq
 80030ea:	2308      	moveq	r3, #8
 80030ec:	230a      	movne	r3, #10
 80030ee:	4852      	ldr	r0, [pc, #328]	; (8003238 <_printf_i+0x244>)
 80030f0:	2100      	movs	r1, #0
 80030f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030f6:	6866      	ldr	r6, [r4, #4]
 80030f8:	2e00      	cmp	r6, #0
 80030fa:	bfa8      	it	ge
 80030fc:	6821      	ldrge	r1, [r4, #0]
 80030fe:	60a6      	str	r6, [r4, #8]
 8003100:	bfa4      	itt	ge
 8003102:	f021 0104 	bicge.w	r1, r1, #4
 8003106:	6021      	strge	r1, [r4, #0]
 8003108:	b90d      	cbnz	r5, 800310e <_printf_i+0x11a>
 800310a:	2e00      	cmp	r6, #0
 800310c:	d04d      	beq.n	80031aa <_printf_i+0x1b6>
 800310e:	4616      	mov	r6, r2
 8003110:	fbb5 f1f3 	udiv	r1, r5, r3
 8003114:	fb03 5711 	mls	r7, r3, r1, r5
 8003118:	5dc7      	ldrb	r7, [r0, r7]
 800311a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800311e:	462f      	mov	r7, r5
 8003120:	42bb      	cmp	r3, r7
 8003122:	460d      	mov	r5, r1
 8003124:	d9f4      	bls.n	8003110 <_printf_i+0x11c>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d10b      	bne.n	8003142 <_printf_i+0x14e>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	07df      	lsls	r7, r3, #31
 800312e:	d508      	bpl.n	8003142 <_printf_i+0x14e>
 8003130:	6923      	ldr	r3, [r4, #16]
 8003132:	6861      	ldr	r1, [r4, #4]
 8003134:	4299      	cmp	r1, r3
 8003136:	bfde      	ittt	le
 8003138:	2330      	movle	r3, #48	; 0x30
 800313a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800313e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003142:	1b92      	subs	r2, r2, r6
 8003144:	6122      	str	r2, [r4, #16]
 8003146:	464b      	mov	r3, r9
 8003148:	4621      	mov	r1, r4
 800314a:	4640      	mov	r0, r8
 800314c:	f8cd a000 	str.w	sl, [sp]
 8003150:	aa03      	add	r2, sp, #12
 8003152:	f7ff fedf 	bl	8002f14 <_printf_common>
 8003156:	3001      	adds	r0, #1
 8003158:	d14c      	bne.n	80031f4 <_printf_i+0x200>
 800315a:	f04f 30ff 	mov.w	r0, #4294967295
 800315e:	b004      	add	sp, #16
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	4834      	ldr	r0, [pc, #208]	; (8003238 <_printf_i+0x244>)
 8003166:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800316a:	680e      	ldr	r6, [r1, #0]
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003172:	061f      	lsls	r7, r3, #24
 8003174:	600e      	str	r6, [r1, #0]
 8003176:	d514      	bpl.n	80031a2 <_printf_i+0x1ae>
 8003178:	07d9      	lsls	r1, r3, #31
 800317a:	bf44      	itt	mi
 800317c:	f043 0320 	orrmi.w	r3, r3, #32
 8003180:	6023      	strmi	r3, [r4, #0]
 8003182:	b91d      	cbnz	r5, 800318c <_printf_i+0x198>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	f023 0320 	bic.w	r3, r3, #32
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	2310      	movs	r3, #16
 800318e:	e7af      	b.n	80030f0 <_printf_i+0xfc>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	2378      	movs	r3, #120	; 0x78
 800319a:	4828      	ldr	r0, [pc, #160]	; (800323c <_printf_i+0x248>)
 800319c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031a0:	e7e3      	b.n	800316a <_printf_i+0x176>
 80031a2:	065e      	lsls	r6, r3, #25
 80031a4:	bf48      	it	mi
 80031a6:	b2ad      	uxthmi	r5, r5
 80031a8:	e7e6      	b.n	8003178 <_printf_i+0x184>
 80031aa:	4616      	mov	r6, r2
 80031ac:	e7bb      	b.n	8003126 <_printf_i+0x132>
 80031ae:	680b      	ldr	r3, [r1, #0]
 80031b0:	6826      	ldr	r6, [r4, #0]
 80031b2:	1d1d      	adds	r5, r3, #4
 80031b4:	6960      	ldr	r0, [r4, #20]
 80031b6:	600d      	str	r5, [r1, #0]
 80031b8:	0635      	lsls	r5, r6, #24
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	d501      	bpl.n	80031c2 <_printf_i+0x1ce>
 80031be:	6018      	str	r0, [r3, #0]
 80031c0:	e002      	b.n	80031c8 <_printf_i+0x1d4>
 80031c2:	0671      	lsls	r1, r6, #25
 80031c4:	d5fb      	bpl.n	80031be <_printf_i+0x1ca>
 80031c6:	8018      	strh	r0, [r3, #0]
 80031c8:	2300      	movs	r3, #0
 80031ca:	4616      	mov	r6, r2
 80031cc:	6123      	str	r3, [r4, #16]
 80031ce:	e7ba      	b.n	8003146 <_printf_i+0x152>
 80031d0:	680b      	ldr	r3, [r1, #0]
 80031d2:	1d1a      	adds	r2, r3, #4
 80031d4:	600a      	str	r2, [r1, #0]
 80031d6:	681e      	ldr	r6, [r3, #0]
 80031d8:	2100      	movs	r1, #0
 80031da:	4630      	mov	r0, r6
 80031dc:	6862      	ldr	r2, [r4, #4]
 80031de:	f000 f82f 	bl	8003240 <memchr>
 80031e2:	b108      	cbz	r0, 80031e8 <_printf_i+0x1f4>
 80031e4:	1b80      	subs	r0, r0, r6
 80031e6:	6060      	str	r0, [r4, #4]
 80031e8:	6863      	ldr	r3, [r4, #4]
 80031ea:	6123      	str	r3, [r4, #16]
 80031ec:	2300      	movs	r3, #0
 80031ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031f2:	e7a8      	b.n	8003146 <_printf_i+0x152>
 80031f4:	4632      	mov	r2, r6
 80031f6:	4649      	mov	r1, r9
 80031f8:	4640      	mov	r0, r8
 80031fa:	6923      	ldr	r3, [r4, #16]
 80031fc:	47d0      	blx	sl
 80031fe:	3001      	adds	r0, #1
 8003200:	d0ab      	beq.n	800315a <_printf_i+0x166>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	079b      	lsls	r3, r3, #30
 8003206:	d413      	bmi.n	8003230 <_printf_i+0x23c>
 8003208:	68e0      	ldr	r0, [r4, #12]
 800320a:	9b03      	ldr	r3, [sp, #12]
 800320c:	4298      	cmp	r0, r3
 800320e:	bfb8      	it	lt
 8003210:	4618      	movlt	r0, r3
 8003212:	e7a4      	b.n	800315e <_printf_i+0x16a>
 8003214:	2301      	movs	r3, #1
 8003216:	4632      	mov	r2, r6
 8003218:	4649      	mov	r1, r9
 800321a:	4640      	mov	r0, r8
 800321c:	47d0      	blx	sl
 800321e:	3001      	adds	r0, #1
 8003220:	d09b      	beq.n	800315a <_printf_i+0x166>
 8003222:	3501      	adds	r5, #1
 8003224:	68e3      	ldr	r3, [r4, #12]
 8003226:	9903      	ldr	r1, [sp, #12]
 8003228:	1a5b      	subs	r3, r3, r1
 800322a:	42ab      	cmp	r3, r5
 800322c:	dcf2      	bgt.n	8003214 <_printf_i+0x220>
 800322e:	e7eb      	b.n	8003208 <_printf_i+0x214>
 8003230:	2500      	movs	r5, #0
 8003232:	f104 0619 	add.w	r6, r4, #25
 8003236:	e7f5      	b.n	8003224 <_printf_i+0x230>
 8003238:	08003689 	.word	0x08003689
 800323c:	0800369a 	.word	0x0800369a

08003240 <memchr>:
 8003240:	4603      	mov	r3, r0
 8003242:	b510      	push	{r4, lr}
 8003244:	b2c9      	uxtb	r1, r1
 8003246:	4402      	add	r2, r0
 8003248:	4293      	cmp	r3, r2
 800324a:	4618      	mov	r0, r3
 800324c:	d101      	bne.n	8003252 <memchr+0x12>
 800324e:	2000      	movs	r0, #0
 8003250:	e003      	b.n	800325a <memchr+0x1a>
 8003252:	7804      	ldrb	r4, [r0, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	428c      	cmp	r4, r1
 8003258:	d1f6      	bne.n	8003248 <memchr+0x8>
 800325a:	bd10      	pop	{r4, pc}

0800325c <memcpy>:
 800325c:	440a      	add	r2, r1
 800325e:	4291      	cmp	r1, r2
 8003260:	f100 33ff 	add.w	r3, r0, #4294967295
 8003264:	d100      	bne.n	8003268 <memcpy+0xc>
 8003266:	4770      	bx	lr
 8003268:	b510      	push	{r4, lr}
 800326a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800326e:	4291      	cmp	r1, r2
 8003270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003274:	d1f9      	bne.n	800326a <memcpy+0xe>
 8003276:	bd10      	pop	{r4, pc}

08003278 <memmove>:
 8003278:	4288      	cmp	r0, r1
 800327a:	b510      	push	{r4, lr}
 800327c:	eb01 0402 	add.w	r4, r1, r2
 8003280:	d902      	bls.n	8003288 <memmove+0x10>
 8003282:	4284      	cmp	r4, r0
 8003284:	4623      	mov	r3, r4
 8003286:	d807      	bhi.n	8003298 <memmove+0x20>
 8003288:	1e43      	subs	r3, r0, #1
 800328a:	42a1      	cmp	r1, r4
 800328c:	d008      	beq.n	80032a0 <memmove+0x28>
 800328e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003296:	e7f8      	b.n	800328a <memmove+0x12>
 8003298:	4601      	mov	r1, r0
 800329a:	4402      	add	r2, r0
 800329c:	428a      	cmp	r2, r1
 800329e:	d100      	bne.n	80032a2 <memmove+0x2a>
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032aa:	e7f7      	b.n	800329c <memmove+0x24>

080032ac <_free_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4605      	mov	r5, r0
 80032b0:	2900      	cmp	r1, #0
 80032b2:	d043      	beq.n	800333c <_free_r+0x90>
 80032b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032b8:	1f0c      	subs	r4, r1, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bfb8      	it	lt
 80032be:	18e4      	addlt	r4, r4, r3
 80032c0:	f000 f8d0 	bl	8003464 <__malloc_lock>
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <_free_r+0x94>)
 80032c6:	6813      	ldr	r3, [r2, #0]
 80032c8:	4610      	mov	r0, r2
 80032ca:	b933      	cbnz	r3, 80032da <_free_r+0x2e>
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	6014      	str	r4, [r2, #0]
 80032d0:	4628      	mov	r0, r5
 80032d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032d6:	f000 b8cb 	b.w	8003470 <__malloc_unlock>
 80032da:	42a3      	cmp	r3, r4
 80032dc:	d90a      	bls.n	80032f4 <_free_r+0x48>
 80032de:	6821      	ldr	r1, [r4, #0]
 80032e0:	1862      	adds	r2, r4, r1
 80032e2:	4293      	cmp	r3, r2
 80032e4:	bf01      	itttt	eq
 80032e6:	681a      	ldreq	r2, [r3, #0]
 80032e8:	685b      	ldreq	r3, [r3, #4]
 80032ea:	1852      	addeq	r2, r2, r1
 80032ec:	6022      	streq	r2, [r4, #0]
 80032ee:	6063      	str	r3, [r4, #4]
 80032f0:	6004      	str	r4, [r0, #0]
 80032f2:	e7ed      	b.n	80032d0 <_free_r+0x24>
 80032f4:	461a      	mov	r2, r3
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b10b      	cbz	r3, 80032fe <_free_r+0x52>
 80032fa:	42a3      	cmp	r3, r4
 80032fc:	d9fa      	bls.n	80032f4 <_free_r+0x48>
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	1850      	adds	r0, r2, r1
 8003302:	42a0      	cmp	r0, r4
 8003304:	d10b      	bne.n	800331e <_free_r+0x72>
 8003306:	6820      	ldr	r0, [r4, #0]
 8003308:	4401      	add	r1, r0
 800330a:	1850      	adds	r0, r2, r1
 800330c:	4283      	cmp	r3, r0
 800330e:	6011      	str	r1, [r2, #0]
 8003310:	d1de      	bne.n	80032d0 <_free_r+0x24>
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4401      	add	r1, r0
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	6053      	str	r3, [r2, #4]
 800331c:	e7d8      	b.n	80032d0 <_free_r+0x24>
 800331e:	d902      	bls.n	8003326 <_free_r+0x7a>
 8003320:	230c      	movs	r3, #12
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	e7d4      	b.n	80032d0 <_free_r+0x24>
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	1821      	adds	r1, r4, r0
 800332a:	428b      	cmp	r3, r1
 800332c:	bf01      	itttt	eq
 800332e:	6819      	ldreq	r1, [r3, #0]
 8003330:	685b      	ldreq	r3, [r3, #4]
 8003332:	1809      	addeq	r1, r1, r0
 8003334:	6021      	streq	r1, [r4, #0]
 8003336:	6063      	str	r3, [r4, #4]
 8003338:	6054      	str	r4, [r2, #4]
 800333a:	e7c9      	b.n	80032d0 <_free_r+0x24>
 800333c:	bd38      	pop	{r3, r4, r5, pc}
 800333e:	bf00      	nop
 8003340:	20000348 	.word	0x20000348

08003344 <_malloc_r>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	1ccd      	adds	r5, r1, #3
 8003348:	f025 0503 	bic.w	r5, r5, #3
 800334c:	3508      	adds	r5, #8
 800334e:	2d0c      	cmp	r5, #12
 8003350:	bf38      	it	cc
 8003352:	250c      	movcc	r5, #12
 8003354:	2d00      	cmp	r5, #0
 8003356:	4606      	mov	r6, r0
 8003358:	db01      	blt.n	800335e <_malloc_r+0x1a>
 800335a:	42a9      	cmp	r1, r5
 800335c:	d903      	bls.n	8003366 <_malloc_r+0x22>
 800335e:	230c      	movs	r3, #12
 8003360:	6033      	str	r3, [r6, #0]
 8003362:	2000      	movs	r0, #0
 8003364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003366:	f000 f87d 	bl	8003464 <__malloc_lock>
 800336a:	4921      	ldr	r1, [pc, #132]	; (80033f0 <_malloc_r+0xac>)
 800336c:	680a      	ldr	r2, [r1, #0]
 800336e:	4614      	mov	r4, r2
 8003370:	b99c      	cbnz	r4, 800339a <_malloc_r+0x56>
 8003372:	4f20      	ldr	r7, [pc, #128]	; (80033f4 <_malloc_r+0xb0>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b923      	cbnz	r3, 8003382 <_malloc_r+0x3e>
 8003378:	4621      	mov	r1, r4
 800337a:	4630      	mov	r0, r6
 800337c:	f000 f862 	bl	8003444 <_sbrk_r>
 8003380:	6038      	str	r0, [r7, #0]
 8003382:	4629      	mov	r1, r5
 8003384:	4630      	mov	r0, r6
 8003386:	f000 f85d 	bl	8003444 <_sbrk_r>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	d123      	bne.n	80033d6 <_malloc_r+0x92>
 800338e:	230c      	movs	r3, #12
 8003390:	4630      	mov	r0, r6
 8003392:	6033      	str	r3, [r6, #0]
 8003394:	f000 f86c 	bl	8003470 <__malloc_unlock>
 8003398:	e7e3      	b.n	8003362 <_malloc_r+0x1e>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	1b5b      	subs	r3, r3, r5
 800339e:	d417      	bmi.n	80033d0 <_malloc_r+0x8c>
 80033a0:	2b0b      	cmp	r3, #11
 80033a2:	d903      	bls.n	80033ac <_malloc_r+0x68>
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	441c      	add	r4, r3
 80033a8:	6025      	str	r5, [r4, #0]
 80033aa:	e004      	b.n	80033b6 <_malloc_r+0x72>
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	42a2      	cmp	r2, r4
 80033b0:	bf0c      	ite	eq
 80033b2:	600b      	streq	r3, [r1, #0]
 80033b4:	6053      	strne	r3, [r2, #4]
 80033b6:	4630      	mov	r0, r6
 80033b8:	f000 f85a 	bl	8003470 <__malloc_unlock>
 80033bc:	f104 000b 	add.w	r0, r4, #11
 80033c0:	1d23      	adds	r3, r4, #4
 80033c2:	f020 0007 	bic.w	r0, r0, #7
 80033c6:	1ac2      	subs	r2, r0, r3
 80033c8:	d0cc      	beq.n	8003364 <_malloc_r+0x20>
 80033ca:	1a1b      	subs	r3, r3, r0
 80033cc:	50a3      	str	r3, [r4, r2]
 80033ce:	e7c9      	b.n	8003364 <_malloc_r+0x20>
 80033d0:	4622      	mov	r2, r4
 80033d2:	6864      	ldr	r4, [r4, #4]
 80033d4:	e7cc      	b.n	8003370 <_malloc_r+0x2c>
 80033d6:	1cc4      	adds	r4, r0, #3
 80033d8:	f024 0403 	bic.w	r4, r4, #3
 80033dc:	42a0      	cmp	r0, r4
 80033de:	d0e3      	beq.n	80033a8 <_malloc_r+0x64>
 80033e0:	1a21      	subs	r1, r4, r0
 80033e2:	4630      	mov	r0, r6
 80033e4:	f000 f82e 	bl	8003444 <_sbrk_r>
 80033e8:	3001      	adds	r0, #1
 80033ea:	d1dd      	bne.n	80033a8 <_malloc_r+0x64>
 80033ec:	e7cf      	b.n	800338e <_malloc_r+0x4a>
 80033ee:	bf00      	nop
 80033f0:	20000348 	.word	0x20000348
 80033f4:	2000034c 	.word	0x2000034c

080033f8 <_realloc_r>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	4607      	mov	r7, r0
 80033fc:	4614      	mov	r4, r2
 80033fe:	460e      	mov	r6, r1
 8003400:	b921      	cbnz	r1, 800340c <_realloc_r+0x14>
 8003402:	4611      	mov	r1, r2
 8003404:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003408:	f7ff bf9c 	b.w	8003344 <_malloc_r>
 800340c:	b922      	cbnz	r2, 8003418 <_realloc_r+0x20>
 800340e:	f7ff ff4d 	bl	80032ac <_free_r>
 8003412:	4625      	mov	r5, r4
 8003414:	4628      	mov	r0, r5
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003418:	f000 f830 	bl	800347c <_malloc_usable_size_r>
 800341c:	42a0      	cmp	r0, r4
 800341e:	d20f      	bcs.n	8003440 <_realloc_r+0x48>
 8003420:	4621      	mov	r1, r4
 8003422:	4638      	mov	r0, r7
 8003424:	f7ff ff8e 	bl	8003344 <_malloc_r>
 8003428:	4605      	mov	r5, r0
 800342a:	2800      	cmp	r0, #0
 800342c:	d0f2      	beq.n	8003414 <_realloc_r+0x1c>
 800342e:	4631      	mov	r1, r6
 8003430:	4622      	mov	r2, r4
 8003432:	f7ff ff13 	bl	800325c <memcpy>
 8003436:	4631      	mov	r1, r6
 8003438:	4638      	mov	r0, r7
 800343a:	f7ff ff37 	bl	80032ac <_free_r>
 800343e:	e7e9      	b.n	8003414 <_realloc_r+0x1c>
 8003440:	4635      	mov	r5, r6
 8003442:	e7e7      	b.n	8003414 <_realloc_r+0x1c>

08003444 <_sbrk_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	2300      	movs	r3, #0
 8003448:	4d05      	ldr	r5, [pc, #20]	; (8003460 <_sbrk_r+0x1c>)
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	f7fe f8f2 	bl	8001638 <_sbrk>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_sbrk_r+0x1a>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_sbrk_r+0x1a>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	200003d8 	.word	0x200003d8

08003464 <__malloc_lock>:
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <__malloc_lock+0x8>)
 8003466:	f000 b811 	b.w	800348c <__retarget_lock_acquire_recursive>
 800346a:	bf00      	nop
 800346c:	200003e0 	.word	0x200003e0

08003470 <__malloc_unlock>:
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <__malloc_unlock+0x8>)
 8003472:	f000 b80c 	b.w	800348e <__retarget_lock_release_recursive>
 8003476:	bf00      	nop
 8003478:	200003e0 	.word	0x200003e0

0800347c <_malloc_usable_size_r>:
 800347c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003480:	1f18      	subs	r0, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	bfbc      	itt	lt
 8003486:	580b      	ldrlt	r3, [r1, r0]
 8003488:	18c0      	addlt	r0, r0, r3
 800348a:	4770      	bx	lr

0800348c <__retarget_lock_acquire_recursive>:
 800348c:	4770      	bx	lr

0800348e <__retarget_lock_release_recursive>:
 800348e:	4770      	bx	lr

08003490 <_init>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr

0800349c <_fini>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	bf00      	nop
 80034a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a2:	bc08      	pop	{r3}
 80034a4:	469e      	mov	lr, r3
 80034a6:	4770      	bx	lr
