
rc-car-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800243c  0800243c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800243c  0800243c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002448  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002448  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_line   00006d9f  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000671a  00000000  00000000  00026dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a11  00000000  00000000  0002d4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00060eee  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000780  00000000  00000000  00090650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012f1b  00000000  00000000  00090dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a3ceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020f8  00000000  00000000  000a3d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080023fc 	.word	0x080023fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080023fc 	.word	0x080023fc

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 f8fd 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f002 f915 	bl	80023a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 fb8f 	bl	800089c <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000188:	08002444 	.word	0x08002444
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000190:	20000020 	.word	0x20000020

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001a2:	699a      	ldr	r2, [r3, #24]
 80001a4:	4907      	ldr	r1, [pc, #28]	; (80001c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ae:	699a      	ldr	r2, [r3, #24]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4013      	ands	r3, r2
 80001b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b6:	68fb      	ldr	r3, [r7, #12]
}
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000

080001c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	0a1b      	lsrs	r3, r3, #8
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	615a      	str	r2, [r3, #20]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
	...

080001e8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f7ff ffcb 	bl	8000198 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000202:	2020      	movs	r0, #32
 8000204:	f7ff ffc8 	bl	8000198 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000208:	2004      	movs	r0, #4
 800020a:	f7ff ffc5 	bl	8000198 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800020e:	2008      	movs	r0, #8
 8000210:	f7ff ffc2 	bl	8000198 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(F_R_GPIO_Port, F_R_Pin);
 8000214:	f242 0120 	movw	r1, #8224	; 0x2020
 8000218:	4826      	ldr	r0, [pc, #152]	; (80002b4 <MX_GPIO_Init+0xcc>)
 800021a:	f7ff ffd5 	bl	80001c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 800021e:	4926      	ldr	r1, [pc, #152]	; (80002b8 <MX_GPIO_Init+0xd0>)
 8000220:	4826      	ldr	r0, [pc, #152]	; (80002bc <MX_GPIO_Init+0xd4>)
 8000222:	f7ff ffd1 	bl	80001c8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000226:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <MX_GPIO_Init+0xd0>)
 8000228:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800022a:	2300      	movs	r3, #0
 800022c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4619      	mov	r1, r3
 8000232:	4823      	ldr	r0, [pc, #140]	; (80002c0 <MX_GPIO_Init+0xd8>)
 8000234:	f001 f95a 	bl	80014ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_11
 8000238:	4b22      	ldr	r3, [pc, #136]	; (80002c4 <MX_GPIO_Init+0xdc>)
 800023a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800023c:	2300      	movs	r3, #0
 800023e:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4619      	mov	r1, r3
 8000244:	481b      	ldr	r0, [pc, #108]	; (80002b4 <MX_GPIO_Init+0xcc>)
 8000246:	f001 f951 	bl	80014ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_R_Pin;
 800024a:	f242 0320 	movw	r3, #8224	; 0x2020
 800024e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000250:	2301      	movs	r3, #1
 8000252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000254:	2303      	movs	r3, #3
 8000256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4619      	mov	r1, r3
 8000260:	4814      	ldr	r0, [pc, #80]	; (80002b4 <MX_GPIO_Init+0xcc>)
 8000262:	f001 f943 	bl	80014ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <MX_GPIO_Init+0xe0>)
 8000268:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4619      	mov	r1, r3
 8000272:	4812      	ldr	r0, [pc, #72]	; (80002bc <MX_GPIO_Init+0xd4>)
 8000274:	f001 f93a 	bl	80014ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_GPIO_Init+0xd0>)
 800027a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800027c:	2301      	movs	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000280:	2302      	movs	r3, #2
 8000282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	480b      	ldr	r0, [pc, #44]	; (80002bc <MX_GPIO_Init+0xd4>)
 800028e:	f001 f92d 	bl	80014ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CLK_24MHZ_OUT_Pin;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_GPIO_Init+0xe4>)
 8000294:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000296:	2309      	movs	r3, #9
 8000298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800029a:	2302      	movs	r3, #2
 800029c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CLK_24MHZ_OUT_GPIO_Port, &GPIO_InitStruct);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4803      	ldr	r0, [pc, #12]	; (80002b4 <MX_GPIO_Init+0xcc>)
 80002a8:	f001 f920 	bl	80014ec <LL_GPIO_Init>

}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40010800 	.word	0x40010800
 80002b8:	04200020 	.word	0x04200020
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	40011000 	.word	0x40011000
 80002c4:	0498139b 	.word	0x0498139b
 80002c8:	04dffcff 	.word	0x04dffcff
 80002cc:	04010001 	.word	0x04010001

080002d0 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80002de:	601a      	str	r2, [r3, #0]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr

080002ea <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
 8000326:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	f003 0207 	and.w	r2, r3, #7
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	605a      	str	r2, [r3, #4]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	609a      	str	r2, [r3, #8]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr

0800035a <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 800035a:	b480      	push	{r7}
 800035c:	b083      	sub	sp, #12
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <LL_IWDG_IsReady+0x18>
 800036e:	2301      	movs	r3, #1
 8000370:	e000      	b.n	8000374 <LL_IWDG_IsReady+0x1a>
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
	...

08000380 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_IWDG_Init+0x3c>)
 8000386:	f7ff ffa3 	bl	80002d0 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 800038a:	480c      	ldr	r0, [pc, #48]	; (80003bc <MX_IWDG_Init+0x3c>)
 800038c:	f7ff ffba 	bl	8000304 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_64);
 8000390:	2104      	movs	r1, #4
 8000392:	480a      	ldr	r0, [pc, #40]	; (80003bc <MX_IWDG_Init+0x3c>)
 8000394:	f7ff ffc3 	bl	800031e <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 1000);
 8000398:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <MX_IWDG_Init+0x3c>)
 800039e:	f7ff ffcd 	bl	800033c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 80003a2:	bf00      	nop
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_IWDG_Init+0x3c>)
 80003a6:	f7ff ffd8 	bl	800035a <LL_IWDG_IsReady>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d1f9      	bne.n	80003a4 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 80003b0:	4802      	ldr	r0, [pc, #8]	; (80003bc <MX_IWDG_Init+0x3c>)
 80003b2:	f7ff ff9a 	bl	80002ea <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40003000 	.word	0x40003000

080003c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <__NVIC_SetPriorityGrouping+0x44>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003dc:	4013      	ands	r3, r2
 80003de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003f2:	4a04      	ldr	r2, [pc, #16]	; (8000404 <__NVIC_SetPriorityGrouping+0x44>)
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	60d3      	str	r3, [r2, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <__NVIC_GetPriorityGrouping+0x18>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	f003 0307 	and.w	r3, r3, #7
}
 8000416:	4618      	mov	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000432:	2b00      	cmp	r3, #0
 8000434:	db0b      	blt.n	800044e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	f003 021f 	and.w	r2, r3, #31
 800043c:	4906      	ldr	r1, [pc, #24]	; (8000458 <__NVIC_EnableIRQ+0x34>)
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	095b      	lsrs	r3, r3, #5
 8000444:	2001      	movs	r0, #1
 8000446:	fa00 f202 	lsl.w	r2, r0, r2
 800044a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	e000e100 	.word	0xe000e100

0800045c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046c:	2b00      	cmp	r3, #0
 800046e:	db0a      	blt.n	8000486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	490c      	ldr	r1, [pc, #48]	; (80004a8 <__NVIC_SetPriority+0x4c>)
 8000476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047a:	0112      	lsls	r2, r2, #4
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	440b      	add	r3, r1
 8000480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000484:	e00a      	b.n	800049c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4908      	ldr	r1, [pc, #32]	; (80004ac <__NVIC_SetPriority+0x50>)
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f003 030f 	and.w	r3, r3, #15
 8000492:	3b04      	subs	r3, #4
 8000494:	0112      	lsls	r2, r2, #4
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	440b      	add	r3, r1
 800049a:	761a      	strb	r2, [r3, #24]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000e100 	.word	0xe000e100
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f003 0307 	and.w	r3, r3, #7
 80004c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	f1c3 0307 	rsb	r3, r3, #7
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	bf28      	it	cs
 80004ce:	2304      	movcs	r3, #4
 80004d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	3304      	adds	r3, #4
 80004d6:	2b06      	cmp	r3, #6
 80004d8:	d902      	bls.n	80004e0 <NVIC_EncodePriority+0x30>
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	3b03      	subs	r3, #3
 80004de:	e000      	b.n	80004e2 <NVIC_EncodePriority+0x32>
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004e4:	f04f 32ff 	mov.w	r2, #4294967295
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	43da      	mvns	r2, r3
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	401a      	ands	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004f8:	f04f 31ff 	mov.w	r1, #4294967295
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	43d9      	mvns	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000508:	4313      	orrs	r3, r2
         );
}
 800050a:	4618      	mov	r0, r3
 800050c:	3724      	adds	r7, #36	; 0x24
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_RCC_HSE_Enable+0x18>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <LL_RCC_HSE_Enable+0x18>)
 800051e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_RCC_HSE_IsReady+0x20>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000540:	bf0c      	ite	eq
 8000542:	2301      	moveq	r3, #1
 8000544:	2300      	movne	r3, #0
 8000546:	b2db      	uxtb	r3, r3
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_RCC_LSE_Enable+0x18>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <LL_RCC_LSE_Enable+0x18>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6213      	str	r3, [r2, #32]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LL_RCC_LSE_IsReady+0x20>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b02      	cmp	r3, #2
 800057e:	bf0c      	ite	eq
 8000580:	2301      	moveq	r3, #1
 8000582:	2300      	movne	r3, #0
 8000584:	b2db      	uxtb	r3, r3
}
 8000586:	4618      	mov	r0, r3
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <LL_RCC_LSI_Enable+0x18>)
 800059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <LL_RCC_LSI_Enable+0x18>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <LL_RCC_LSI_IsReady+0x20>)
 80005b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	2b02      	cmp	r3, #2
 80005be:	bf0c      	ite	eq
 80005c0:	2301      	moveq	r3, #1
 80005c2:	2300      	movne	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <LL_RCC_SetSysClkSource+0x24>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f023 0203 	bic.w	r2, r3, #3
 80005e4:	4904      	ldr	r1, [pc, #16]	; (80005f8 <LL_RCC_SetSysClkSource+0x24>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	604b      	str	r3, [r1, #4]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <LL_RCC_GetSysClkSource+0x14>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	f003 030c 	and.w	r3, r3, #12
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LL_RCC_SetAHBPrescaler+0x24>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000624:	4904      	ldr	r1, [pc, #16]	; (8000638 <LL_RCC_SetAHBPrescaler+0x24>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	604b      	str	r3, [r1, #4]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800064c:	4904      	ldr	r1, [pc, #16]	; (8000660 <LL_RCC_SetAPB1Prescaler+0x24>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4313      	orrs	r3, r2
 8000652:	604b      	str	r3, [r1, #4]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <LL_RCC_SetAPB2Prescaler+0x24>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000674:	4904      	ldr	r1, [pc, #16]	; (8000688 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4313      	orrs	r3, r2
 800067a:	604b      	str	r3, [r1, #4]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <LL_RCC_ConfigMCO>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, MCOxSource);
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <LL_RCC_ConfigMCO+0x24>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <LL_RCC_ConfigMCO+0x24>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	604b      	str	r3, [r1, #4]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <LL_RCC_SetRTCClockSource+0x24>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80006c4:	4904      	ldr	r1, [pc, #16]	; (80006d8 <LL_RCC_SetRTCClockSource+0x24>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	620b      	str	r3, [r1, #32]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV128
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <LL_RCC_GetRTCClockSource+0x14>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <LL_RCC_EnableRTC+0x18>)
 80006fa:	6a1b      	ldr	r3, [r3, #32]
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <LL_RCC_EnableRTC+0x18>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000702:	6213      	str	r3, [r2, #32]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000

08000710 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <LL_RCC_ForceBackupDomainReset+0x18>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <LL_RCC_ForceBackupDomainReset+0x18>)
 800071a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071e:	6213      	str	r3, [r2, #32]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000

0800072c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a03      	ldr	r2, [pc, #12]	; (8000744 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 8000736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800073a:	6213      	str	r3, [r2, #32]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40021000 	.word	0x40021000

08000748 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <LL_RCC_PLL_Enable+0x18>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a03      	ldr	r2, [pc, #12]	; (8000760 <LL_RCC_PLL_Enable+0x18>)
 8000752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000

08000764 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <LL_RCC_PLL_IsReady+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000

08000788 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	430b      	orrs	r3, r1
 80007a4:	4903      	ldr	r1, [pc, #12]	; (80007b4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80007a6:	4313      	orrs	r3, r2
 80007a8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_APB1_GRP1_EnableClock>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	4907      	ldr	r1, [pc, #28]	; (80007e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4013      	ands	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <LL_APB2_GRP1_EnableClock>:
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007f2:	699a      	ldr	r2, [r3, #24]
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fe:	699a      	ldr	r2, [r3, #24]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4013      	ands	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LL_FLASH_SetLatency+0x24>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f023 0207 	bic.w	r2, r3, #7
 8000828:	4904      	ldr	r1, [pc, #16]	; (800083c <LL_FLASH_SetLatency+0x24>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	600b      	str	r3, [r1, #0]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <LL_FLASH_GetLatency+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0307 	and.w	r3, r3, #7
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40022000 	.word	0x40022000

08000858 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <LL_PWR_EnableBkUpAccess+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a03      	ldr	r2, [pc, #12]	; (8000870 <LL_PWR_EnableBkUpAccess+0x18>)
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	40007000 	.word	0x40007000

08000874 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800087e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000882:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800088a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088e:	6053      	str	r3, [r2, #4]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40010000 	.word	0x40010000

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff ffa1 	bl	80007e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80008a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008aa:	f7ff ff85 	bl	80007b8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ae:	2003      	movs	r0, #3
 80008b0:	f7ff fd86 	bl	80003c0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80008b4:	f7ff fda8 	bl	8000408 <__NVIC_GetPriorityGrouping>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fdf6 	bl	80004b0 <NVIC_EncodePriority>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff fdc6 	bl	800045c <__NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  NVIC_SetPriority(RCC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008d0:	f7ff fd9a 	bl	8000408 <__NVIC_GetPriorityGrouping>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fde8 	bl	80004b0 <NVIC_EncodePriority>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4619      	mov	r1, r3
 80008e4:	2005      	movs	r0, #5
 80008e6:	f7ff fdb9 	bl	800045c <__NVIC_SetPriority>
  NVIC_EnableIRQ(RCC_IRQn);
 80008ea:	2005      	movs	r0, #5
 80008ec:	f7ff fd9a 	bl	8000424 <__NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80008f0:	f7ff ffc0 	bl	8000874 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f80e 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f7ff fc76 	bl	80001e8 <MX_GPIO_Init>
  MX_IWDG_Init();
 80008fc:	f7ff fd40 	bl	8000380 <MX_IWDG_Init>
  MX_RTC_Init();
 8000900:	f000 f94c 	bl	8000b9c <MX_RTC_Init>
  MX_TIM3_Init();
 8000904:	f000 face 	bl	8000ea4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000908:	f000 fc5c 	bl	80011c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800090c:	f000 fcc6 	bl	800129c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x74>
	...

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7d 	bl	8000818 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800091e:	bf00      	nop
 8000920:	f7ff ff8e 	bl	8000840 <LL_FLASH_GetLatency>
 8000924:	4603      	mov	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	d1fa      	bne.n	8000920 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800092a:	f7ff fdf3 	bl	8000514 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800092e:	bf00      	nop
 8000930:	f7ff fdfe 	bl	8000530 <LL_RCC_HSE_IsReady>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d1fa      	bne.n	8000930 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 800093a:	f7ff fe2b 	bl	8000594 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800093e:	bf00      	nop
 8000940:	f7ff fe36 	bl	80005b0 <LL_RCC_LSI_IsReady>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d1fa      	bne.n	8000940 <SystemClock_Config+0x2c>
  {

  }
  LL_PWR_EnableBkUpAccess();
 800094a:	f7ff ff85 	bl	8000858 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 800094e:	f7ff fec5 	bl	80006dc <LL_RCC_GetRTCClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000958:	d003      	beq.n	8000962 <SystemClock_Config+0x4e>
  {
    LL_RCC_ForceBackupDomainReset();
 800095a:	f7ff fed9 	bl	8000710 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 800095e:	f7ff fee5 	bl	800072c <LL_RCC_ReleaseBackupDomainReset>
  }
  LL_RCC_LSE_Enable();
 8000962:	f7ff fdf7 	bl	8000554 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000966:	bf00      	nop
 8000968:	f7ff fe02 	bl	8000570 <LL_RCC_LSE_IsReady>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d1fa      	bne.n	8000968 <SystemClock_Config+0x54>
  {

  }
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8000972:	f7ff feb3 	bl	80006dc <LL_RCC_GetRTCClockSource>
 8000976:	4603      	mov	r3, r0
 8000978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800097c:	d003      	beq.n	8000986 <SystemClock_Config+0x72>
  {
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 800097e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000982:	f7ff fe97 	bl	80006b4 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8000986:	f7ff feb5 	bl	80006f4 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 800098a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800098e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000992:	f7ff fef9 	bl	8000788 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000996:	f7ff fed7 	bl	8000748 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800099a:	bf00      	nop
 800099c:	f7ff fee2 	bl	8000764 <LL_RCC_PLL_IsReady>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d1fa      	bne.n	800099c <SystemClock_Config+0x88>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fe34 	bl	8000614 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80009ac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80009b0:	f7ff fe44 	bl	800063c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 80009b4:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80009b8:	f7ff fe54 	bl	8000664 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fe09 	bl	80005d4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009c2:	bf00      	nop
 80009c4:	f7ff fe1a 	bl	80005fc <LL_RCC_GetSysClkSource>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d1fa      	bne.n	80009c4 <SystemClock_Config+0xb0>
  {

  }
  LL_Init1msTick(6000000);
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <SystemClock_Config+0xd4>)
 80009d0:	f001 fccc 	bl	800236c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <SystemClock_Config+0xd8>)
 80009d6:	f001 fcd7 	bl	8002388 <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_PLLCLK_DIV_2);
 80009da:	f04f 60e0 	mov.w	r0, #117440512	; 0x7000000
 80009de:	f7ff fe55 	bl	800068c <LL_RCC_ConfigMCO>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	005b8d80 	.word	0x005b8d80
 80009ec:	02dc6c00 	.word	0x02dc6c00

080009f0 <__NVIC_GetPriorityGrouping>:
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <__NVIC_EnableIRQ+0x34>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <LL_RCC_EnableRTC>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <LL_RCC_EnableRTC+0x18>)
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <LL_RCC_EnableRTC+0x18>)
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	6213      	str	r3, [r2, #32]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000

08000b18 <LL_APB1_GRP1_EnableClock>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b22:	69da      	ldr	r2, [r3, #28]
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b2e:	69da      	ldr	r2, [r3, #28]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <LL_PWR_EnableBkUpAccess>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <LL_PWR_EnableBkUpAccess+0x18>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <LL_PWR_EnableBkUpAccess+0x18>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40007000 	.word	0x40007000

08000b64 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f023 020f 	bic.w	r2, r3, #15
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	0c1b      	lsrs	r3, r3, #16
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	041b      	lsls	r3, r3, #16
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	b292      	uxth	r2, r2
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60da      	str	r2, [r3, #12]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2100      	movs	r1, #0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	801a      	strh	r2, [r3, #0]
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	709a      	strb	r2, [r3, #2]

    LL_PWR_EnableBkUpAccess();
 8000bb8:	f7ff ffc6 	bl	8000b48 <LL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_BKP);
 8000bbc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000bc0:	f7ff ffaa 	bl	8000b18 <LL_APB1_GRP1_EnableClock>
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8000bc4:	f7ff ff9a 	bl	8000afc <LL_RCC_EnableRTC>

  /* RTC interrupt Init */
  NVIC_SetPriority(RTC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bc8:	f7ff ff12 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff60 	bl	8000a98 <NVIC_EncodePriority>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f7ff ff31 	bl	8000a44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RTC_IRQn);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f7ff ff12 	bl	8000a0c <__NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.AsynchPrescaler = 0xFFFFFFFFU;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	60bb      	str	r3, [r7, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <MX_RTC_Init+0x88>)
 8000bf6:	f000 fed3 	bl	80019a0 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 0xFFFFFFFFU);
 8000bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <MX_RTC_Init+0x88>)
 8000c00:	f7ff ffb0 	bl	8000b64 <LL_RTC_SetAsynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  RTC_TimeStruct.Hours = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	713b      	strb	r3, [r7, #4]
  RTC_TimeStruct.Minutes = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	717b      	strb	r3, [r7, #5]
  RTC_TimeStruct.Seconds = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71bb      	strb	r3, [r7, #6]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	461a      	mov	r2, r3
 8000c14:	2101      	movs	r1, #1
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_RTC_Init+0x88>)
 8000c18:	f000 fefe 	bl	8001a18 <LL_RTC_TIME_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40002800 	.word	0x40002800

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_IRQn 0 */
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <LL_APB1_GRP1_EnableClock>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cb2:	69da      	ldr	r2, [r3, #28]
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cbe:	69da      	ldr	r2, [r3, #28]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <LL_APB2_GRP1_EnableClock>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cee:	699a      	ldr	r2, [r3, #24]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d01c      	beq.n	8000d72 <LL_TIM_OC_DisableFast+0x4a>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d017      	beq.n	8000d6e <LL_TIM_OC_DisableFast+0x46>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b10      	cmp	r3, #16
 8000d42:	d012      	beq.n	8000d6a <LL_TIM_OC_DisableFast+0x42>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b40      	cmp	r3, #64	; 0x40
 8000d48:	d00d      	beq.n	8000d66 <LL_TIM_OC_DisableFast+0x3e>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d50:	d007      	beq.n	8000d62 <LL_TIM_OC_DisableFast+0x3a>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d58:	d101      	bne.n	8000d5e <LL_TIM_OC_DisableFast+0x36>
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	e00a      	b.n	8000d74 <LL_TIM_OC_DisableFast+0x4c>
 8000d5e:	2306      	movs	r3, #6
 8000d60:	e008      	b.n	8000d74 <LL_TIM_OC_DisableFast+0x4c>
 8000d62:	2304      	movs	r3, #4
 8000d64:	e006      	b.n	8000d74 <LL_TIM_OC_DisableFast+0x4c>
 8000d66:	2303      	movs	r3, #3
 8000d68:	e004      	b.n	8000d74 <LL_TIM_OC_DisableFast+0x4c>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e002      	b.n	8000d74 <LL_TIM_OC_DisableFast+0x4c>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <LL_TIM_OC_DisableFast+0x4c>
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3318      	adds	r3, #24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LL_TIM_OC_DisableFast+0x80>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	440b      	add	r3, r1
 8000d84:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <LL_TIM_OC_DisableFast+0x84>)
 8000d8e:	5ccb      	ldrb	r3, [r1, r3]
 8000d90:	4619      	mov	r1, r3
 8000d92:	2304      	movs	r3, #4
 8000d94:	408b      	lsls	r3, r1
 8000d96:	43db      	mvns	r3, r3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	601a      	str	r2, [r3, #0]

}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	08002414 	.word	0x08002414
 8000dac:	0800241c 	.word	0x0800241c

08000db0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d01c      	beq.n	8000dfa <LL_TIM_OC_EnablePreload+0x4a>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d017      	beq.n	8000df6 <LL_TIM_OC_EnablePreload+0x46>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d012      	beq.n	8000df2 <LL_TIM_OC_EnablePreload+0x42>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b40      	cmp	r3, #64	; 0x40
 8000dd0:	d00d      	beq.n	8000dee <LL_TIM_OC_EnablePreload+0x3e>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd8:	d007      	beq.n	8000dea <LL_TIM_OC_EnablePreload+0x3a>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de0:	d101      	bne.n	8000de6 <LL_TIM_OC_EnablePreload+0x36>
 8000de2:	2305      	movs	r3, #5
 8000de4:	e00a      	b.n	8000dfc <LL_TIM_OC_EnablePreload+0x4c>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e008      	b.n	8000dfc <LL_TIM_OC_EnablePreload+0x4c>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <LL_TIM_OC_EnablePreload+0x4c>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <LL_TIM_OC_EnablePreload+0x4c>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <LL_TIM_OC_EnablePreload+0x4c>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_TIM_OC_EnablePreload+0x4c>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3318      	adds	r3, #24
 8000e02:	4619      	mov	r1, r3
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LL_TIM_OC_EnablePreload+0x80>)
 8000e08:	5cd3      	ldrb	r3, [r2, r3]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_TIM_OC_EnablePreload+0x84>)
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	08002414 	.word	0x08002414
 8000e34:	0800241c 	.word	0x0800241c

08000e38 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e4a:	f023 0307 	bic.w	r3, r3, #7
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	605a      	str	r2, [r3, #4]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b092      	sub	sp, #72	; 0x48
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000eaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fa92 	bl	80023ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff fee6 	bl	8000ca8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 114;
 8000edc:	2372      	movs	r3, #114	; 0x72
 8000ede:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 2004;
 8000ee4:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000eee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4843      	ldr	r0, [pc, #268]	; (8001004 <MX_TIM3_Init+0x160>)
 8000ef6:	f000 fefd 	bl	8001cf4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000efa:	4842      	ldr	r0, [pc, #264]	; (8001004 <MX_TIM3_Init+0x160>)
 8000efc:	f7ff ff04 	bl	8000d08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f00:	2100      	movs	r1, #0
 8000f02:	4840      	ldr	r0, [pc, #256]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f04:	f7ff ff98 	bl	8000e38 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	483e      	ldr	r0, [pc, #248]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f0c:	f7ff ff50 	bl	8000db0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 990;
 8000f1c:	f240 33de 	movw	r3, #990	; 0x3de
 8000f20:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4835      	ldr	r0, [pc, #212]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f30:	f000 ff3e 	bl	8001db0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000f34:	2101      	movs	r1, #1
 8000f36:	4833      	ldr	r0, [pc, #204]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f38:	f7ff fef6 	bl	8000d28 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4831      	ldr	r0, [pc, #196]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f40:	f7ff ff36 	bl	8000db0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 1001;
 8000f44:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8000f48:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2110      	movs	r1, #16
 8000f52:	482c      	ldr	r0, [pc, #176]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f54:	f000 ff2c 	bl	8001db0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8000f58:	2110      	movs	r1, #16
 8000f5a:	482a      	ldr	r0, [pc, #168]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f5c:	f7ff fee4 	bl	8000d28 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	4827      	ldr	r0, [pc, #156]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f66:	f7ff ff23 	bl	8000db0 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	4823      	ldr	r0, [pc, #140]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f76:	f000 ff1b 	bl	8001db0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8000f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7e:	4821      	ldr	r0, [pc, #132]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f80:	f7ff fed2 	bl	8000d28 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	481e      	ldr	r0, [pc, #120]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f8a:	f7ff ff11 	bl	8000db0 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	461a      	mov	r2, r3
 8000f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f98:	481a      	ldr	r0, [pc, #104]	; (8001004 <MX_TIM3_Init+0x160>)
 8000f9a:	f000 ff09 	bl	8001db0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <MX_TIM3_Init+0x160>)
 8000fa4:	f7ff fec0 	bl	8000d28 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <MX_TIM3_Init+0x160>)
 8000fac:	f7ff ff58 	bl	8000e60 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000fb0:	4814      	ldr	r0, [pc, #80]	; (8001004 <MX_TIM3_Init+0x160>)
 8000fb2:	f7ff ff67 	bl	8000e84 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f7ff fe8e 	bl	8000cd8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	f7ff fe8b 	bl	8000cd8 <LL_APB2_GRP1_EnableClock>
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = PWM_SPEED_Pin|PWM_RUDE_Pin;
 8000fc2:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8000fc6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_TIM3_Init+0x164>)
 8000fda:	f000 fa87 	bl	80014ec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM_CAM_YAW_Pin|PWM_CAM_PITCH_Pin;
 8000fde:	f240 3303 	movw	r3, #771	; 0x303
 8000fe2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM3_Init+0x168>)
 8000ff6:	f000 fa79 	bl	80014ec <LL_GPIO_Init>

}
 8000ffa:	bf00      	nop
 8000ffc:	3748      	adds	r7, #72	; 0x48
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40000400 	.word	0x40000400
 8001008:	40010800 	.word	0x40010800
 800100c:	40010c00 	.word	0x40010c00

08001010 <__NVIC_GetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4906      	ldr	r1, [pc, #24]	; (8001060 <__NVIC_EnableIRQ+0x34>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_APB1_GRP1_EnableClock>:
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001126:	69da      	ldr	r2, [r3, #28]
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001132:	69da      	ldr	r2, [r3, #28]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <LL_APB2_GRP1_EnableClock>:
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001156:	699a      	ldr	r2, [r3, #24]
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001162:	699a      	ldr	r2, [r3, #24]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	60da      	str	r2, [r3, #12]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	615a      	str	r2, [r3, #20]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80011ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011f0:	f7ff ffac 	bl	800114c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff ffa9 	bl	800114c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = U1TX_Pin;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_USART1_UART_Init+0xc4>)
 80011fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011fe:	2309      	movs	r3, #9
 8001200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(U1TX_GPIO_Port, &GPIO_InitStruct);
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <MX_USART1_UART_Init+0xc8>)
 8001210:	f000 f96c 	bl	80014ec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sBUS_Pin;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_USART1_UART_Init+0xcc>)
 8001216:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001218:	2304      	movs	r3, #4
 800121a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(sBUS_GPIO_Port, &GPIO_InitStruct);
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	481a      	ldr	r0, [pc, #104]	; (800128c <MX_USART1_UART_Init+0xc8>)
 8001222:	f000 f963 	bl	80014ec <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001226:	f7ff fef3 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800122a:	4603      	mov	r3, r0
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff41 	bl	80010b8 <NVIC_EncodePriority>
 8001236:	4603      	mov	r3, r0
 8001238:	4619      	mov	r1, r3
 800123a:	2025      	movs	r0, #37	; 0x25
 800123c:	f7ff ff12 	bl	8001064 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001240:	2025      	movs	r0, #37	; 0x25
 8001242:	f7ff fef3 	bl	800102c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART1_UART_Init+0xd0>)
 8001248:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800125c:	2304      	movs	r3, #4
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <MX_USART1_UART_Init+0xd4>)
 8001270:	f001 f802 	bl	8002278 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <MX_USART1_UART_Init+0xd4>)
 8001276:	f7ff ff90 	bl	800119a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_USART1_UART_Init+0xd4>)
 800127c:	f7ff ff7e 	bl	800117c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	04020002 	.word	0x04020002
 800128c:	40010800 	.word	0x40010800
 8001290:	04040004 	.word	0x04040004
 8001294:	000186a0 	.word	0x000186a0
 8001298:	40013800 	.word	0x40013800

0800129c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80012c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012c8:	f7ff ff28 	bl	800111c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012cc:	2004      	movs	r0, #4
 80012ce:	f7ff ff3d 	bl	800114c <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LOG_OUT_Pin;
 80012d2:	f240 4304 	movw	r3, #1028	; 0x404
 80012d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012d8:	2309      	movs	r3, #9
 80012da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LOG_OUT_GPIO_Port, &GPIO_InitStruct);
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	481f      	ldr	r0, [pc, #124]	; (8001368 <MX_USART2_UART_Init+0xcc>)
 80012ea:	f000 f8ff 	bl	80014ec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = U2RX_Pin;
 80012ee:	f640 0308 	movw	r3, #2056	; 0x808
 80012f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80012f4:	2304      	movs	r3, #4
 80012f6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(U2RX_GPIO_Port, &GPIO_InitStruct);
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <MX_USART2_UART_Init+0xcc>)
 80012fe:	f000 f8f5 	bl	80014ec <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001302:	f7ff fe85 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001306:	4603      	mov	r3, r0
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fed3 	bl	80010b8 <NVIC_EncodePriority>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	2026      	movs	r0, #38	; 0x26
 8001318:	f7ff fea4 	bl	8001064 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800131c:	2026      	movs	r0, #38	; 0x26
 800131e:	f7ff fe85 	bl	800102c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001322:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001326:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001338:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800133a:	230c      	movs	r3, #12
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_USART2_UART_Init+0xd0>)
 800134e:	f000 ff93 	bl	8002278 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_USART2_UART_Init+0xd0>)
 8001354:	f7ff ff21 	bl	800119a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_USART2_UART_Init+0xd0>)
 800135a:	f7ff ff0f 	bl	800117c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	; 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40010800 	.word	0x40010800
 800136c:	40004400 	.word	0x40004400

08001370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <LL_GPIO_SetPinMode>:
{
 800137c:	b490      	push	{r4, r7}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	461a      	mov	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0e1b      	lsrs	r3, r3, #24
 8001390:	4413      	add	r3, r2
 8001392:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	210f      	movs	r1, #15
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	401a      	ands	r2, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	61bb      	str	r3, [r7, #24]
  return result;
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	6023      	str	r3, [r4, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc90      	pop	{r4, r7}
 80013de:	4770      	bx	lr

080013e0 <LL_GPIO_SetPinSpeed>:
{
 80013e0:	b490      	push	{r4, r7}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	0e1b      	lsrs	r3, r3, #24
 80013f4:	4413      	add	r3, r2
 80013f6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80013f8:	6822      	ldr	r2, [r4, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	613b      	str	r3, [r7, #16]
  return result;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fab3 f383 	clz	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	2103      	movs	r1, #3
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	61bb      	str	r3, [r7, #24]
  return result;
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	6023      	str	r3, [r4, #0]
}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bc90      	pop	{r4, r7}
 8001442:	4770      	bx	lr

08001444 <LL_GPIO_SetPinOutputType>:
{
 8001444:	b490      	push	{r4, r7}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	461a      	mov	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	0e1b      	lsrs	r3, r3, #24
 8001458:	4413      	add	r3, r2
 800145a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	613b      	str	r3, [r7, #16]
  return result;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	2104      	movs	r1, #4
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	401a      	ands	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	61bb      	str	r3, [r7, #24]
  return result;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	6023      	str	r3, [r4, #0]
}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc90      	pop	{r4, r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_GPIO_SetPinPull>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	613b      	str	r3, [r7, #16]
  return result;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	408b      	lsls	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	60da      	str	r2, [r3, #12]
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	0c1b      	lsrs	r3, r3, #16
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	60fb      	str	r3, [r7, #12]
  return result;
 800150c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001516:	e044      	b.n	80015a2 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	409a      	lsls	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03a      	beq.n	800159c <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	2b07      	cmp	r3, #7
 800152a:	d806      	bhi.n	800153a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800152c:	f240 1201 	movw	r2, #257	; 0x101
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	e008      	b.n	800154c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b08      	subs	r3, #8
 800153e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800154a:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d106      	bne.n	8001562 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	461a      	mov	r2, r3
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffa3 	bl	80014a8 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	461a      	mov	r2, r3
 8001568:	69b9      	ldr	r1, [r7, #24]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff06 	bl	800137c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d003      	beq.n	8001580 <LL_GPIO_Init+0x94>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b09      	cmp	r3, #9
 800157e:	d10d      	bne.n	800159c <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	461a      	mov	r2, r3
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	461a      	mov	r2, r3
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff54 	bl	8001444 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3301      	adds	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1b4      	bne.n	8001518 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <LL_RCC_GetSysClkSource>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <LL_RCC_GetSysClkSource+0x14>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000

080015d0 <LL_RCC_GetAHBPrescaler>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <LL_RCC_GetAHBPrescaler+0x14>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_RCC_GetAPB1Prescaler>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000

08001600 <LL_RCC_GetAPB2Prescaler>:
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000

08001618 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <LL_RCC_PLL_GetMainSource+0x14>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40021000 	.word	0x40021000

08001630 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <LL_RCC_PLL_GetPrediv+0x18>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	0c5b      	lsrs	r3, r3, #17
 8001652:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800166c:	f000 f820 	bl	80016b0 <RCC_GetSystemClockFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f83e 	bl	80016fc <RCC_GetHCLKClockFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f84c 	bl	8001728 <RCC_GetPCLK1ClockFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f858 	bl	8001750 <RCC_GetPCLK2ClockFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60da      	str	r2, [r3, #12]
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80016ba:	f7ff ff7d 	bl	80015b8 <LL_RCC_GetSysClkSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d00c      	beq.n	80016de <RCC_GetSystemClockFreq+0x2e>
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d80e      	bhi.n	80016e6 <RCC_GetSystemClockFreq+0x36>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <RCC_GetSystemClockFreq+0x22>
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d003      	beq.n	80016d8 <RCC_GetSystemClockFreq+0x28>
 80016d0:	e009      	b.n	80016e6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <RCC_GetSystemClockFreq+0x48>)
 80016d4:	607b      	str	r3, [r7, #4]
      break;
 80016d6:	e009      	b.n	80016ec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <RCC_GetSystemClockFreq+0x48>)
 80016da:	607b      	str	r3, [r7, #4]
      break;
 80016dc:	e006      	b.n	80016ec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80016de:	f000 f84b 	bl	8001778 <RCC_PLL_GetFreqDomain_SYS>
 80016e2:	6078      	str	r0, [r7, #4]
      break;
 80016e4:	e002      	b.n	80016ec <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <RCC_GetSystemClockFreq+0x48>)
 80016e8:	607b      	str	r3, [r7, #4]
      break;
 80016ea:	bf00      	nop
  }

  return frequency;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	007a1200 	.word	0x007a1200

080016fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001704:	f7ff ff64 	bl	80015d0 <LL_RCC_GetAHBPrescaler>
 8001708:	4603      	mov	r3, r0
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <RCC_GetHCLKClockFreq+0x28>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	40d3      	lsrs	r3, r2
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	08002424 	.word	0x08002424

08001728 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001730:	f7ff ff5a 	bl	80015e8 <LL_RCC_GetAPB1Prescaler>
 8001734:	4603      	mov	r3, r0
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <RCC_GetPCLK1ClockFreq+0x24>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	40d3      	lsrs	r3, r2
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	08002434 	.word	0x08002434

08001750 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001758:	f7ff ff52 	bl	8001600 <LL_RCC_GetAPB2Prescaler>
 800175c:	4603      	mov	r3, r0
 800175e:	0adb      	lsrs	r3, r3, #11
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <RCC_GetPCLK2ClockFreq+0x24>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	40d3      	lsrs	r3, r2
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	08002434 	.word	0x08002434

08001778 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001786:	f7ff ff47 	bl	8001618 <LL_RCC_PLL_GetMainSource>
 800178a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d003      	beq.n	80017a2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800179a:	e00b      	b.n	80017b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800179e:	607b      	str	r3, [r7, #4]
      break;
 80017a0:	e00b      	b.n	80017ba <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80017a2:	f7ff ff51 	bl	8001648 <LL_RCC_PLL_GetPrediv>
 80017a6:	4603      	mov	r3, r0
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	607b      	str	r3, [r7, #4]
      break;
 80017b2:	e002      	b.n	80017ba <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80017b6:	607b      	str	r3, [r7, #4]
      break;
 80017b8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80017ba:	f7ff ff39 	bl	8001630 <LL_RCC_PLL_GetMultiplicator>
 80017be:	4603      	mov	r3, r0
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	3302      	adds	r3, #2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	003d0900 	.word	0x003d0900
 80017d8:	007a1200 	.word	0x007a1200

080017dc <LL_RTC_SetAsynchPrescaler>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 020f 	bic.w	r2, r3, #15
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b292      	uxth	r2, r2
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60da      	str	r2, [r3, #12]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <LL_RTC_SetOutputSource>:
  *         @arg @ref LL_RTC_CALIB_OUTPUT_ALARM
  *         @arg @ref LL_RTC_CALIB_OUTPUT_SECOND
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetOutputSource(BKP_TypeDef *BKPx, uint32_t OutputSource)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <LL_RTC_EnableWriteProtection>:
  * @rmtoll CRL          CNF           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 0210 	bic.w	r2, r3, #16
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <LL_RTC_DisableWriteProtection>:
  * @rmtoll CRL          RTC_CRL_CNF           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f043 0210 	orr.w	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_RTC_TIME_Set>:
  * @param  RTCx RTC Instance
  * @param  TimeCounter Value between Min_Data=0x00 and Max_Data=0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Set(RTC_TypeDef *RTCx, uint32_t TimeCounter)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Set RTC COUNTER MSB word */
  WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	0c1a      	lsrs	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	61da      	str	r2, [r3, #28]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RTC_TAMPER_Disable>:
  * @brief  Disable RTC_TAMPx Tamper
  * @rmtoll CR    TPE        LL_RTC_TAMPER_Disable\n
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TAMPER_Disable(BKP_TypeDef *BKPx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_RTC_TAMPER_Disable+0x20>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <LL_RTC_TAMPER_Disable+0x20>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40006c00 	.word	0x40006c00

080018bc <LL_RTC_ClearFlag_ALR>:
  * @rmtoll CRL          ALRF         LL_RTC_ClearFlag_ALR
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALR(RTC_TypeDef *RTCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 0202 	bic.w	r2, r3, #2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <LL_RTC_ClearFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 0208 	bic.w	r2, r3, #8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_RTC_ClearFlag_OW>:
  * @rmtoll CRL          OWF           LL_RTC_ClearFlag_OW
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_OW(RTC_TypeDef *RTCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 0204 	bic.w	r2, r3, #4
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	605a      	str	r2, [r3, #4]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <LL_RTC_ClearFlag_SEC>:
  * @rmtoll CRL          SECF           LL_RTC_ClearFlag_SEC
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_SEC(RTC_TypeDef *RTCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0201 	bic.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <LL_RTC_IsActiveFlag_RTOF>:
  * @rmtoll CRL          RTOFF         LL_RTC_IsActiveFlag_RTOF
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b20      	cmp	r3, #32
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	e000e010 	.word	0xe000e010

080019a0 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
  /* Waiting for synchro */
  if (LL_RTC_WaitForSynchro(RTCx) != ERROR)
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f906 	bl	8001bc0 <LL_RTC_WaitForSynchro>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d026      	beq.n	8001a08 <LL_RTC_Init+0x68>
  {
    /* Set Initialization mode */
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f8a2 	bl	8001b04 <LL_RTC_EnterInitMode>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d020      	beq.n	8001a08 <LL_RTC_Init+0x68>
    {
      /* Clear Flag Bits */
      LL_RTC_ClearFlag_ALR(RTCx);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff78 	bl	80018bc <LL_RTC_ClearFlag_ALR>
      LL_RTC_ClearFlag_OW(RTCx);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffa5 	bl	800191c <LL_RTC_ClearFlag_OW>
      LL_RTC_ClearFlag_SEC(RTCx);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb1 	bl	800193a <LL_RTC_ClearFlag_SEC>

      if (RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <LL_RTC_Init+0x46>
      {
        /* Disable the selected Tamper Pin */
        LL_RTC_TAMPER_Disable(BKP);
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LL_RTC_Init+0x74>)
 80019e2:	f7ff ff59 	bl	8001898 <LL_RTC_TAMPER_Disable>
      }
      /* Set the signal which will be routed to RTC Tamper Pin */
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4619      	mov	r1, r3
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <LL_RTC_Init+0x74>)
 80019ee:	f7ff ff11 	bl	8001814 <LL_RTC_SetOutputSource>

      /* Configure Synchronous and Asynchronous prescaler factor */
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff feef 	bl	80017dc <LL_RTC_SetAsynchPrescaler>

      /* Exit Initialization Mode */
      LL_RTC_ExitInitMode(RTCx);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8af 	bl	8001b62 <LL_RTC_ExitInitMode>

      status = SUCCESS;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40006c00 	.word	0x40006c00

08001a18 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
  uint32_t counter_time = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Enter Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f869 	bl	8001b04 <LL_RTC_EnterInitMode>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d05d      	beq.n	8001af4 <LL_RTC_TIME_Init+0xdc>
  {
    /* Check the input parameters format */
    if (RTC_Format == LL_RTC_FORMAT_BIN)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d117      	bne.n	8001a6e <LL_RTC_TIME_Init+0x56>
    {
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a48:	fb03 f202 	mul.w	r2, r3, r2
                                ((uint32_t)RTC_TimeStruct->Minutes * 60U) + \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	785b      	ldrb	r3, [r3, #1]
 8001a50:	4619      	mov	r1, r3
 8001a52:	460b      	mov	r3, r1
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	009b      	lsls	r3, r3, #2
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8001a5a:	4413      	add	r3, r2
                                ((uint32_t)RTC_TimeStruct->Seconds));
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	7892      	ldrb	r2, [r2, #2]
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8001a60:	4413      	add	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
      LL_RTC_TIME_Set(RTCx, counter_time);
 8001a64:	6939      	ldr	r1, [r7, #16]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff ff04 	bl	8001874 <LL_RTC_TIME_Set>
 8001a6c:	e040      	b.n	8001af0 <LL_RTC_TIME_Init+0xd8>
    }
    else
    {
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a94:	fb03 f202 	mul.w	r2, r3, r2
                      ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)) * 60U) + \
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	785b      	ldrb	r3, [r3, #1]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	0089      	lsls	r1, r1, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	b2d9      	uxtb	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	460b      	mov	r3, r1
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	009b      	lsls	r3, r3, #2
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8001ac2:	4413      	add	r3, r2
                      ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds))));
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	7892      	ldrb	r2, [r2, #2]
 8001ac8:	0912      	lsrs	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	0089      	lsls	r1, r1, #2
 8001ad0:	440a      	add	r2, r1
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	b2d1      	uxtb	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	7892      	ldrb	r2, [r2, #2]
 8001ada:	f002 020f 	and.w	r2, r2, #15
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440a      	add	r2, r1
 8001ae2:	b2d2      	uxtb	r2, r2
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8001ae4:	4413      	add	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      LL_RTC_TIME_Set(RTCx, counter_time);
 8001ae8:	6939      	ldr	r1, [r7, #16]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fec2 	bl	8001874 <LL_RTC_TIME_Set>
    }
    status = SUCCESS;
 8001af0:	2300      	movs	r3, #0
 8001af2:	75fb      	strb	r3, [r7, #23]
  }
  /* Exit Initialization mode */
  LL_RTC_ExitInitMode(RTCx);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f834 	bl	8001b62 <LL_RTC_ExitInitMode>

  return status;
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b10:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff1c 	bl	8001958 <LL_RTC_IsActiveFlag_RTOF>
 8001b20:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8001b22:	e010      	b.n	8001b46 <LL_RTC_EnterInitMode+0x42>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001b24:	f7ff ff2a 	bl	800197c <LL_SYSTICK_IsActiveCounterFlag>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <LL_RTC_EnterInitMode+0x30>
    {
      timeout --;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff0f 	bl	8001958 <LL_RTC_IsActiveFlag_RTOF>
 8001b3a:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <LL_RTC_EnterInitMode+0x42>
    {
      status = ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <LL_RTC_EnterInitMode+0x4e>
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d1e8      	bne.n	8001b24 <LL_RTC_EnterInitMode+0x20>
    }
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fe7f 	bl	8001856 <LL_RTC_DisableWriteProtection>

  return status;
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001b70:	2300      	movs	r3, #0
 8001b72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fe5d 	bl	8001838 <LL_RTC_EnableWriteProtection>

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff feea 	bl	8001958 <LL_RTC_IsActiveFlag_RTOF>
 8001b84:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8001b86:	e010      	b.n	8001baa <LL_RTC_ExitInitMode+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001b88:	f7ff fef8 	bl	800197c <LL_SYSTICK_IsActiveCounterFlag>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <LL_RTC_ExitInitMode+0x36>
    {
      timeout --;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fedd 	bl	8001958 <LL_RTC_IsActiveFlag_RTOF>
 8001b9e:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <LL_RTC_ExitInitMode+0x48>
    {
      status = ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <LL_RTC_ExitInitMode+0x54>
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d1e8      	bne.n	8001b88 <LL_RTC_ExitInitMode+0x26>
    }
  }
  return status;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fe91 	bl	80018fe <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fe7c 	bl	80018da <LL_RTC_IsActiveFlag_RS>
 8001be2:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8001be4:	e010      	b.n	8001c08 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001be6:	f7ff fec9 	bl	800197c <LL_SYSTICK_IsActiveCounterFlag>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d102      	bne.n	8001bf6 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fe6f 	bl	80018da <LL_RTC_IsActiveFlag_RS>
 8001bfc:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <LL_RTC_WaitForSynchro+0x54>
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  return (status);
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <LL_TIM_SetPrescaler>:
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <LL_TIM_SetAutoReload>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <LL_TIM_SetRepetitionCounter>:
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <LL_TIM_OC_SetCompareCH1>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <LL_TIM_OC_SetCompareCH2>:
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <LL_TIM_OC_SetCompareCH3>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <LL_TIM_OC_SetCompareCH4>:
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	615a      	str	r2, [r3, #20]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <LL_TIM_Init+0xb0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00b      	beq.n	8001d24 <LL_TIM_Init+0x30>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d12:	d007      	beq.n	8001d24 <LL_TIM_Init+0x30>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <LL_TIM_Init+0xb4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <LL_TIM_Init+0x30>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a23      	ldr	r2, [pc, #140]	; (8001dac <LL_TIM_Init+0xb8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d106      	bne.n	8001d32 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <LL_TIM_Init+0xb0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00b      	beq.n	8001d52 <LL_TIM_Init+0x5e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d007      	beq.n	8001d52 <LL_TIM_Init+0x5e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <LL_TIM_Init+0xb4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d003      	beq.n	8001d52 <LL_TIM_Init+0x5e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <LL_TIM_Init+0xb8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d106      	bne.n	8001d60 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff63 	bl	8001c38 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff50 	bl	8001c1e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <LL_TIM_Init+0xb0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d105      	bne.n	8001d92 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff60 	bl	8001c52 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff9e 	bl	8001cd4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800

08001db0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc6:	d027      	beq.n	8001e18 <LL_TIM_OC_Init+0x68>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dce:	d82a      	bhi.n	8001e26 <LL_TIM_OC_Init+0x76>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d018      	beq.n	8001e0a <LL_TIM_OC_Init+0x5a>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dde:	d822      	bhi.n	8001e26 <LL_TIM_OC_Init+0x76>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d003      	beq.n	8001dee <LL_TIM_OC_Init+0x3e>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d007      	beq.n	8001dfc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001dec:	e01b      	b.n	8001e26 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f81f 	bl	8001e34 <OC1Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
      break;
 8001dfa:	e015      	b.n	8001e28 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f87e 	bl	8001f00 <OC2Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	75fb      	strb	r3, [r7, #23]
      break;
 8001e08:	e00e      	b.n	8001e28 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f8e1 	bl	8001fd4 <OC3Config>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]
      break;
 8001e16:	e007      	b.n	8001e28 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f944 	bl	80020a8 <OC4Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	75fb      	strb	r3, [r7, #23]
      break;
 8001e24:	e000      	b.n	8001e28 <LL_TIM_OC_Init+0x78>
      break;
 8001e26:	bf00      	nop
  }

  return result;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f023 0201 	bic.w	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f023 0202 	bic.w	r2, r3, #2
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f023 0201 	bic.w	r2, r3, #1
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <OC1Config+0xc8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d11e      	bne.n	8001ed4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f023 0208 	bic.w	r2, r3, #8
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f023 0204 	bic.w	r2, r3, #4
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fec0 	bl	8001c6c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40012c00 	.word	0x40012c00

08001f00 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f023 0210 	bic.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f023 0220 	bic.w	r2, r3, #32
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f023 0210 	bic.w	r2, r3, #16
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <OC2Config+0xd0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d11f      	bne.n	8001fa8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fe63 	bl	8001c86 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <OC3Config+0xd0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11f      	bne.n	800207a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	015b      	lsls	r3, r3, #5
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fe07 	bl	8001ca0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40012c00 	.word	0x40012c00

080020a8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	031b      	lsls	r3, r3, #12
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	031b      	lsls	r3, r3, #12
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <OC4Config+0xa0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d107      	bne.n	8002120 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	019b      	lsls	r3, r3, #6
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fdc1 	bl	8001cba <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00

0800214c <LL_USART_IsEnabled>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <LL_USART_SetStopBitsLength>:
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <LL_USART_SetHWFlowCtrl>:
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	615a      	str	r2, [r3, #20]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <LL_USART_SetBaudRate>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009a      	lsls	r2, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	4a25      	ldr	r2, [pc, #148]	; (8002274 <LL_USART_SetBaudRate+0xb8>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	b299      	uxth	r1, r3
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	009a      	lsls	r2, r3, #2
 80021f4:	441a      	add	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <LL_USART_SetBaudRate+0xb8>)
 8002200:	fba3 0302 	umull	r0, r3, r3, r2
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	2064      	movs	r0, #100	; 0x64
 8002208:	fb00 f303 	mul.w	r3, r0, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	3332      	adds	r3, #50	; 0x32
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <LL_USART_SetBaudRate+0xb8>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	b29b      	uxth	r3, r3
 800221c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002220:	b29b      	uxth	r3, r3
 8002222:	440b      	add	r3, r1
 8002224:	b299      	uxth	r1, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fbb2 f2f3 	udiv	r2, r2, r3
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <LL_USART_SetBaudRate+0xb8>)
 800223c:	fba3 0302 	umull	r0, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2064      	movs	r0, #100	; 0x64
 8002244:	fb00 f303 	mul.w	r3, r0, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <LL_USART_SetBaudRate+0xb8>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b29b      	uxth	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	b29b      	uxth	r3, r3
 800225e:	440b      	add	r3, r1
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	51eb851f 	.word	0x51eb851f

08002278 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff5e 	bl	800214c <LL_USART_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d145      	bne.n	8002322 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800229e:	f023 030c 	bic.w	r3, r3, #12
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6851      	ldr	r1, [r2, #4]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	68d2      	ldr	r2, [r2, #12]
 80022aa:	4311      	orrs	r1, r2
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	6912      	ldr	r2, [r2, #16]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff57 	bl	8002172 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff63 	bl	8002196 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f9c5 	bl	8001664 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <LL_USART_Init+0xb4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d102      	bne.n	80022e8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	e00c      	b.n	8002302 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <LL_USART_Init+0xb8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d102      	bne.n	80022f6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e005      	b.n	8002302 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <LL_USART_Init+0xbc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002310:	2300      	movs	r3, #0
 8002312:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff4d 	bl	80021bc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002322:	7ffb      	ldrb	r3, [r7, #31]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40013800 	.word	0x40013800
 8002330:	40004400 	.word	0x40004400
 8002334:	40004800 	.word	0x40004800

08002338 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <LL_InitTick+0x30>)
 800234c:	3b01      	subs	r3, #1
 800234e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <LL_InitTick+0x30>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <LL_InitTick+0x30>)
 8002358:	2205      	movs	r2, #5
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002374:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ffdd 	bl	8002338 <LL_InitTick>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <LL_SetSystemCoreClock+0x18>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000000 	.word	0x20000000

080023a4 <__libc_init_array>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	2600      	movs	r6, #0
 80023a8:	4d0c      	ldr	r5, [pc, #48]	; (80023dc <__libc_init_array+0x38>)
 80023aa:	4c0d      	ldr	r4, [pc, #52]	; (80023e0 <__libc_init_array+0x3c>)
 80023ac:	1b64      	subs	r4, r4, r5
 80023ae:	10a4      	asrs	r4, r4, #2
 80023b0:	42a6      	cmp	r6, r4
 80023b2:	d109      	bne.n	80023c8 <__libc_init_array+0x24>
 80023b4:	f000 f822 	bl	80023fc <_init>
 80023b8:	2600      	movs	r6, #0
 80023ba:	4d0a      	ldr	r5, [pc, #40]	; (80023e4 <__libc_init_array+0x40>)
 80023bc:	4c0a      	ldr	r4, [pc, #40]	; (80023e8 <__libc_init_array+0x44>)
 80023be:	1b64      	subs	r4, r4, r5
 80023c0:	10a4      	asrs	r4, r4, #2
 80023c2:	42a6      	cmp	r6, r4
 80023c4:	d105      	bne.n	80023d2 <__libc_init_array+0x2e>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023cc:	4798      	blx	r3
 80023ce:	3601      	adds	r6, #1
 80023d0:	e7ee      	b.n	80023b0 <__libc_init_array+0xc>
 80023d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d6:	4798      	blx	r3
 80023d8:	3601      	adds	r6, #1
 80023da:	e7f2      	b.n	80023c2 <__libc_init_array+0x1e>
 80023dc:	0800243c 	.word	0x0800243c
 80023e0:	0800243c 	.word	0x0800243c
 80023e4:	0800243c 	.word	0x0800243c
 80023e8:	08002440 	.word	0x08002440

080023ec <memset>:
 80023ec:	4603      	mov	r3, r0
 80023ee:	4402      	add	r2, r0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d100      	bne.n	80023f6 <memset+0xa>
 80023f4:	4770      	bx	lr
 80023f6:	f803 1b01 	strb.w	r1, [r3], #1
 80023fa:	e7f9      	b.n	80023f0 <memset+0x4>

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr
