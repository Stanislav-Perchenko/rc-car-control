
rc-car-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e4  080047e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080047e4  080047e4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047e4  080047e4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080047ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000090  0800487c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800487c  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_line   00009336  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00008882  00000000  00000000  000293ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218d  00000000  00000000  00031c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  00033e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007f97b  00000000  00000000  00034820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008f8  00000000  00000000  000b41a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017dda  00000000  00000000  000b4a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  000cc8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004654 	.word	0x08004654

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004654 	.word	0x08004654

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f002 ff23 	bl	8002fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f003 fe07 	bl	8003d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 fff1 	bl	8001160 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000188:	080047ec 	.word	0x080047ec
  ldr r2, =_sbss
 800018c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000190:	20000400 	.word	0x20000400

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(uint16_t *all_virt_addr_table, uint16_t all_virt_addr_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]
	VirtAddVarTab = all_virt_addr_table;
 80001a4:	4a9f      	ldr	r2, [pc, #636]	; (8000424 <EE_Init+0x28c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6013      	str	r3, [r2, #0]
	EepromTotalDataSize = all_virt_addr_size;
 80001aa:	4a9f      	ldr	r2, [pc, #636]	; (8000428 <EE_Init+0x290>)
 80001ac:	887b      	ldrh	r3, [r7, #2]
 80001ae:	8013      	strh	r3, [r2, #0]

  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80001b0:	2306      	movs	r3, #6
 80001b2:	827b      	strh	r3, [r7, #18]
 80001b4:	2306      	movs	r3, #6
 80001b6:	823b      	strh	r3, [r7, #16]
  uint16_t VarIdx = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	81fb      	strh	r3, [r7, #14]
 80001c0:	2300      	movs	r3, #0
 80001c2:	81bb      	strh	r3, [r7, #12]
  int16_t x = -1;
 80001c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c8:	82bb      	strh	r3, [r7, #20]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80001ca:	4b98      	ldr	r3, [pc, #608]	; (800042c <EE_Init+0x294>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	827b      	strh	r3, [r7, #18]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80001d0:	4b97      	ldr	r3, [pc, #604]	; (8000430 <EE_Init+0x298>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	823b      	strh	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80001d6:	8a7b      	ldrh	r3, [r7, #18]
 80001d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001dc:	4293      	cmp	r3, r2
 80001de:	d00b      	beq.n	80001f8 <EE_Init+0x60>
 80001e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80001e4:	f280 8136 	bge.w	8000454 <EE_Init+0x2bc>
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	f000 80b5 	beq.w	8000358 <EE_Init+0x1c0>
 80001ee:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d033      	beq.n	800025e <EE_Init+0xc6>
 80001f6:	e12d      	b.n	8000454 <EE_Init+0x2bc>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d10a      	bne.n	8000214 <EE_Init+0x7c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80001fe:	488b      	ldr	r0, [pc, #556]	; (800042c <EE_Init+0x294>)
 8000200:	f002 fef4 	bl	8002fec <FLASH_ErasePage>
 8000204:	4603      	mov	r3, r0
 8000206:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000208:	897b      	ldrh	r3, [r7, #10]
 800020a:	2b04      	cmp	r3, #4
 800020c:	f000 812b 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000210:	897b      	ldrh	r3, [r7, #10]
 8000212:	e130      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000214:	8a3b      	ldrh	r3, [r7, #16]
 8000216:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800021a:	4293      	cmp	r3, r2
 800021c:	d115      	bne.n	800024a <EE_Init+0xb2>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800021e:	4883      	ldr	r0, [pc, #524]	; (800042c <EE_Init+0x294>)
 8000220:	f002 fee4 	bl	8002fec <FLASH_ErasePage>
 8000224:	4603      	mov	r3, r0
 8000226:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000228:	897b      	ldrh	r3, [r7, #10]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d001      	beq.n	8000232 <EE_Init+0x9a>
        {
          return FlashStatus;
 800022e:	897b      	ldrh	r3, [r7, #10]
 8000230:	e121      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000232:	2100      	movs	r1, #0
 8000234:	487e      	ldr	r0, [pc, #504]	; (8000430 <EE_Init+0x298>)
 8000236:	f002 ff0b 	bl	8003050 <FLASH_ProgramHalfWord>
 800023a:	4603      	mov	r3, r0
 800023c:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800023e:	897b      	ldrh	r3, [r7, #10]
 8000240:	2b04      	cmp	r3, #4
 8000242:	f000 8110 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000246:	897b      	ldrh	r3, [r7, #10]
 8000248:	e115      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800024a:	f000 f9bb 	bl	80005c4 <EE_Format>
 800024e:	4603      	mov	r3, r0
 8000250:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000252:	897b      	ldrh	r3, [r7, #10]
 8000254:	2b04      	cmp	r3, #4
 8000256:	f000 8106 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 800025a:	897b      	ldrh	r3, [r7, #10]
 800025c:	e10b      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800025e:	8a3b      	ldrh	r3, [r7, #16]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d154      	bne.n	800030e <EE_Init+0x176>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000264:	2300      	movs	r3, #0
 8000266:	82fb      	strh	r3, [r7, #22]
 8000268:	e036      	b.n	80002d8 <EE_Init+0x140>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800026a:	4b72      	ldr	r3, [pc, #456]	; (8000434 <EE_Init+0x29c>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	b29a      	uxth	r2, r3
 8000270:	4b6c      	ldr	r3, [pc, #432]	; (8000424 <EE_Init+0x28c>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	8afb      	ldrh	r3, [r7, #22]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	440b      	add	r3, r1
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d101      	bne.n	8000284 <EE_Init+0xec>
          {
            x = VarIdx;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 8000284:	8afa      	ldrh	r2, [r7, #22]
 8000286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800028a:	429a      	cmp	r2, r3
 800028c:	d021      	beq.n	80002d2 <EE_Init+0x13a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800028e:	4b65      	ldr	r3, [pc, #404]	; (8000424 <EE_Init+0x28c>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	8afb      	ldrh	r3, [r7, #22]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4413      	add	r3, r2
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	4967      	ldr	r1, [pc, #412]	; (8000438 <EE_Init+0x2a0>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f8f1 	bl	8000484 <EE_ReadVariable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d012      	beq.n	80002d2 <EE_Init+0x13a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80002ac:	4b5d      	ldr	r3, [pc, #372]	; (8000424 <EE_Init+0x28c>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	8afb      	ldrh	r3, [r7, #22]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	4a5f      	ldr	r2, [pc, #380]	; (8000438 <EE_Init+0x2a0>)
 80002ba:	8812      	ldrh	r2, [r2, #0]
 80002bc:	4611      	mov	r1, r2
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f9ec 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80002c4:	4603      	mov	r3, r0
 80002c6:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d001      	beq.n	80002d2 <EE_Init+0x13a>
              {
                return EepromStatus;
 80002ce:	89fb      	ldrh	r3, [r7, #14]
 80002d0:	e0d1      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3301      	adds	r3, #1
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	4b53      	ldr	r3, [pc, #332]	; (8000428 <EE_Init+0x290>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	8afa      	ldrh	r2, [r7, #22]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3c3      	bcc.n	800026a <EE_Init+0xd2>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	4851      	ldr	r0, [pc, #324]	; (800042c <EE_Init+0x294>)
 80002e6:	f002 feb3 	bl	8003050 <FLASH_ProgramHalfWord>
 80002ea:	4603      	mov	r3, r0
 80002ec:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80002ee:	897b      	ldrh	r3, [r7, #10]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d001      	beq.n	80002f8 <EE_Init+0x160>
        {
          return FlashStatus;
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	e0be      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80002f8:	484d      	ldr	r0, [pc, #308]	; (8000430 <EE_Init+0x298>)
 80002fa:	f002 fe77 	bl	8002fec <FLASH_ErasePage>
 80002fe:	4603      	mov	r3, r0
 8000300:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000302:	897b      	ldrh	r3, [r7, #10]
 8000304:	2b04      	cmp	r3, #4
 8000306:	f000 80b0 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 800030a:	897b      	ldrh	r3, [r7, #10]
 800030c:	e0b3      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800030e:	8a3b      	ldrh	r3, [r7, #16]
 8000310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000314:	4293      	cmp	r3, r2
 8000316:	d115      	bne.n	8000344 <EE_Init+0x1ac>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000318:	4845      	ldr	r0, [pc, #276]	; (8000430 <EE_Init+0x298>)
 800031a:	f002 fe67 	bl	8002fec <FLASH_ErasePage>
 800031e:	4603      	mov	r3, r0
 8000320:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000322:	897b      	ldrh	r3, [r7, #10]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d001      	beq.n	800032c <EE_Init+0x194>
        {
          return FlashStatus;
 8000328:	897b      	ldrh	r3, [r7, #10]
 800032a:	e0a4      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800032c:	2100      	movs	r1, #0
 800032e:	483f      	ldr	r0, [pc, #252]	; (800042c <EE_Init+0x294>)
 8000330:	f002 fe8e 	bl	8003050 <FLASH_ProgramHalfWord>
 8000334:	4603      	mov	r3, r0
 8000336:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000338:	897b      	ldrh	r3, [r7, #10]
 800033a:	2b04      	cmp	r3, #4
 800033c:	f000 8095 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000340:	897b      	ldrh	r3, [r7, #10]
 8000342:	e098      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000344:	f000 f93e 	bl	80005c4 <EE_Format>
 8000348:	4603      	mov	r3, r0
 800034a:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800034c:	897b      	ldrh	r3, [r7, #10]
 800034e:	2b04      	cmp	r3, #4
 8000350:	f000 808b 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000354:	897b      	ldrh	r3, [r7, #10]
 8000356:	e08e      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000358:	8a3b      	ldrh	r3, [r7, #16]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d109      	bne.n	8000372 <EE_Init+0x1da>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800035e:	f000 f931 	bl	80005c4 <EE_Format>
 8000362:	4603      	mov	r3, r0
 8000364:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	2b04      	cmp	r3, #4
 800036a:	f000 8080 	beq.w	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800036e:	897b      	ldrh	r3, [r7, #10]
 8000370:	e081      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000372:	8a3b      	ldrh	r3, [r7, #16]
 8000374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000378:	4293      	cmp	r3, r2
 800037a:	d109      	bne.n	8000390 <EE_Init+0x1f8>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800037c:	482c      	ldr	r0, [pc, #176]	; (8000430 <EE_Init+0x298>)
 800037e:	f002 fe35 	bl	8002fec <FLASH_ErasePage>
 8000382:	4603      	mov	r3, r0
 8000384:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000386:	897b      	ldrh	r3, [r7, #10]
 8000388:	2b04      	cmp	r3, #4
 800038a:	d070      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800038c:	897b      	ldrh	r3, [r7, #10]
 800038e:	e072      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000390:	2300      	movs	r3, #0
 8000392:	82fb      	strh	r3, [r7, #22]
 8000394:	e036      	b.n	8000404 <EE_Init+0x26c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <EE_Init+0x2a4>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <EE_Init+0x28c>)
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	8afb      	ldrh	r3, [r7, #22]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	440b      	add	r3, r1
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d101      	bne.n	80003b0 <EE_Init+0x218>
          {
            x = VarIdx;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 80003b0:	8afa      	ldrh	r2, [r7, #22]
 80003b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d021      	beq.n	80003fe <EE_Init+0x266>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <EE_Init+0x28c>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	8afb      	ldrh	r3, [r7, #22]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	491c      	ldr	r1, [pc, #112]	; (8000438 <EE_Init+0x2a0>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f85b 	bl	8000484 <EE_ReadVariable>
 80003ce:	4603      	mov	r3, r0
 80003d0:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80003d2:	89bb      	ldrh	r3, [r7, #12]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d012      	beq.n	80003fe <EE_Init+0x266>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <EE_Init+0x28c>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <EE_Init+0x2a0>)
 80003e6:	8812      	ldrh	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f956 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80003f0:	4603      	mov	r3, r0
 80003f2:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d001      	beq.n	80003fe <EE_Init+0x266>
              {
                return EepromStatus;
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	e03b      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EE_Init+0x290>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	8afa      	ldrh	r2, [r7, #22]
 800040a:	429a      	cmp	r2, r3
 800040c:	d3c3      	bcc.n	8000396 <EE_Init+0x1fe>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800040e:	2100      	movs	r1, #0
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <EE_Init+0x298>)
 8000412:	f002 fe1d 	bl	8003050 <FLASH_ProgramHalfWord>
 8000416:	4603      	mov	r3, r0
 8000418:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800041a:	897b      	ldrh	r3, [r7, #10]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d00f      	beq.n	8000440 <EE_Init+0x2a8>
        {
          return FlashStatus;
 8000420:	897b      	ldrh	r3, [r7, #10]
 8000422:	e028      	b.n	8000476 <EE_Init+0x2de>
 8000424:	200000ac 	.word	0x200000ac
 8000428:	200000b0 	.word	0x200000b0
 800042c:	0800f800 	.word	0x0800f800
 8000430:	0800fc00 	.word	0x0800fc00
 8000434:	0800f806 	.word	0x0800f806
 8000438:	200000b2 	.word	0x200000b2
 800043c:	0800fc06 	.word	0x0800fc06
        }
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <EE_Init+0x2e8>)
 8000442:	f002 fdd3 	bl	8002fec <FLASH_ErasePage>
 8000446:	4603      	mov	r3, r0
 8000448:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800044a:	897b      	ldrh	r3, [r7, #10]
 800044c:	2b04      	cmp	r3, #4
 800044e:	d00e      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 8000450:	897b      	ldrh	r3, [r7, #10]
 8000452:	e010      	b.n	8000476 <EE_Init+0x2de>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8000454:	f000 f8b6 	bl	80005c4 <EE_Format>
 8000458:	4603      	mov	r3, r0
 800045a:	817b      	strh	r3, [r7, #10]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d007      	beq.n	8000472 <EE_Init+0x2da>
      {
        return FlashStatus;
 8000462:	897b      	ldrh	r3, [r7, #10]
 8000464:	e007      	b.n	8000476 <EE_Init+0x2de>
      break;
 8000466:	bf00      	nop
 8000468:	e004      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046a:	bf00      	nop
 800046c:	e002      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046e:	bf00      	nop
 8000470:	e000      	b.n	8000474 <EE_Init+0x2dc>
      }
      break;
 8000472:	bf00      	nop
  }

  return FLASH_COMPLETE;
 8000474:	2304      	movs	r3, #4
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	0800f800 	.word	0x0800f800

08000484 <EE_ReadVariable>:
  *           - EE_VAR_FOUND: if variable was found
  *           - EE_VAR_NOT_FOUND: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage;
  uint16_t AddressValue;
  uint16_t ReadStatus = EE_VAR_NOT_FOUND;
 8000490:	2301      	movs	r3, #1
 8000492:	83fb      	strh	r3, [r7, #30]
  uint32_t Address;
  uint32_t PageStartAddress;
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <EE_ReadVariable+0xb0>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <EE_ReadVariable+0x20>
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <EE_ReadVariable+0xb4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10c      	bne.n	80004be <EE_ReadVariable+0x3a>
	  return EE_NOT_INITIALIZED;
 80004a4:	23aa      	movs	r3, #170	; 0xaa
 80004a6:	e041      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	dc02      	bgt.n	80004b4 <EE_ReadVariable+0x30>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	da02      	bge.n	80004b8 <EE_ReadVariable+0x34>
 80004b2:	e004      	b.n	80004be <EE_ReadVariable+0x3a>
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d102      	bne.n	80004be <EE_ReadVariable+0x3a>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
	  case FLASH_TIMEOUT:
		  return f_stat;
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	e036      	b.n	800052c <EE_ReadVariable+0xa8>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 80004be:	f002 fdf5 	bl	80030ac <FLASH_GetStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	75fb      	strb	r3, [r7, #23]
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d1ed      	bne.n	80004a8 <EE_ReadVariable+0x24>
	  }
  }


  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 f8a1 	bl	8000614 <EE_FindValidPage>
 80004d2:	4603      	mov	r3, r0
 80004d4:	82bb      	strh	r3, [r7, #20]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80004d6:	8abb      	ldrh	r3, [r7, #20]
 80004d8:	2bab      	cmp	r3, #171	; 0xab
 80004da:	d101      	bne.n	80004e0 <EE_ReadVariable+0x5c>
  {
    return  NO_VALID_PAGE;
 80004dc:	23ab      	movs	r3, #171	; 0xab
 80004de:	e025      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80004e0:	8abb      	ldrh	r3, [r7, #20]
 80004e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80004e6:	333e      	adds	r3, #62	; 0x3e
 80004e8:	029b      	lsls	r3, r3, #10
 80004ea:	613b      	str	r3, [r7, #16]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80004ec:	8abb      	ldrh	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	029a      	lsls	r2, r3, #10
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <EE_ReadVariable+0xb8>)
 80004f4:	4413      	add	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80004f8:	e012      	b.n	8000520 <EE_ReadVariable+0x9c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000500:	89fa      	ldrh	r2, [r7, #14]
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	429a      	cmp	r2, r3
 8000506:	d108      	bne.n	800051a <EE_ReadVariable+0x96>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3b02      	subs	r3, #2
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b29a      	uxth	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = EE_VAR_FOUND;
 8000514:	2300      	movs	r3, #0
 8000516:	83fb      	strh	r3, [r7, #30]

      break;
 8000518:	e007      	b.n	800052a <EE_ReadVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	3b04      	subs	r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
  while (Address > (PageStartAddress + 2))
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	3302      	adds	r3, #2
 8000524:	69ba      	ldr	r2, [r7, #24]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8e7      	bhi.n	80004fa <EE_ReadVariable+0x76>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800052a:	8bfb      	ldrh	r3, [r7, #30]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000b0 	.word	0x200000b0
 8000538:	200000ac 	.word	0x200000ac
 800053c:	0800f7fe 	.word	0x0800f7fe

08000540 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	4613      	mov	r3, r2
 800054e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	81fb      	strh	r3, [r7, #14]
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <EE_WriteVariable+0x7c>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d003      	beq.n	8000564 <EE_WriteVariable+0x24>
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <EE_WriteVariable+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10c      	bne.n	800057e <EE_WriteVariable+0x3e>
	  return EE_NOT_INITIALIZED;
 8000564:	23aa      	movs	r3, #170	; 0xaa
 8000566:	e025      	b.n	80005b4 <EE_WriteVariable+0x74>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	2b03      	cmp	r3, #3
 800056c:	dc02      	bgt.n	8000574 <EE_WriteVariable+0x34>
 800056e:	2b02      	cmp	r3, #2
 8000570:	da02      	bge.n	8000578 <EE_WriteVariable+0x38>
 8000572:	e004      	b.n	800057e <EE_WriteVariable+0x3e>
 8000574:	2b05      	cmp	r3, #5
 8000576:	d102      	bne.n	800057e <EE_WriteVariable+0x3e>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
  	  case FLASH_TIMEOUT:
  		  return f_stat;
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	b29b      	uxth	r3, r3
 800057c:	e01a      	b.n	80005b4 <EE_WriteVariable+0x74>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 800057e:	f002 fd95 	bl	80030ac <FLASH_GetStatus>
 8000582:	4603      	mov	r3, r0
 8000584:	737b      	strb	r3, [r7, #13]
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d1ed      	bne.n	8000568 <EE_WriteVariable+0x28>
	  }
  }

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800058c:	88ba      	ldrh	r2, [r7, #4]
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f882 	bl	800069c <EE_VerifyPageFullWriteVariable>
 8000598:	4603      	mov	r3, r0
 800059a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	2b80      	cmp	r3, #128	; 0x80
 80005a0:	d107      	bne.n	80005b2 <EE_WriteVariable+0x72>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80005a2:	88ba      	ldrh	r2, [r7, #4]
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f8cf 	bl	800074c <EE_PageTransfer>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80005b2:	89fb      	ldrh	r3, [r7, #14]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000b0 	.word	0x200000b0
 80005c0:	200000ac 	.word	0x200000ac

080005c4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <EE_Format+0x48>)
 80005d0:	f002 fd0c 	bl	8002fec <FLASH_ErasePage>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d001      	beq.n	80005e2 <EE_Format+0x1e>
  {
    return FlashStatus;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	e010      	b.n	8000604 <EE_Format+0x40>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <EE_Format+0x48>)
 80005e6:	f002 fd33 	bl	8003050 <FLASH_ProgramHalfWord>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d001      	beq.n	80005f8 <EE_Format+0x34>
  {
    return FlashStatus;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	e005      	b.n	8000604 <EE_Format+0x40>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <EE_Format+0x4c>)
 80005fa:	f002 fcf7 	bl	8002fec <FLASH_ErasePage>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

  /* Return Page1 erase operation status */
  return FlashStatus;
 8000602:	79fb      	ldrb	r3, [r7, #7]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	0800f800 	.word	0x0800f800
 8000610:	0800fc00 	.word	0x0800fc00

08000614 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800061e:	2306      	movs	r3, #6
 8000620:	81fb      	strh	r3, [r7, #14]
 8000622:	2306      	movs	r3, #6
 8000624:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = *(__IO uint16_t*)PAGE0_BASE_ADDRESS;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <EE_FindValidPage+0x80>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <EE_FindValidPage+0x84>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d01b      	beq.n	8000670 <EE_FindValidPage+0x5c>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d125      	bne.n	8000688 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d108      	bne.n	8000654 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000648:	4293      	cmp	r3, r2
 800064a:	d101      	bne.n	8000650 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800064c:	2300      	movs	r3, #0
 800064e:	e01c      	b.n	800068a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000650:	2301      	movs	r3, #1
 8000652:	e01a      	b.n	800068a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000654:	89fb      	ldrh	r3, [r7, #14]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d108      	bne.n	800066c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800065a:	89bb      	ldrh	r3, [r7, #12]
 800065c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000660:	4293      	cmp	r3, r2
 8000662:	d101      	bne.n	8000668 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000664:	2301      	movs	r3, #1
 8000666:	e010      	b.n	800068a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000668:	2300      	movs	r3, #0
 800066a:	e00e      	b.n	800068a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800066c:	23ab      	movs	r3, #171	; 0xab
 800066e:	e00c      	b.n	800068a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000676:	2300      	movs	r3, #0
 8000678:	e007      	b.n	800068a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000680:	2301      	movs	r3, #1
 8000682:	e002      	b.n	800068a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000684:	23ab      	movs	r3, #171	; 0xab
 8000686:	e000      	b.n	800068a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000688:	2300      	movs	r3, #0
  }
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	0800f800 	.word	0x0800f800
 8000698:	0800fc00 	.word	0x0800fc00

0800069c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80006ac:	2304      	movs	r3, #4
 80006ae:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	823b      	strh	r3, [r7, #16]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <EE_VerifyPageFullWriteVariable+0xa4>)
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <EE_VerifyPageFullWriteVariable+0xa8>)
 80006ba:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffa9 	bl	8000614 <EE_FindValidPage>
 80006c2:	4603      	mov	r3, r0
 80006c4:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80006c6:	8a3b      	ldrh	r3, [r7, #16]
 80006c8:	2bab      	cmp	r3, #171	; 0xab
 80006ca:	d101      	bne.n	80006d0 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80006cc:	23ab      	movs	r3, #171	; 0xab
 80006ce:	e032      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80006d0:	8a3b      	ldrh	r3, [r7, #16]
 80006d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006d6:	333e      	adds	r3, #62	; 0x3e
 80006d8:	029b      	lsls	r3, r3, #10
 80006da:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80006dc:	8a3b      	ldrh	r3, [r7, #16]
 80006de:	3301      	adds	r3, #1
 80006e0:	029a      	lsls	r2, r3, #10
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <EE_VerifyPageFullWriteVariable+0xac>)
 80006e4:	4413      	add	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80006e8:	e020      	b.n	800072c <EE_VerifyPageFullWriteVariable+0x90>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f2:	d118      	bne.n	8000726 <EE_VerifyPageFullWriteVariable+0x8a>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	4619      	mov	r1, r3
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f002 fca9 	bl	8003050 <FLASH_ProgramHalfWord>
 80006fe:	4603      	mov	r3, r0
 8000700:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d002      	beq.n	800070e <EE_VerifyPageFullWriteVariable+0x72>
      {
        return FlashStatus;
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	b29b      	uxth	r3, r3
 800070c:	e013      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3302      	adds	r3, #2
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fc9a 	bl	8003050 <FLASH_ProgramHalfWord>
 800071c:	4603      	mov	r3, r0
 800071e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	b29b      	uxth	r3, r3
 8000724:	e007      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3da      	bcc.n	80006ea <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000734:	2380      	movs	r3, #128	; 0x80
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	08010000 	.word	0x08010000
 8000744:	080107ff 	.word	0x080107ff
 8000748:	0800f7fe 	.word	0x0800f7fe

0800074c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	80fb      	strh	r3, [r7, #6]
 8000758:	4613      	mov	r3, r2
 800075a:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 800075c:	2304      	movs	r3, #4
 800075e:	757b      	strb	r3, [r7, #21]
  uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
 8000760:	4b47      	ldr	r3, [pc, #284]	; (8000880 <EE_PageTransfer+0x134>)
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <EE_PageTransfer+0x138>)
 8000766:	61bb      	str	r3, [r7, #24]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	827b      	strh	r3, [r7, #18]
 800076c:	2300      	movs	r3, #0
 800076e:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	823b      	strh	r3, [r7, #16]
 8000774:	2300      	movs	r3, #0
 8000776:	81fb      	strh	r3, [r7, #14]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff4b 	bl	8000614 <EE_FindValidPage>
 800077e:	4603      	mov	r3, r0
 8000780:	827b      	strh	r3, [r7, #18]

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000782:	8a7b      	ldrh	r3, [r7, #18]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d104      	bne.n	8000792 <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <EE_PageTransfer+0x13c>)
 800078a:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <EE_PageTransfer+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	e009      	b.n	80007a6 <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000792:	8a7b      	ldrh	r3, [r7, #18]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <EE_PageTransfer+0x56>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <EE_PageTransfer+0x140>)
 800079a:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <EE_PageTransfer+0x13c>)
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	e001      	b.n	80007a6 <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80007a2:	23ab      	movs	r3, #171	; 0xab
 80007a4:	e068      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 80007a6:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80007aa:	69f8      	ldr	r0, [r7, #28]
 80007ac:	f002 fc50 	bl	8003050 <FLASH_ProgramHalfWord>
 80007b0:	4603      	mov	r3, r0
 80007b2:	757b      	strb	r3, [r7, #21]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80007b4:	7d7b      	ldrb	r3, [r7, #21]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d002      	beq.n	80007c0 <EE_PageTransfer+0x74>
  {
    return FlashStatus;
 80007ba:	7d7b      	ldrb	r3, [r7, #21]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	e05b      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80007c0:	88ba      	ldrh	r2, [r7, #4]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff68 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80007cc:	4603      	mov	r3, r0
 80007ce:	823b      	strh	r3, [r7, #16]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 80007d0:	8a3b      	ldrh	r3, [r7, #16]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d001      	beq.n	80007da <EE_PageTransfer+0x8e>
  {
    return EepromStatus;
 80007d6:	8a3b      	ldrh	r3, [r7, #16]
 80007d8:	e04e      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	82fb      	strh	r3, [r7, #22]
 80007de:	e02d      	b.n	800083c <EE_PageTransfer+0xf0>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <EE_PageTransfer+0x144>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	8afb      	ldrh	r3, [r7, #22]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	88fa      	ldrh	r2, [r7, #6]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d021      	beq.n	8000836 <EE_PageTransfer+0xea>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <EE_PageTransfer+0x144>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4925      	ldr	r1, [pc, #148]	; (8000894 <EE_PageTransfer+0x148>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe3f 	bl	8000484 <EE_ReadVariable>
 8000806:	4603      	mov	r3, r0
 8000808:	81fb      	strh	r3, [r7, #14]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d012      	beq.n	8000836 <EE_PageTransfer+0xea>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <EE_PageTransfer+0x144>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <EE_PageTransfer+0x148>)
 800081e:	8812      	ldrh	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff3a 	bl	800069c <EE_VerifyPageFullWriteVariable>
 8000828:	4603      	mov	r3, r0
 800082a:	823b      	strh	r3, [r7, #16]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 800082c:	8a3b      	ldrh	r3, [r7, #16]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d001      	beq.n	8000836 <EE_PageTransfer+0xea>
        {
          return EepromStatus;
 8000832:	8a3b      	ldrh	r3, [r7, #16]
 8000834:	e020      	b.n	8000878 <EE_PageTransfer+0x12c>
  for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	3301      	adds	r3, #1
 800083a:	82fb      	strh	r3, [r7, #22]
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <EE_PageTransfer+0x14c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	8afa      	ldrh	r2, [r7, #22]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3cc      	bcc.n	80007e0 <EE_PageTransfer+0x94>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_ErasePage(OldPageAddress);
 8000846:	69b8      	ldr	r0, [r7, #24]
 8000848:	f002 fbd0 	bl	8002fec <FLASH_ErasePage>
 800084c:	4603      	mov	r3, r0
 800084e:	757b      	strb	r3, [r7, #21]
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d002      	beq.n	800085c <EE_PageTransfer+0x110>
  {
    return FlashStatus;
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	b29b      	uxth	r3, r3
 800085a:	e00d      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 800085c:	2100      	movs	r1, #0
 800085e:	69f8      	ldr	r0, [r7, #28]
 8000860:	f002 fbf6 	bl	8003050 <FLASH_ProgramHalfWord>
 8000864:	4603      	mov	r3, r0
 8000866:	757b      	strb	r3, [r7, #21]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d002      	beq.n	8000874 <EE_PageTransfer+0x128>
  {
    return FlashStatus;
 800086e:	7d7b      	ldrb	r3, [r7, #21]
 8000870:	b29b      	uxth	r3, r3
 8000872:	e001      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000874:	7d7b      	ldrb	r3, [r7, #21]
 8000876:	b29b      	uxth	r3, r3
}
 8000878:	4618      	mov	r0, r3
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	080103ff 	.word	0x080103ff
 8000884:	08010000 	.word	0x08010000
 8000888:	0800f800 	.word	0x0800f800
 800088c:	0800fc00 	.word	0x0800fc00
 8000890:	200000ac 	.word	0x200000ac
 8000894:	200000b2 	.word	0x200000b2
 8000898:	200000b0 	.word	0x200000b0

0800089c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	43da      	mvns	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	0a1b      	lsrs	r3, r3, #8
 80008e0:	4013      	ands	r3, r2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf0c      	ite	eq
 80008e8:	2301      	moveq	r3, #1
 80008ea:	2300      	movne	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	611a      	str	r2, [r3, #16]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b29a      	uxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	615a      	str	r2, [r3, #20]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000948:	2010      	movs	r0, #16
 800094a:	f7ff ffa7 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800094e:	2020      	movs	r0, #32
 8000950:	f7ff ffa4 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000954:	2004      	movs	r0, #4
 8000956:	f7ff ffa1 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800095a:	2008      	movs	r0, #8
 800095c:	f7ff ff9e 	bl	800089c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000960:	492a      	ldr	r1, [pc, #168]	; (8000a0c <MX_GPIO_Init+0xd8>)
 8000962:	482b      	ldr	r0, [pc, #172]	; (8000a10 <MX_GPIO_Init+0xdc>)
 8000964:	f7ff ffd7 	bl	8000916 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(F_R_GPIO_Port, F_R_Pin);
 8000968:	f242 0120 	movw	r1, #8224	; 0x2020
 800096c:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0xe0>)
 800096e:	f7ff ffd2 	bl	8000916 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000972:	4926      	ldr	r1, [pc, #152]	; (8000a0c <MX_GPIO_Init+0xd8>)
 8000974:	4828      	ldr	r0, [pc, #160]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000976:	f7ff ffce 	bl	8000916 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Board_LED_Pin;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_GPIO_Init+0xd8>)
 800097c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800097e:	2301      	movs	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_GPIO_Init+0xdc>)
 8000990:	f002 fcba 	bl	8003308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_8
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000996:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	481c      	ldr	r0, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xe0>)
 80009a2:	f002 fcb1 	bl	8003308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_R_Pin;
 80009a6:	f242 0320 	movw	r3, #8224	; 0x2020
 80009aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <MX_GPIO_Init+0xe0>)
 80009be:	f002 fca3 	bl	8003308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_GPIO_Init+0xec>)
 80009c4:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <MX_GPIO_Init+0xe4>)
 80009d0:	f002 fc9a 	bl	8003308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_GPIO_Init+0xd8>)
 80009d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0xe4>)
 80009ea:	f002 fc8d 	bl	8003308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CALIBRATE_Pin;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_GPIO_Init+0xf0>)
 80009f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009f2:	2308      	movs	r3, #8
 80009f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CALIBRATE_GPIO_Port, &GPIO_InitStruct);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000a00:	f002 fc82 	bl	8003308 <LL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	04200020 	.word	0x04200020
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	0499139b 	.word	0x0499139b
 8000a20:	04ddfcfd 	.word	0x04ddfcfd
 8000a24:	04020002 	.word	0x04020002

08000a28 <GPIO_BOARD_Led_OFF>:
{
	LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
}

void GPIO_BOARD_Led_OFF(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000a2c:	4902      	ldr	r1, [pc, #8]	; (8000a38 <GPIO_BOARD_Led_OFF+0x10>)
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <GPIO_BOARD_Led_OFF+0x14>)
 8000a30:	f7ff ff62 	bl	80008f8 <LL_GPIO_SetOutputPin>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	04200020 	.word	0x04200020
 8000a3c:	40011000 	.word	0x40011000

08000a40 <GPIO_IsCalibrationON>:

uint8_t GPIO_IsCalibrationON(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(CALIBRATE_GPIO_Port, CALIBRATE_Pin) > 0;
 8000a44:	4905      	ldr	r1, [pc, #20]	; (8000a5c <GPIO_IsCalibrationON+0x1c>)
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <GPIO_IsCalibrationON+0x20>)
 8000a48:	f7ff ff40 	bl	80008cc <LL_GPIO_IsInputPinSet>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	04020002 	.word	0x04020002
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000a8c:	601a      	str	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f245 5255 	movw	r2, #21845	; 0x5555
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f003 0207 	and.w	r2, r3, #7
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <LL_IWDG_IsReady+0x18>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <LL_IWDG_IsReady+0x1a>
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
	...

08000b14 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_IWDG_Init+0x3c>)
 8000b1a:	f7ff ffa3 	bl	8000a64 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_IWDG_Init+0x3c>)
 8000b20:	f7ff ffba 	bl	8000a98 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_64);
 8000b24:	2104      	movs	r1, #4
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <MX_IWDG_Init+0x3c>)
 8000b28:	f7ff ffc3 	bl	8000ab2 <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 1000);
 8000b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <MX_IWDG_Init+0x3c>)
 8000b32:	f7ff ffcd 	bl	8000ad0 <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000b36:	bf00      	nop
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_IWDG_Init+0x3c>)
 8000b3a:	f7ff ffd8 	bl	8000aee <LL_IWDG_IsReady>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d1f9      	bne.n	8000b38 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <MX_IWDG_Init+0x3c>)
 8000b46:	f7ff ff9a 	bl	8000a7e <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40003000 	.word	0x40003000

08000b54 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	2b80      	cmp	r3, #128	; 0x80
 8000b66:	bf0c      	ite	eq
 8000b68:	2301      	moveq	r3, #1
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60da      	str	r2, [r3, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60da      	str	r2, [r3, #12]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	605a      	str	r2, [r3, #4]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <LOG_ResetLogger>:

static void AddLogDataByte(uint8_t data_byte);


void LOG_ResetLogger(USART_TypeDef *usart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	usart_log = usart;
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <LOG_ResetLogger+0x30>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
	start_index = 0;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <LOG_ResetLogger+0x34>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	801a      	strh	r2, [r3, #0]
	data_length = 0;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <LOG_ResetLogger+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	801a      	strh	r2, [r3, #0]
	log_tx_time_finished = SYS_GetTick() + 1;
 8000bea:	f001 fe3f 	bl	800286c <SYS_GetTick>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <LOG_ResetLogger+0x3c>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000b4 	.word	0x200000b4
 8000c04:	20000286 	.word	0x20000286
 8000c08:	20000284 	.word	0x20000284
 8000c0c:	20000288 	.word	0x20000288

08000c10 <LOG_IsInProgress>:

uint8_t LOG_IsInProgress(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	return (data_length > 0);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LOG_IsInProgress+0x1c>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf14      	ite	ne
 8000c1c:	2301      	movne	r3, #1
 8000c1e:	2300      	moveq	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000284 	.word	0x20000284

08000c30 <LOG_SendLog>:
	return log_tx_time_finished;
}


void LOG_SendLog(uint8_t *data, uint16_t offset, uint16_t n_bytes)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	803b      	strh	r3, [r7, #0]
	if (!usart_log || (n_bytes == 0) || (data_length >= LOG_BUFFER_SIZE)) return;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <LOG_SendLog+0x74>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d029      	beq.n	8000c9c <LOG_SendLog+0x6c>
 8000c48:	883b      	ldrh	r3, [r7, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d026      	beq.n	8000c9c <LOG_SendLog+0x6c>
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <LOG_SendLog+0x78>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000c56:	d221      	bcs.n	8000c9c <LOG_SendLog+0x6c>

	LL_USART_DisableIT_TXE(usart_log);
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <LOG_SendLog+0x74>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff9a 	bl	8000b96 <LL_USART_DisableIT_TXE>


	do {
		AddLogDataByte(data[offset ++]);
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	807a      	strh	r2, [r7, #2]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f81b 	bl	8000cac <AddLogDataByte>
		n_bytes --;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	803b      	strh	r3, [r7, #0]
	} while((n_bytes > 0) && (data_length < LOG_BUFFER_SIZE));
 8000c7c:	883b      	ldrh	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <LOG_SendLog+0x5c>
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <LOG_SendLog+0x78>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000c8a:	d3ea      	bcc.n	8000c62 <LOG_SendLog+0x32>


	LOG_EvaluateDataSend();
 8000c8c:	f000 f83c 	bl	8000d08 <LOG_EvaluateDataSend>
	LL_USART_EnableIT_TXE(usart_log);
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <LOG_SendLog+0x74>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff6f 	bl	8000b78 <LL_USART_EnableIT_TXE>
 8000c9a:	e000      	b.n	8000c9e <LOG_SendLog+0x6e>
	if (!usart_log || (n_bytes == 0) || (data_length >= LOG_BUFFER_SIZE)) return;
 8000c9c:	bf00      	nop


}
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000b4 	.word	0x200000b4
 8000ca8:	20000284 	.word	0x20000284

08000cac <AddLogDataByte>:

static void AddLogDataByte(uint8_t data_byte)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	uint16_t next_index;
	if (data_length < LOG_BUFFER_SIZE)
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <AddLogDataByte+0x50>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000cbe:	d217      	bcs.n	8000cf0 <AddLogDataByte+0x44>
	{
		next_index = start_index + data_length;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <AddLogDataByte+0x54>)
 8000cc2:	881a      	ldrh	r2, [r3, #0]
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <AddLogDataByte+0x50>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	81fb      	strh	r3, [r7, #14]
		if (next_index >= LOG_BUFFER_SIZE) {
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000cd2:	d303      	bcc.n	8000cdc <AddLogDataByte+0x30>
			next_index -= LOG_BUFFER_SIZE;
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000cda:	81fb      	strh	r3, [r7, #14]
		}

		log_tx_buffer[next_index] = data_byte;
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	4909      	ldr	r1, [pc, #36]	; (8000d04 <AddLogDataByte+0x58>)
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	54ca      	strb	r2, [r1, r3]
		data_length ++;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <AddLogDataByte+0x50>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <AddLogDataByte+0x50>)
 8000cee:	801a      	strh	r2, [r3, #0]
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000284 	.word	0x20000284
 8000d00:	20000286 	.word	0x20000286
 8000d04:	200000b8 	.word	0x200000b8

08000d08 <LOG_EvaluateDataSend>:


void LOG_EvaluateDataSend(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	uint8_t byte_to_send;

	if (!usart_log || (data_length == 0) || !LL_USART_IsActiveFlag_TXE(usart_log))
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <LOG_EvaluateDataSend+0x80>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d034      	beq.n	8000d80 <LOG_EvaluateDataSend+0x78>
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <LOG_EvaluateDataSend+0x84>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d030      	beq.n	8000d80 <LOG_EvaluateDataSend+0x78>
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <LOG_EvaluateDataSend+0x80>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff16 	bl	8000b54 <LL_USART_IsActiveFlag_TXE>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d028      	beq.n	8000d80 <LOG_EvaluateDataSend+0x78>
	{
		return;
	}


	byte_to_send = log_tx_buffer[start_index ++];
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <LOG_EvaluateDataSend+0x88>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	b291      	uxth	r1, r2
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <LOG_EvaluateDataSend+0x88>)
 8000d38:	8011      	strh	r1, [r2, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <LOG_EvaluateDataSend+0x8c>)
 8000d3e:	5c9b      	ldrb	r3, [r3, r2]
 8000d40:	71fb      	strb	r3, [r7, #7]
	if (start_index == LOG_BUFFER_SIZE) {
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <LOG_EvaluateDataSend+0x88>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000d4a:	d102      	bne.n	8000d52 <LOG_EvaluateDataSend+0x4a>
		start_index = 0;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <LOG_EvaluateDataSend+0x88>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
	}
	data_length --;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <LOG_EvaluateDataSend+0x84>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <LOG_EvaluateDataSend+0x84>)
 8000d5c:	801a      	strh	r2, [r3, #0]

	LL_USART_TransmitData8(usart_log, byte_to_send);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <LOG_EvaluateDataSend+0x80>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff24 	bl	8000bb4 <LL_USART_TransmitData8>

	if (data_length == 0) {
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <LOG_EvaluateDataSend+0x84>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d106      	bne.n	8000d82 <LOG_EvaluateDataSend+0x7a>
		log_tx_time_finished = SYS_GetTick();
 8000d74:	f001 fd7a 	bl	800286c <SYS_GetTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <LOG_EvaluateDataSend+0x90>)
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e000      	b.n	8000d82 <LOG_EvaluateDataSend+0x7a>
		return;
 8000d80:	bf00      	nop
	}
}
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000b4 	.word	0x200000b4
 8000d8c:	20000284 	.word	0x20000284
 8000d90:	20000286 	.word	0x20000286
 8000d94:	200000b8 	.word	0x200000b8
 8000d98:	20000288 	.word	0x20000288

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <LL_RCC_HSE_Enable+0x18>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <LL_RCC_HSE_Enable+0x18>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <LL_RCC_HSE_IsReady+0x20>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2301      	moveq	r3, #1
 8000ee8:	2300      	movne	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <LL_RCC_LSI_Enable+0x18>)
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <LL_RCC_LSI_Enable+0x18>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_RCC_LSI_IsReady+0x20>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <LL_RCC_SetSysClkSource+0x24>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f023 0203 	bic.w	r2, r3, #3
 8000f48:	4904      	ldr	r1, [pc, #16]	; (8000f5c <LL_RCC_SetSysClkSource+0x24>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <LL_RCC_GetSysClkSource+0x14>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000

08000f78 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <LL_RCC_PLL_Enable+0x18>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <LL_RCC_PLL_Enable+0x18>)
 8000ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000

0800100c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <LL_RCC_PLL_IsReady+0x20>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	430b      	orrs	r3, r1
 800104c:	4903      	ldr	r1, [pc, #12]	; (800105c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000

08001060 <LL_APB1_GRP1_EnableClock>:
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <LL_APB1_GRP1_EnableClock+0x2c>)
 800106a:	69da      	ldr	r2, [r3, #28]
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <LL_APB1_GRP1_EnableClock+0x2c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4313      	orrs	r3, r2
 8001072:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001076:	69da      	ldr	r2, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4013      	ands	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <LL_APB2_GRP1_EnableClock>:
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800109a:	699a      	ldr	r2, [r3, #24]
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4013      	ands	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LL_FLASH_SetLatency+0x24>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 0207 	bic.w	r2, r3, #7
 80010d0:	4904      	ldr	r1, [pc, #16]	; (80010e4 <LL_FLASH_SetLatency+0x24>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40022000 	.word	0x40022000

080010e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <LL_FLASH_GetLatency+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40022000 	.word	0x40022000

08001100 <LL_USART_DisableIT_TXE>:
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	60da      	str	r2, [r3, #12]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_USART_ReceiveData8>:
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	b2db      	uxtb	r3, r3
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
	...

08001138 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001142:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001146:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a03      	ldr	r2, [pc, #12]	; (800115c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800114e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001152:	6053      	str	r3, [r2, #4]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40010000 	.word	0x40010000

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af04      	add	r7, sp, #16

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff ff92 	bl	8001090 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800116c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001170:	f7ff ff76 	bl	8001060 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff fe11 	bl	8000d9c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800117a:	f7ff fe33 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 800117e:	4603      	mov	r3, r0
 8001180:	2200      	movs	r2, #0
 8001182:	210f      	movs	r1, #15
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe65 	bl	8000e54 <NVIC_EncodePriority>
 800118a:	4603      	mov	r3, r0
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	f7ff fe35 	bl	8000e00 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001196:	f7ff ffcf 	bl	8001138 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f8ff 	bl	800139c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick->CTRL  &= ~SysTick_CTRL_CLKSOURCE_Msk;
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <main+0x208>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a71      	ldr	r2, [pc, #452]	; (8001368 <main+0x208>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6013      	str	r3, [r2, #0]
  SYS_ClearTick();
 80011aa:	f001 fb45 	bl	8002838 <SYS_ClearTick>
  SYS_IncTick();
 80011ae:	f001 fb4f 	bl	8002850 <SYS_IncTick>
  SYS_IncTick();
 80011b2:	f001 fb4d 	bl	8002850 <SYS_IncTick>
  SYS_ResumeTick();
 80011b6:	f001 fb63 	bl	8002880 <SYS_ResumeTick>
  FLASH_Unlock();
 80011ba:	f001 ff05 	bl	8002fc8 <FLASH_Unlock>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f7ff fbb9 	bl	8000934 <MX_GPIO_Init>
  MX_TIM3_Init();
 80011c2:	f001 fc69 	bl	8002a98 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011c6:	f001 fe15 	bl	8002df4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011ca:	f001 fe85 	bl	8002ed8 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80011ce:	f7ff fca1 	bl	8000b14 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  EE_Init(EepromAllVirtAddrTable, TOTAL_EEPROM_DATA_SIZE);		// EEPROM Init
 80011d2:	2110      	movs	r1, #16
 80011d4:	4865      	ldr	r0, [pc, #404]	; (800136c <main+0x20c>)
 80011d6:	f7fe ffdf 	bl	8000198 <EE_Init>
  LOG_ResetLogger(USART_LOG);									// Logger Init
 80011da:	4865      	ldr	r0, [pc, #404]	; (8001370 <main+0x210>)
 80011dc:	f7ff fcf8 	bl	8000bd0 <LOG_ResetLogger>
  SBUS_Init();
 80011e0:	f000 fe5a 	bl	8001e98 <SBUS_Init>
  GPIO_BOARD_Led_OFF();
 80011e4:	f7ff fc20 	bl	8000a28 <GPIO_BOARD_Led_OFF>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t t_now;
  uint16_t n_bytes;
  uint32_t main_frame_log_last_time = SYS_GetTick();
 80011e8:	f001 fb40 	bl	800286c <SYS_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  uint8_t is_in_calibration_mode = !RestoreControlClipParams(&controls_clip_params) || GPIO_IsCalibrationON();
 80011ee:	4861      	ldr	r0, [pc, #388]	; (8001374 <main+0x214>)
 80011f0:	f000 fc58 	bl	8001aa4 <RestoreControlClipParams>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <main+0xa4>
 80011fa:	f7ff fc21 	bl	8000a40 <GPIO_IsCalibrationON>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <main+0xa8>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <main+0xaa>
 8001208:	2300      	movs	r3, #0
 800120a:	72fb      	strb	r3, [r7, #11]
  uint8_t is_first_sbus_frame = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	72bb      	strb	r3, [r7, #10]

  if (is_in_calibration_mode) {
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <main+0xce>
	  n_bytes = sprintf((char *)log_buffer, "\r\nStart calibration mode\r\n");
 8001216:	4958      	ldr	r1, [pc, #352]	; (8001378 <main+0x218>)
 8001218:	4858      	ldr	r0, [pc, #352]	; (800137c <main+0x21c>)
 800121a:	f002 fde1 	bl	8003de0 <siprintf>
 800121e:	4603      	mov	r3, r0
 8001220:	813b      	strh	r3, [r7, #8]
	  LOG_SendLog(log_buffer, 0, n_bytes);
 8001222:	893b      	ldrh	r3, [r7, #8]
 8001224:	461a      	mov	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	4854      	ldr	r0, [pc, #336]	; (800137c <main+0x21c>)
 800122a:	f7ff fd01 	bl	8000c30 <LOG_SendLog>
  }

  while (1)
  {
	  t_now = SYS_GetTick();
 800122e:	f001 fb1d 	bl	800286c <SYS_GetTick>
 8001232:	6078      	str	r0, [r7, #4]

	  if (SBUS_IsData_Ready())
 8001234:	f000 fec4 	bl	8001fc0 <SBUS_IsData_Ready>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8090 	beq.w	8001360 <main+0x200>
	  {
		  SBUS_GetData(&raw_sbus_frame);
 8001240:	484f      	ldr	r0, [pc, #316]	; (8001380 <main+0x220>)
 8001242:	f000 fec7 	bl	8001fd4 <SBUS_GetData>

		  MixControlsFromSBUS(&raw_sbus_frame, &mixed_controls_raw, &controls_mix_params);
 8001246:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <main+0x224>)
 8001248:	494f      	ldr	r1, [pc, #316]	; (8001388 <main+0x228>)
 800124a:	484d      	ldr	r0, [pc, #308]	; (8001380 <main+0x220>)
 800124c:	f000 f912 	bl	8001474 <MixControlsFromSBUS>

		  if (is_in_calibration_mode)
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <main+0xfe>
		  {
			  UpdateCalibrationWithNewData(&mixed_controls_raw);
 8001256:	484c      	ldr	r0, [pc, #304]	; (8001388 <main+0x228>)
 8001258:	f000 fa28 	bl	80016ac <UpdateCalibrationWithNewData>
 800125c:	e07e      	b.n	800135c <main+0x1fc>
		  }
		  else
		  {

			  ClipMixedControls(&mixed_controls_raw, &mixed_controls_clipped, &controls_clip_params);
 800125e:	4a45      	ldr	r2, [pc, #276]	; (8001374 <main+0x214>)
 8001260:	494a      	ldr	r1, [pc, #296]	; (800138c <main+0x22c>)
 8001262:	4849      	ldr	r0, [pc, #292]	; (8001388 <main+0x228>)
 8001264:	f000 f939 	bl	80014da <ClipMixedControls>

			  MapClippedControlsToAbstractInterval(&mixed_controls_clipped, &controls_clip_params, &abstract_controls);
 8001268:	4a49      	ldr	r2, [pc, #292]	; (8001390 <main+0x230>)
 800126a:	4942      	ldr	r1, [pc, #264]	; (8001374 <main+0x214>)
 800126c:	4847      	ldr	r0, [pc, #284]	; (800138c <main+0x22c>)
 800126e:	f000 fd79 	bl	8001d64 <MapClippedControlsToAbstractInterval>



			  if ((t_now - main_frame_log_last_time) > 400)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800127c:	d96e      	bls.n	800135c <main+0x1fc>
			  {
				  main_frame_log_last_time = t_now;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]
				  n_bytes = sprintf((char *)log_buffer, "\r\n\n\n----------------------------------------------------------------\r\nthrot\t\trud\t\tyaw\t\tpitch\t\tout1\r\n");
 8001282:	4944      	ldr	r1, [pc, #272]	; (8001394 <main+0x234>)
 8001284:	483d      	ldr	r0, [pc, #244]	; (800137c <main+0x21c>)
 8001286:	f002 fdab 	bl	8003de0 <siprintf>
 800128a:	4603      	mov	r3, r0
 800128c:	813b      	strh	r3, [r7, #8]
				  LOG_SendLog(log_buffer, 0, n_bytes);
 800128e:	893b      	ldrh	r3, [r7, #8]
 8001290:	461a      	mov	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	4839      	ldr	r0, [pc, #228]	; (800137c <main+0x21c>)
 8001296:	f7ff fccb 	bl	8000c30 <LOG_SendLog>
				  n_bytes = sprintf((char *)log_buffer, "%d\t\t%d\t\t%d\t\t%d\t\t%d\r\n", mixed_controls_raw.throttle, mixed_controls_raw.rudder, mixed_controls_raw.cam_yaw, mixed_controls_raw.cam_pitch, mixed_controls_raw.out1);
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <main+0x228>)
 800129c:	885b      	ldrh	r3, [r3, #2]
 800129e:	4618      	mov	r0, r3
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <main+0x228>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461c      	mov	r4, r3
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <main+0x228>)
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <main+0x228>)
 80012ae:	88db      	ldrh	r3, [r3, #6]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <main+0x228>)
 80012b4:	891b      	ldrh	r3, [r3, #8]
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	9101      	str	r1, [sp, #4]
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	4623      	mov	r3, r4
 80012be:	4602      	mov	r2, r0
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <main+0x238>)
 80012c2:	482e      	ldr	r0, [pc, #184]	; (800137c <main+0x21c>)
 80012c4:	f002 fd8c 	bl	8003de0 <siprintf>
 80012c8:	4603      	mov	r3, r0
 80012ca:	813b      	strh	r3, [r7, #8]
				  LOG_SendLog(log_buffer, 0, n_bytes);
 80012cc:	893b      	ldrh	r3, [r7, #8]
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	482a      	ldr	r0, [pc, #168]	; (800137c <main+0x21c>)
 80012d4:	f7ff fcac 	bl	8000c30 <LOG_SendLog>
				  n_bytes = sprintf((char *)log_buffer, "%d\t\t%d\t\t%d\t\t%d\t\t%d\r\n", mixed_controls_clipped.throttle, mixed_controls_clipped.rudder, mixed_controls_clipped.cam_yaw, mixed_controls_clipped.cam_pitch, mixed_controls_clipped.out1);
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <main+0x22c>)
 80012da:	885b      	ldrh	r3, [r3, #2]
 80012dc:	4618      	mov	r0, r3
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <main+0x22c>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	461c      	mov	r4, r3
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <main+0x22c>)
 80012e6:	889b      	ldrh	r3, [r3, #4]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <main+0x22c>)
 80012ec:	88db      	ldrh	r3, [r3, #6]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <main+0x22c>)
 80012f2:	891b      	ldrh	r3, [r3, #8]
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	9101      	str	r1, [sp, #4]
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	4623      	mov	r3, r4
 80012fc:	4602      	mov	r2, r0
 80012fe:	4926      	ldr	r1, [pc, #152]	; (8001398 <main+0x238>)
 8001300:	481e      	ldr	r0, [pc, #120]	; (800137c <main+0x21c>)
 8001302:	f002 fd6d 	bl	8003de0 <siprintf>
 8001306:	4603      	mov	r3, r0
 8001308:	813b      	strh	r3, [r7, #8]
				  LOG_SendLog(log_buffer, 0, n_bytes);
 800130a:	893b      	ldrh	r3, [r7, #8]
 800130c:	461a      	mov	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	481a      	ldr	r0, [pc, #104]	; (800137c <main+0x21c>)
 8001312:	f7ff fc8d 	bl	8000c30 <LOG_SendLog>
				  n_bytes = sprintf((char *)log_buffer, "%d\t\t%d\t\t%d\t\t%d\t\t%d\r\n", abstract_controls.throttle, abstract_controls.rudder, abstract_controls.cam_yaw, abstract_controls.cam_pitch, abstract_controls.out1);
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <main+0x230>)
 8001318:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800131c:	4618      	mov	r0, r3
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <main+0x230>)
 8001320:	f993 3000 	ldrsb.w	r3, [r3]
 8001324:	461c      	mov	r4, r3
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <main+0x230>)
 8001328:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800132c:	461a      	mov	r2, r3
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <main+0x230>)
 8001330:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <main+0x230>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	9101      	str	r1, [sp, #4]
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	4623      	mov	r3, r4
 8001342:	4602      	mov	r2, r0
 8001344:	4914      	ldr	r1, [pc, #80]	; (8001398 <main+0x238>)
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <main+0x21c>)
 8001348:	f002 fd4a 	bl	8003de0 <siprintf>
 800134c:	4603      	mov	r3, r0
 800134e:	813b      	strh	r3, [r7, #8]
				  LOG_SendLog(log_buffer, 0, n_bytes);
 8001350:	893b      	ldrh	r3, [r7, #8]
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	4809      	ldr	r0, [pc, #36]	; (800137c <main+0x21c>)
 8001358:	f7ff fc6a 	bl	8000c30 <LOG_SendLog>

			  //TODO Implement Further !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		  }

		  is_first_sbus_frame = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	72bb      	strb	r3, [r7, #10]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_IWDG_Init();
 8001360:	f7ff fbd8 	bl	8000b14 <MX_IWDG_Init>
	  t_now = SYS_GetTick();
 8001364:	e763      	b.n	800122e <main+0xce>
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010
 800136c:	20000000 	.word	0x20000000
 8001370:	40004400 	.word	0x40004400
 8001374:	20000304 	.word	0x20000304
 8001378:	0800466c 	.word	0x0800466c
 800137c:	2000028c 	.word	0x2000028c
 8001380:	20000324 	.word	0x20000324
 8001384:	20000020 	.word	0x20000020
 8001388:	20000348 	.word	0x20000348
 800138c:	20000354 	.word	0x20000354
 8001390:	20000360 	.word	0x20000360
 8001394:	08004688 	.word	0x08004688
 8001398:	080046f0 	.word	0x080046f0

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fe8d 	bl	80010c0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80013a6:	bf00      	nop
 80013a8:	f7ff fe9e 	bl	80010e8 <LL_FLASH_GetLatency>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d1fa      	bne.n	80013a8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80013b2:	f7ff fd81 	bl	8000eb8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80013b6:	bf00      	nop
 80013b8:	f7ff fd8c 	bl	8000ed4 <LL_RCC_HSE_IsReady>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d1fa      	bne.n	80013b8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 80013c2:	f7ff fd99 	bl	8000ef8 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 80013c6:	bf00      	nop
 80013c8:	f7ff fda4 	bl	8000f14 <LL_RCC_LSI_IsReady>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d1fa      	bne.n	80013c8 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 80013d2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80013d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80013da:	f7ff fe29 	bl	8001030 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80013de:	f7ff fe07 	bl	8000ff0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80013e2:	bf00      	nop
 80013e4:	f7ff fe12 	bl	800100c <LL_RCC_PLL_IsReady>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d1fa      	bne.n	80013e4 <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff fdc2 	bl	8000f78 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80013f4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80013f8:	f7ff fdd2 	bl	8000fa0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 80013fc:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8001400:	f7ff fde2 	bl	8000fc8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff fd97 	bl	8000f38 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800140a:	bf00      	nop
 800140c:	f7ff fda8 	bl	8000f60 <LL_RCC_GetSysClkSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b08      	cmp	r3, #8
 8001414:	d1fa      	bne.n	800140c <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(6000000);
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <SystemClock_Config+0x8c>)
 8001418:	f002 fc94 	bl	8003d44 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <SystemClock_Config+0x90>)
 800141e:	f002 fc9f 	bl	8003d60 <LL_SetSystemCoreClock>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	005b8d80 	.word	0x005b8d80
 800142c:	02dc6c00 	.word	0x02dc6c00

08001430 <USART1_RX_Callback>:

/* USER CODE BEGIN 4 */
void USART1_RX_Callback(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	uint8_t data = LL_USART_ReceiveData8(USART1);
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <USART1_RX_Callback+0x20>)
 8001438:	f7ff fe71 	bl	800111e <LL_USART_ReceiveData8>
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
	SBUS_OnData_Received(data);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fe58 	bl	80020f8 <SBUS_OnData_Received>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40013800 	.word	0x40013800

08001454 <USART2_TX_Callback>:

void USART2_TX_Callback(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	LOG_EvaluateDataSend();
 8001458:	f7ff fc56 	bl	8000d08 <LOG_EvaluateDataSend>
	if(!LOG_IsInProgress()) {
 800145c:	f7ff fbd8 	bl	8000c10 <LOG_IsInProgress>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <USART2_TX_Callback+0x18>
		LL_USART_DisableIT_TXE(USART_LOG);
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <USART2_TX_Callback+0x1c>)
 8001468:	f7ff fe4a 	bl	8001100 <LL_USART_DisableIT_TXE>
	}
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40004400 	.word	0x40004400

08001474 <MixControlsFromSBUS>:

static void MixControlsFromSBUS(SBUS_Frame_TypeDef *sbus_frame_in, MixedControls_TypeDef *raw_controls_out, ControlsMixerParams_TypeDef *mix_params)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	raw_controls_out->rudder = sbus_frame_in->servo_channels[mix_params->rudder_ch_num - 1];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	801a      	strh	r2, [r3, #0]
	raw_controls_out->throttle = sbus_frame_in->servo_channels[mix_params->throttle_ch_num - 1];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	805a      	strh	r2, [r3, #2]
	raw_controls_out->cam_yaw = sbus_frame_in->servo_channels[mix_params->cam_yaw_ch_num - 1];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	809a      	strh	r2, [r3, #4]
	raw_controls_out->cam_pitch = sbus_frame_in->servo_channels[mix_params->cam_pitch_ch_num - 1];
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	78db      	ldrb	r3, [r3, #3]
 80014b4:	1e5a      	subs	r2, r3, #1
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	80da      	strh	r2, [r3, #6]
	raw_controls_out->out1 = sbus_frame_in->servo_channels[mix_params->out1_ch_num - 1];
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	791b      	ldrb	r3, [r3, #4]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	811a      	strh	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <ClipMixedControls>:

static void ClipMixedControls(MixedControls_TypeDef *new_controls, MixedControls_TypeDef *clipped_out, ControlsClipParams_TypeDef *clip_params)
{
 80014da:	b590      	push	{r4, r7, lr}
 80014dc:	b089      	sub	sp, #36	; 0x24
 80014de:	af02      	add	r7, sp, #8
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
	uint16_t clipped_value;

	clipped_value = ClipValue(new_controls->rudder, clip_params->rudder_min, clip_params->rudder_center, clip_params->rudder_max, CLIP_CENTER_PROTECTION_INTERVAL_PERCENT);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8818      	ldrh	r0, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	8819      	ldrh	r1, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	885a      	ldrh	r2, [r3, #2]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	2406      	movs	r4, #6
 80014f8:	9400      	str	r4, [sp, #0]
 80014fa:	f000 f86f 	bl	80015dc <ClipValue>
 80014fe:	4603      	mov	r3, r0
 8001500:	82fb      	strh	r3, [r7, #22]
	clipped_out->rudder = clipped_value;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	8afa      	ldrh	r2, [r7, #22]
 8001506:	801a      	strh	r2, [r3, #0]

	clipped_value = ClipValue(new_controls->throttle, clip_params->throttle_min, clip_params->throttle_center, clip_params->throttle_max, CLIP_CENTER_PROTECTION_INTERVAL_PERCENT);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8858      	ldrh	r0, [r3, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	88d9      	ldrh	r1, [r3, #6]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	891a      	ldrh	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	895b      	ldrh	r3, [r3, #10]
 8001518:	2406      	movs	r4, #6
 800151a:	9400      	str	r4, [sp, #0]
 800151c:	f000 f85e 	bl	80015dc <ClipValue>
 8001520:	4603      	mov	r3, r0
 8001522:	82fb      	strh	r3, [r7, #22]
	clipped_out->throttle = clipped_value;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	8afa      	ldrh	r2, [r7, #22]
 8001528:	805a      	strh	r2, [r3, #2]

	clipped_value = ClipValue(new_controls->cam_yaw, clip_params->cam_yaw_min, clip_params->cam_yaw_center, clip_params->cam_yaw_max, CLIP_CENTER_PROTECTION_INTERVAL_PERCENT);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8898      	ldrh	r0, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	8999      	ldrh	r1, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	89da      	ldrh	r2, [r3, #14]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	8a1b      	ldrh	r3, [r3, #16]
 800153a:	2406      	movs	r4, #6
 800153c:	9400      	str	r4, [sp, #0]
 800153e:	f000 f84d 	bl	80015dc <ClipValue>
 8001542:	4603      	mov	r3, r0
 8001544:	82fb      	strh	r3, [r7, #22]
	clipped_out->cam_yaw = clipped_value;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	8afa      	ldrh	r2, [r7, #22]
 800154a:	809a      	strh	r2, [r3, #4]

	clipped_value = ClipValue(new_controls->cam_pitch, clip_params->cam_pitch_min, clip_params->cam_pitch_center, clip_params->cam_pitch_max, CLIP_CENTER_PROTECTION_INTERVAL_PERCENT);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	88d8      	ldrh	r0, [r3, #6]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8a59      	ldrh	r1, [r3, #18]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8a9a      	ldrh	r2, [r3, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8adb      	ldrh	r3, [r3, #22]
 800155c:	2406      	movs	r4, #6
 800155e:	9400      	str	r4, [sp, #0]
 8001560:	f000 f83c 	bl	80015dc <ClipValue>
 8001564:	4603      	mov	r3, r0
 8001566:	82fb      	strh	r3, [r7, #22]
	clipped_out->cam_pitch = clipped_value;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	8afa      	ldrh	r2, [r7, #22]
 800156c:	80da      	strh	r2, [r3, #6]

	if (new_controls->out1 > clip_params->out1_hi_thr)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	891a      	ldrh	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8b9b      	ldrh	r3, [r3, #28]
 8001576:	429a      	cmp	r2, r3
 8001578:	d903      	bls.n	8001582 <ClipMixedControls+0xa8>
	{
		clipped_value = clip_params->out1_max;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8bdb      	ldrh	r3, [r3, #30]
 800157e:	82fb      	strh	r3, [r7, #22]
 8001580:	e024      	b.n	80015cc <ClipMixedControls+0xf2>
	}
	else if (new_controls->out1 < clip_params->out1_lo_thr)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	891a      	ldrh	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	8b5b      	ldrh	r3, [r3, #26]
 800158a:	429a      	cmp	r2, r3
 800158c:	d203      	bcs.n	8001596 <ClipMixedControls+0xbc>
	{
		clipped_value = clip_params->out1_min;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8b1b      	ldrh	r3, [r3, #24]
 8001592:	82fb      	strh	r3, [r7, #22]
 8001594:	e01a      	b.n	80015cc <ClipMixedControls+0xf2>
	}
	else if (clipped_out->out1 > 0)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d013      	beq.n	80015c6 <ClipMixedControls+0xec>
	{
		if (clipped_out->out1 > clip_params->out1_hi_thr) {
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	891a      	ldrh	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8b9b      	ldrh	r3, [r3, #28]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d903      	bls.n	80015b2 <ClipMixedControls+0xd8>
			clipped_value = clip_params->out1_max;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	8bdb      	ldrh	r3, [r3, #30]
 80015ae:	82fb      	strh	r3, [r7, #22]
 80015b0:	e00c      	b.n	80015cc <ClipMixedControls+0xf2>
		}
		else if (clipped_out->out1 < clip_params->out1_lo_thr)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	891a      	ldrh	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	8b5b      	ldrh	r3, [r3, #26]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d206      	bcs.n	80015cc <ClipMixedControls+0xf2>
		{
			clipped_value = clip_params->out1_min;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8b1b      	ldrh	r3, [r3, #24]
 80015c2:	82fb      	strh	r3, [r7, #22]
 80015c4:	e002      	b.n	80015cc <ClipMixedControls+0xf2>
		}
	}
	else {
		clipped_value = clip_params->out1_min;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8b1b      	ldrh	r3, [r3, #24]
 80015ca:	82fb      	strh	r3, [r7, #22]
	}
	clipped_out->out1 = clipped_value;
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	8afa      	ldrh	r2, [r7, #22]
 80015d0:	811a      	strh	r2, [r3, #8]
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
	...

080015dc <ClipValue>:


static uint16_t ClipValue(uint16_t x, uint16_t min, uint16_t cent, uint16_t max, uint16_t protect_percent)
{
 80015dc:	b490      	push	{r4, r7}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
	uint32_t i_delta = (max - min) * protect_percent / 100;
 80015fa:	883a      	ldrh	r2, [r7, #0]
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	8c3a      	ldrh	r2, [r7, #32]
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <ClipValue+0xcc>)
 8001608:	fb82 1203 	smull	r1, r2, r2, r3
 800160c:	1152      	asrs	r2, r2, #5
 800160e:	17db      	asrs	r3, r3, #31
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	613b      	str	r3, [r7, #16]
	uint32_t i_th_lo = cent - i_delta;
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	60fb      	str	r3, [r7, #12]
	uint32_t i_th_hi = cent + i_delta;
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4413      	add	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]

	uint32_t y;
	if (x > max) {
 8001624:	88fa      	ldrh	r2, [r7, #6]
 8001626:	883b      	ldrh	r3, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d902      	bls.n	8001632 <ClipValue+0x56>

		y = max;
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e033      	b.n	800169a <ClipValue+0xbe>

	} else if (x > i_th_hi) {
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d210      	bcs.n	800165c <ClipValue+0x80>

		y = cent + (x - i_th_hi) * (max - cent) / (max - i_th_hi);
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	88f9      	ldrh	r1, [r7, #6]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1acb      	subs	r3, r1, r3
 8001642:	8838      	ldrh	r0, [r7, #0]
 8001644:	8879      	ldrh	r1, [r7, #2]
 8001646:	1a41      	subs	r1, r0, r1
 8001648:	fb01 f103 	mul.w	r1, r1, r3
 800164c:	8838      	ldrh	r0, [r7, #0]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ac3      	subs	r3, r0, r3
 8001652:	fbb1 f3f3 	udiv	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e01e      	b.n	800169a <ClipValue+0xbe>

	} else if (x < min) {
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d202      	bcs.n	800166a <ClipValue+0x8e>

		y = min;
 8001664:	88bb      	ldrh	r3, [r7, #4]
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e017      	b.n	800169a <ClipValue+0xbe>

	}  else if (x < i_th_lo) {
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	429a      	cmp	r2, r3
 8001670:	d911      	bls.n	8001696 <ClipValue+0xba>

		y = min + (x - min) * (cent - min) / (i_th_lo - min);
 8001672:	88ba      	ldrh	r2, [r7, #4]
 8001674:	88f9      	ldrh	r1, [r7, #6]
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	1acb      	subs	r3, r1, r3
 800167a:	8878      	ldrh	r0, [r7, #2]
 800167c:	88b9      	ldrh	r1, [r7, #4]
 800167e:	1a41      	subs	r1, r0, r1
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4618      	mov	r0, r3
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	1acb      	subs	r3, r1, r3
 800168c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e001      	b.n	800169a <ClipValue+0xbe>

	} else {

		y = cent;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	617b      	str	r3, [r7, #20]

	}

	return (uint16_t) y;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	b29b      	uxth	r3, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc90      	pop	{r4, r7}
 80016a6:	4770      	bx	lr
 80016a8:	51eb851f 	.word	0x51eb851f

080016ac <UpdateCalibrationWithNewData>:


static void UpdateCalibrationWithNewData(MixedControls_TypeDef *raw_controls)
{
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b093      	sub	sp, #76	; 0x4c
 80016b0:	af0a      	add	r7, sp, #40	; 0x28
 80016b2:	60f8      	str	r0, [r7, #12]
	static ControlsClipParams_TypeDef clip_params = {0};

	static uint32_t last_log = 0;

	uint16_t n_bytes;
	uint32_t t_now = SYS_GetTick();
 80016b4:	f001 f8da 	bl	800286c <SYS_GetTick>
 80016b8:	61b8      	str	r0, [r7, #24]

	uint8_t upd_cent;


	if ((raw_controls->rudder < ABS_MIN_CHANNEL_VALUE_FOR_CALIBRATION) || (raw_controls->rudder > ABS_MAX_CHANNEL_VALUE_FOR_CALIBRATION)) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	2b95      	cmp	r3, #149	; 0x95
 80016c0:	f240 81d9 	bls.w	8001a76 <UpdateCalibrationWithNewData+0x3ca>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	f640 0266 	movw	r2, #2150	; 0x866
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f200 81d2 	bhi.w	8001a76 <UpdateCalibrationWithNewData+0x3ca>
		return;
	} else if ((raw_controls->throttle < ABS_MIN_CHANNEL_VALUE_FOR_CALIBRATION) || (raw_controls->throttle > ABS_MAX_CHANNEL_VALUE_FOR_CALIBRATION)) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	885b      	ldrh	r3, [r3, #2]
 80016d6:	2b95      	cmp	r3, #149	; 0x95
 80016d8:	f240 81cf 	bls.w	8001a7a <UpdateCalibrationWithNewData+0x3ce>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	f640 0266 	movw	r2, #2150	; 0x866
 80016e4:	4293      	cmp	r3, r2
 80016e6:	f200 81c8 	bhi.w	8001a7a <UpdateCalibrationWithNewData+0x3ce>
		return;
	} else if ((raw_controls->cam_yaw < ABS_MIN_CHANNEL_VALUE_FOR_CALIBRATION) || (raw_controls->cam_yaw > ABS_MAX_CHANNEL_VALUE_FOR_CALIBRATION)) {
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	889b      	ldrh	r3, [r3, #4]
 80016ee:	2b95      	cmp	r3, #149	; 0x95
 80016f0:	f240 81c5 	bls.w	8001a7e <UpdateCalibrationWithNewData+0x3d2>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	889b      	ldrh	r3, [r3, #4]
 80016f8:	f640 0266 	movw	r2, #2150	; 0x866
 80016fc:	4293      	cmp	r3, r2
 80016fe:	f200 81be 	bhi.w	8001a7e <UpdateCalibrationWithNewData+0x3d2>
		return;
	} else if ((raw_controls->cam_pitch < ABS_MIN_CHANNEL_VALUE_FOR_CALIBRATION) || (raw_controls->cam_pitch > ABS_MAX_CHANNEL_VALUE_FOR_CALIBRATION)) {
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	88db      	ldrh	r3, [r3, #6]
 8001706:	2b95      	cmp	r3, #149	; 0x95
 8001708:	f240 81bb 	bls.w	8001a82 <UpdateCalibrationWithNewData+0x3d6>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	88db      	ldrh	r3, [r3, #6]
 8001710:	f640 0266 	movw	r2, #2150	; 0x866
 8001714:	4293      	cmp	r3, r2
 8001716:	f200 81b4 	bhi.w	8001a82 <UpdateCalibrationWithNewData+0x3d6>
		return;
	} else if ((raw_controls->out1 < ABS_MIN_CHANNEL_VALUE_FOR_CALIBRATION) || (raw_controls->out1 > ABS_MAX_CHANNEL_VALUE_FOR_CALIBRATION)) {
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	891b      	ldrh	r3, [r3, #8]
 800171e:	2b95      	cmp	r3, #149	; 0x95
 8001720:	f240 81b1 	bls.w	8001a86 <UpdateCalibrationWithNewData+0x3da>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	891b      	ldrh	r3, [r3, #8]
 8001728:	f640 0266 	movw	r2, #2150	; 0x866
 800172c:	4293      	cmp	r3, r2
 800172e:	f200 81aa 	bhi.w	8001a86 <UpdateCalibrationWithNewData+0x3da>
		return;
	}

	if (n_frames == 0) {
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <UpdateCalibrationWithNewData+0x110>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d144      	bne.n	80017c4 <UpdateCalibrationWithNewData+0x118>

		clip_params.rudder_min = 	raw_controls->rudder;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001740:	801a      	strh	r2, [r3, #0]
		clip_params.rudder_center =	raw_controls->rudder;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	881a      	ldrh	r2, [r3, #0]
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001748:	805a      	strh	r2, [r3, #2]
		clip_params.rudder_max = 	raw_controls->rudder;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001750:	809a      	strh	r2, [r3, #4]
		clip_params.throttle_min = 		raw_controls->throttle;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	885a      	ldrh	r2, [r3, #2]
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001758:	80da      	strh	r2, [r3, #6]
		clip_params.throttle_center =	raw_controls->throttle;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	885a      	ldrh	r2, [r3, #2]
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001760:	811a      	strh	r2, [r3, #8]
		clip_params.throttle_max = 		raw_controls->throttle;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	885a      	ldrh	r2, [r3, #2]
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001768:	815a      	strh	r2, [r3, #10]
		clip_params.cam_yaw_min = 		raw_controls->cam_yaw;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	889a      	ldrh	r2, [r3, #4]
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001770:	819a      	strh	r2, [r3, #12]
		clip_params.cam_yaw_center =	raw_controls->cam_yaw;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	889a      	ldrh	r2, [r3, #4]
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001778:	81da      	strh	r2, [r3, #14]
		clip_params.cam_yaw_max = 		raw_controls->cam_yaw;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	889a      	ldrh	r2, [r3, #4]
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001780:	821a      	strh	r2, [r3, #16]
		clip_params.cam_pitch_min = 	raw_controls->cam_pitch;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	88da      	ldrh	r2, [r3, #6]
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001788:	825a      	strh	r2, [r3, #18]
		clip_params.cam_pitch_center =	raw_controls->cam_pitch;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	88da      	ldrh	r2, [r3, #6]
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001790:	829a      	strh	r2, [r3, #20]
		clip_params.cam_pitch_max = 	raw_controls->cam_pitch;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	88da      	ldrh	r2, [r3, #6]
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 8001798:	82da      	strh	r2, [r3, #22]
		clip_params.out1_min = 		raw_controls->out1;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	891a      	ldrh	r2, [r3, #8]
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 80017a0:	831a      	strh	r2, [r3, #24]
		clip_params.out1_lo_thr =	raw_controls->out1;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	891a      	ldrh	r2, [r3, #8]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 80017a8:	835a      	strh	r2, [r3, #26]
		clip_params.out1_hi_thr =	raw_controls->out1;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	891a      	ldrh	r2, [r3, #8]
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 80017b0:	839a      	strh	r2, [r3, #28]
		clip_params.out1_max = 		raw_controls->out1;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	891a      	ldrh	r2, [r3, #8]
 80017b6:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <UpdateCalibrationWithNewData+0x114>)
 80017b8:	83da      	strh	r2, [r3, #30]
 80017ba:	e0dd      	b.n	8001978 <UpdateCalibrationWithNewData+0x2cc>
 80017bc:	20000368 	.word	0x20000368
 80017c0:	2000036c 	.word	0x2000036c

	} else {

		//---- Rudder ----
		upd_cent = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	77fb      	strb	r3, [r7, #31]
		if (clip_params.rudder_min > raw_controls->rudder) {
 80017c8:	4b95      	ldr	r3, [pc, #596]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d905      	bls.n	80017e0 <UpdateCalibrationWithNewData+0x134>
			clip_params.rudder_min = raw_controls->rudder;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	4b91      	ldr	r3, [pc, #580]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80017da:	801a      	strh	r2, [r3, #0]
			upd_cent = 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	77fb      	strb	r3, [r7, #31]
		}
		if (clip_params.rudder_max < raw_controls->rudder) {
 80017e0:	4b8f      	ldr	r3, [pc, #572]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80017e2:	889a      	ldrh	r2, [r3, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d205      	bcs.n	80017f8 <UpdateCalibrationWithNewData+0x14c>
			clip_params.rudder_max = raw_controls->rudder;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	4b8b      	ldr	r3, [pc, #556]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80017f2:	809a      	strh	r2, [r3, #4]
			upd_cent = 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
		}
		if (upd_cent) {
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <UpdateCalibrationWithNewData+0x166>
			clip_params.rudder_center = (clip_params.rudder_min + clip_params.rudder_max) >> 1;
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	4413      	add	r3, r2
 800180a:	105b      	asrs	r3, r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001810:	805a      	strh	r2, [r3, #2]
		}

		//---- Throttle ----
		upd_cent = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	77fb      	strb	r3, [r7, #31]
		if (clip_params.throttle_min > raw_controls->throttle) {
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001818:	88da      	ldrh	r2, [r3, #6]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	885b      	ldrh	r3, [r3, #2]
 800181e:	429a      	cmp	r2, r3
 8001820:	d905      	bls.n	800182e <UpdateCalibrationWithNewData+0x182>
			clip_params.throttle_min = raw_controls->throttle;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	885a      	ldrh	r2, [r3, #2]
 8001826:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001828:	80da      	strh	r2, [r3, #6]
			upd_cent = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	77fb      	strb	r3, [r7, #31]
		}
		if (clip_params.throttle_max < raw_controls->throttle) {
 800182e:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001830:	895a      	ldrh	r2, [r3, #10]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	885b      	ldrh	r3, [r3, #2]
 8001836:	429a      	cmp	r2, r3
 8001838:	d205      	bcs.n	8001846 <UpdateCalibrationWithNewData+0x19a>
			clip_params.throttle_max = raw_controls->throttle;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	885a      	ldrh	r2, [r3, #2]
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001840:	815a      	strh	r2, [r3, #10]
			upd_cent = 1;
 8001842:	2301      	movs	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]
		}
		if (upd_cent) {
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <UpdateCalibrationWithNewData+0x1b4>
			clip_params.throttle_center = (clip_params.throttle_min + clip_params.throttle_max) >> 1;
 800184c:	4b74      	ldr	r3, [pc, #464]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800184e:	88db      	ldrh	r3, [r3, #6]
 8001850:	461a      	mov	r2, r3
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001854:	895b      	ldrh	r3, [r3, #10]
 8001856:	4413      	add	r3, r2
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800185e:	811a      	strh	r2, [r3, #8]
		}

		//---- Camera YAW ----
		upd_cent = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	77fb      	strb	r3, [r7, #31]
		if (clip_params.cam_yaw_min > raw_controls->cam_yaw) {
 8001864:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001866:	899a      	ldrh	r2, [r3, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d905      	bls.n	800187c <UpdateCalibrationWithNewData+0x1d0>
			clip_params.cam_yaw_min = raw_controls->cam_yaw;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	889a      	ldrh	r2, [r3, #4]
 8001874:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001876:	819a      	strh	r2, [r3, #12]
			upd_cent = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	77fb      	strb	r3, [r7, #31]
		}
		if (clip_params.cam_yaw_max < raw_controls->cam_yaw) {
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800187e:	8a1a      	ldrh	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	889b      	ldrh	r3, [r3, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d205      	bcs.n	8001894 <UpdateCalibrationWithNewData+0x1e8>
			clip_params.cam_yaw_max = raw_controls->cam_yaw;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	889a      	ldrh	r2, [r3, #4]
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800188e:	821a      	strh	r2, [r3, #16]
			upd_cent = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	77fb      	strb	r3, [r7, #31]
		}
		if (upd_cent) {
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <UpdateCalibrationWithNewData+0x202>
			clip_params.cam_yaw_center = (clip_params.cam_yaw_min + clip_params.cam_yaw_max) >> 1;
 800189a:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800189c:	899b      	ldrh	r3, [r3, #12]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018a2:	8a1b      	ldrh	r3, [r3, #16]
 80018a4:	4413      	add	r3, r2
 80018a6:	105b      	asrs	r3, r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018ac:	81da      	strh	r2, [r3, #14]
		}

		//---- Camera PITCH ----
		upd_cent = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	77fb      	strb	r3, [r7, #31]
		if (clip_params.cam_pitch_min > raw_controls->cam_pitch) {
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018b4:	8a5a      	ldrh	r2, [r3, #18]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	88db      	ldrh	r3, [r3, #6]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d905      	bls.n	80018ca <UpdateCalibrationWithNewData+0x21e>
			clip_params.cam_pitch_min = raw_controls->cam_pitch;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	88da      	ldrh	r2, [r3, #6]
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018c4:	825a      	strh	r2, [r3, #18]
			upd_cent = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	77fb      	strb	r3, [r7, #31]
		}
		if (clip_params.cam_pitch_max < raw_controls->cam_pitch) {
 80018ca:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018cc:	8ada      	ldrh	r2, [r3, #22]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	88db      	ldrh	r3, [r3, #6]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d205      	bcs.n	80018e2 <UpdateCalibrationWithNewData+0x236>
			clip_params.cam_pitch_max = raw_controls->cam_pitch;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	88da      	ldrh	r2, [r3, #6]
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018dc:	82da      	strh	r2, [r3, #22]
			upd_cent = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]
		}
		if (upd_cent) {
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <UpdateCalibrationWithNewData+0x250>
			clip_params.cam_pitch_center = (clip_params.cam_pitch_min + clip_params.cam_pitch_max) >> 1;
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018ea:	8a5b      	ldrh	r3, [r3, #18]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018f0:	8adb      	ldrh	r3, [r3, #22]
 80018f2:	4413      	add	r3, r2
 80018f4:	105b      	asrs	r3, r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80018fa:	829a      	strh	r2, [r3, #20]
		}


		//---- OUT1 ----
		upd_cent = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	77fb      	strb	r3, [r7, #31]
		if (clip_params.out1_min > raw_controls->out1) {
 8001900:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001902:	8b1a      	ldrh	r2, [r3, #24]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	891b      	ldrh	r3, [r3, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	d905      	bls.n	8001918 <UpdateCalibrationWithNewData+0x26c>
			clip_params.out1_min = raw_controls->out1;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	891a      	ldrh	r2, [r3, #8]
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001912:	831a      	strh	r2, [r3, #24]
			upd_cent = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	77fb      	strb	r3, [r7, #31]
		}
		if (clip_params.out1_max < raw_controls->out1) {
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800191a:	8bda      	ldrh	r2, [r3, #30]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	891b      	ldrh	r3, [r3, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	d205      	bcs.n	8001930 <UpdateCalibrationWithNewData+0x284>
			clip_params.out1_max = raw_controls->out1;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	891a      	ldrh	r2, [r3, #8]
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800192a:	83da      	strh	r2, [r3, #30]
			upd_cent = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	77fb      	strb	r3, [r7, #31]
		}
		if (upd_cent) {
 8001930:	7ffb      	ldrb	r3, [r7, #31]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d020      	beq.n	8001978 <UpdateCalibrationWithNewData+0x2cc>
			uint16_t center = (clip_params.out1_min + clip_params.out1_max) >> 1;
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001938:	8b1b      	ldrh	r3, [r3, #24]
 800193a:	461a      	mov	r2, r3
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800193e:	8bdb      	ldrh	r3, [r3, #30]
 8001940:	4413      	add	r3, r2
 8001942:	105b      	asrs	r3, r3, #1
 8001944:	82fb      	strh	r3, [r7, #22]
			uint16_t delta  = (clip_params.out1_max + clip_params.out1_min) / 10;
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001948:	8bdb      	ldrh	r3, [r3, #30]
 800194a:	461a      	mov	r2, r3
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800194e:	8b1b      	ldrh	r3, [r3, #24]
 8001950:	4413      	add	r3, r2
 8001952:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <UpdateCalibrationWithNewData+0x378>)
 8001954:	fb82 1203 	smull	r1, r2, r2, r3
 8001958:	1092      	asrs	r2, r2, #2
 800195a:	17db      	asrs	r3, r3, #31
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	82bb      	strh	r3, [r7, #20]
			clip_params.out1_lo_thr = center - delta;
 8001960:	8afa      	ldrh	r2, [r7, #22]
 8001962:	8abb      	ldrh	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 800196a:	835a      	strh	r2, [r3, #26]
			clip_params.out1_hi_thr = center + delta;
 800196c:	8afa      	ldrh	r2, [r7, #22]
 800196e:	8abb      	ldrh	r3, [r7, #20]
 8001970:	4413      	add	r3, r2
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001976:	839a      	strh	r2, [r3, #28]
		}
	}

	if ((last_log == 0) || ((t_now - last_log) >= 900)) {
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <UpdateCalibrationWithNewData+0x37c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <UpdateCalibrationWithNewData+0x2e2>
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <UpdateCalibrationWithNewData+0x37c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800198c:	d36d      	bcc.n	8001a6a <UpdateCalibrationWithNewData+0x3be>
		n_bytes = sprintf((char *)log_buffer, "throttle = %d,  rudder = %d, cam_yaw = %d, cam_pitch = %d\r\n", raw_controls->throttle, raw_controls->rudder, raw_controls->cam_yaw, raw_controls->cam_pitch);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	885b      	ldrh	r3, [r3, #2]
 8001992:	4619      	mov	r1, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	889b      	ldrh	r3, [r3, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	88db      	ldrh	r3, [r3, #6]
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9200      	str	r2, [sp, #0]
 80019a8:	4603      	mov	r3, r0
 80019aa:	460a      	mov	r2, r1
 80019ac:	491f      	ldr	r1, [pc, #124]	; (8001a2c <UpdateCalibrationWithNewData+0x380>)
 80019ae:	4820      	ldr	r0, [pc, #128]	; (8001a30 <UpdateCalibrationWithNewData+0x384>)
 80019b0:	f002 fa16 	bl	8003de0 <siprintf>
 80019b4:	4603      	mov	r3, r0
 80019b6:	827b      	strh	r3, [r7, #18]
		LOG_SendLog(log_buffer, 0, n_bytes);
 80019b8:	8a7b      	ldrh	r3, [r7, #18]
 80019ba:	461a      	mov	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	481c      	ldr	r0, [pc, #112]	; (8001a30 <UpdateCalibrationWithNewData+0x384>)
 80019c0:	f7ff f936 	bl	8000c30 <LOG_SendLog>

		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
				clip_params.throttle_min, clip_params.throttle_center, clip_params.throttle_max,
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019c6:	88db      	ldrh	r3, [r3, #6]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019c8:	469c      	mov	ip, r3
				clip_params.throttle_min, clip_params.throttle_center, clip_params.throttle_max,
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019cc:	891b      	ldrh	r3, [r3, #8]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019ce:	469e      	mov	lr, r3
				clip_params.throttle_min, clip_params.throttle_center, clip_params.throttle_max,
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019d2:	895b      	ldrh	r3, [r3, #10]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019d4:	461a      	mov	r2, r3
				clip_params.rudder_min, clip_params.rudder_center, clip_params.rudder_max,
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019da:	4619      	mov	r1, r3
				clip_params.rudder_min, clip_params.rudder_center, clip_params.rudder_max,
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019de:	885b      	ldrh	r3, [r3, #2]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019e0:	4618      	mov	r0, r3
				clip_params.rudder_min, clip_params.rudder_center, clip_params.rudder_max,
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019e4:	889b      	ldrh	r3, [r3, #4]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019e6:	461c      	mov	r4, r3
				clip_params.cam_yaw_min, clip_params.cam_yaw_center, clip_params.cam_yaw_max,
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019ea:	899b      	ldrh	r3, [r3, #12]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019ec:	461d      	mov	r5, r3
				clip_params.cam_yaw_min, clip_params.cam_yaw_center, clip_params.cam_yaw_max,
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019f0:	89db      	ldrh	r3, [r3, #14]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019f2:	461e      	mov	r6, r3
				clip_params.cam_yaw_min, clip_params.cam_yaw_center, clip_params.cam_yaw_max,
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019f6:	8a1b      	ldrh	r3, [r3, #16]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019f8:	60bb      	str	r3, [r7, #8]
				clip_params.cam_pitch_min, clip_params.cam_pitch_center, clip_params.cam_pitch_max);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 80019fc:	8a5b      	ldrh	r3, [r3, #18]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 80019fe:	607b      	str	r3, [r7, #4]
				clip_params.cam_pitch_min, clip_params.cam_pitch_center, clip_params.cam_pitch_max);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001a02:	8a9b      	ldrh	r3, [r3, #20]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 8001a04:	603b      	str	r3, [r7, #0]
				clip_params.cam_pitch_min, clip_params.cam_pitch_center, clip_params.cam_pitch_max);
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <UpdateCalibrationWithNewData+0x374>)
 8001a08:	8adb      	ldrh	r3, [r3, #22]
		n_bytes = sprintf((char *)log_buffer, "TH: %d,\t%d,\t%d;\tRUD %d,\t%d,\t%d;\tYAW %d,\t%d,\t%d;\tPIT %d,\t%d,\t%d;\r\n\n\n",
 8001a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	9308      	str	r3, [sp, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	9307      	str	r3, [sp, #28]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	9306      	str	r3, [sp, #24]
 8001a18:	9605      	str	r6, [sp, #20]
 8001a1a:	9504      	str	r5, [sp, #16]
 8001a1c:	9403      	str	r4, [sp, #12]
 8001a1e:	e009      	b.n	8001a34 <UpdateCalibrationWithNewData+0x388>
 8001a20:	2000036c 	.word	0x2000036c
 8001a24:	66666667 	.word	0x66666667
 8001a28:	2000038c 	.word	0x2000038c
 8001a2c:	08004708 	.word	0x08004708
 8001a30:	2000028c 	.word	0x2000028c
 8001a34:	9002      	str	r0, [sp, #8]
 8001a36:	9101      	str	r1, [sp, #4]
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	4673      	mov	r3, lr
 8001a3c:	4662      	mov	r2, ip
 8001a3e:	4914      	ldr	r1, [pc, #80]	; (8001a90 <UpdateCalibrationWithNewData+0x3e4>)
 8001a40:	4814      	ldr	r0, [pc, #80]	; (8001a94 <UpdateCalibrationWithNewData+0x3e8>)
 8001a42:	f002 f9cd 	bl	8003de0 <siprintf>
 8001a46:	4603      	mov	r3, r0
 8001a48:	827b      	strh	r3, [r7, #18]
		LOG_SendLog(log_buffer, 0, n_bytes);
 8001a4a:	8a7b      	ldrh	r3, [r7, #18]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4810      	ldr	r0, [pc, #64]	; (8001a94 <UpdateCalibrationWithNewData+0x3e8>)
 8001a52:	f7ff f8ed 	bl	8000c30 <LOG_SendLog>


		if (last_log > 0) {
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <UpdateCalibrationWithNewData+0x3ec>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <UpdateCalibrationWithNewData+0x3b8>
			SaveControlClipParams(&clip_params);
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <UpdateCalibrationWithNewData+0x3f0>)
 8001a60:	f000 f908 	bl	8001c74 <SaveControlClipParams>
		}
		last_log = t_now;
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <UpdateCalibrationWithNewData+0x3ec>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	6013      	str	r3, [r2, #0]
	}

	n_frames ++;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <UpdateCalibrationWithNewData+0x3f4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <UpdateCalibrationWithNewData+0x3f4>)
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e008      	b.n	8001a88 <UpdateCalibrationWithNewData+0x3dc>
		return;
 8001a76:	bf00      	nop
 8001a78:	e006      	b.n	8001a88 <UpdateCalibrationWithNewData+0x3dc>
		return;
 8001a7a:	bf00      	nop
 8001a7c:	e004      	b.n	8001a88 <UpdateCalibrationWithNewData+0x3dc>
		return;
 8001a7e:	bf00      	nop
 8001a80:	e002      	b.n	8001a88 <UpdateCalibrationWithNewData+0x3dc>
		return;
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <UpdateCalibrationWithNewData+0x3dc>
		return;
 8001a86:	bf00      	nop
}
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08004744 	.word	0x08004744
 8001a94:	2000028c 	.word	0x2000028c
 8001a98:	2000038c 	.word	0x2000038c
 8001a9c:	2000036c 	.word	0x2000036c
 8001aa0:	20000368 	.word	0x20000368

08001aa4 <RestoreControlClipParams>:




static uint8_t RestoreControlClipParams(ControlsClipParams_TypeDef *dst)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	uint16_t ee_result_code;

	ee_result_code = EE_ReadVariable(EE_ADDR_RUDDER_MIN, &(dst->rudder_min));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ab4:	f7fe fce6 	bl	8000484 <EE_ReadVariable>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <RestoreControlClipParams+0x22>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e0d2      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_RUDDER_CENT, &(dst->rudder_center));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f240 1001 	movw	r0, #257	; 0x101
 8001ad0:	f7fe fcd8 	bl	8000484 <EE_ReadVariable>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <RestoreControlClipParams+0x3e>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e0c4      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_RUDDER_MAX, &(dst->rudder_max));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001aec:	f7fe fcca 	bl	8000484 <EE_ReadVariable>
 8001af0:	4603      	mov	r3, r0
 8001af2:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <RestoreControlClipParams+0x5a>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e0b6      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_THROT_MIN, &(dst->throttle_min));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3306      	adds	r3, #6
 8001b02:	4619      	mov	r1, r3
 8001b04:	f240 1003 	movw	r0, #259	; 0x103
 8001b08:	f7fe fcbc 	bl	8000484 <EE_ReadVariable>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <RestoreControlClipParams+0x76>
 8001b16:	2300      	movs	r3, #0
 8001b18:	e0a8      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_THROT_CENT, &(dst->throttle_center));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001b24:	f7fe fcae 	bl	8000484 <EE_ReadVariable>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <RestoreControlClipParams+0x92>
 8001b32:	2300      	movs	r3, #0
 8001b34:	e09a      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_THROT_MAX, &(dst->throttle_max));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	330a      	adds	r3, #10
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f240 1005 	movw	r0, #261	; 0x105
 8001b40:	f7fe fca0 	bl	8000484 <EE_ReadVariable>
 8001b44:	4603      	mov	r3, r0
 8001b46:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <RestoreControlClipParams+0xae>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e08c      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_CAMYAW_MIN, &(dst->cam_yaw_min));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	330c      	adds	r3, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	f44f 7083 	mov.w	r0, #262	; 0x106
 8001b5c:	f7fe fc92 	bl	8000484 <EE_ReadVariable>
 8001b60:	4603      	mov	r3, r0
 8001b62:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001b64:	89fb      	ldrh	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <RestoreControlClipParams+0xca>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e07e      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_CAMYAW_CENT, &(dst->cam_yaw_center));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	330e      	adds	r3, #14
 8001b72:	4619      	mov	r1, r3
 8001b74:	f240 1007 	movw	r0, #263	; 0x107
 8001b78:	f7fe fc84 	bl	8000484 <EE_ReadVariable>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <RestoreControlClipParams+0xe6>
 8001b86:	2300      	movs	r3, #0
 8001b88:	e070      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_CAMYAW_MAX, &(dst->cam_yaw_max));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f44f 7084 	mov.w	r0, #264	; 0x108
 8001b94:	f7fe fc76 	bl	8000484 <EE_ReadVariable>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <RestoreControlClipParams+0x102>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e062      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_CAMPIT_MIN, &(dst->cam_pitch_min));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3312      	adds	r3, #18
 8001baa:	4619      	mov	r1, r3
 8001bac:	f240 1009 	movw	r0, #265	; 0x109
 8001bb0:	f7fe fc68 	bl	8000484 <EE_ReadVariable>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <RestoreControlClipParams+0x11e>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e054      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_CAMPIT_CENT, &(dst->cam_pitch_center));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001bcc:	f7fe fc5a 	bl	8000484 <EE_ReadVariable>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <RestoreControlClipParams+0x13a>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e046      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_CAMPIT_MAX, &(dst->cam_pitch_max));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3316      	adds	r3, #22
 8001be2:	4619      	mov	r1, r3
 8001be4:	f240 100b 	movw	r0, #267	; 0x10b
 8001be8:	f7fe fc4c 	bl	8000484 <EE_ReadVariable>
 8001bec:	4603      	mov	r3, r0
 8001bee:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <RestoreControlClipParams+0x156>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e038      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_OUT1_MIN, &(dst->out1_min));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8001c04:	f7fe fc3e 	bl	8000484 <EE_ReadVariable>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001c0c:	89fb      	ldrh	r3, [r7, #14]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <RestoreControlClipParams+0x172>
 8001c12:	2300      	movs	r3, #0
 8001c14:	e02a      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_OUT1_LOTH, &(dst->out1_lo_thr));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	331a      	adds	r3, #26
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f240 100d 	movw	r0, #269	; 0x10d
 8001c20:	f7fe fc30 	bl	8000484 <EE_ReadVariable>
 8001c24:	4603      	mov	r3, r0
 8001c26:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <RestoreControlClipParams+0x18e>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e01c      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_OUT1_HITH, &(dst->out1_hi_thr));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	331c      	adds	r3, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001c3c:	f7fe fc22 	bl	8000484 <EE_ReadVariable>
 8001c40:	4603      	mov	r3, r0
 8001c42:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <RestoreControlClipParams+0x1aa>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e00e      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	ee_result_code = EE_ReadVariable(EE_ADDR_OUT1_MAX, &(dst->out1_max));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	331e      	adds	r3, #30
 8001c52:	4619      	mov	r1, r3
 8001c54:	f240 100f 	movw	r0, #271	; 0x10f
 8001c58:	f7fe fc14 	bl	8000484 <EE_ReadVariable>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
	if (ee_result_code != EE_VAR_FOUND) return 0;
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <RestoreControlClipParams+0x1c6>
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <RestoreControlClipParams+0x1c8>
	return 1;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <SaveControlClipParams>:




static void SaveControlClipParams(ControlsClipParams_TypeDef *clip_params)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	EE_WriteVariable(EE_ADDR_RUDDER_MIN, clip_params->rudder_min);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c86:	f7fe fc5b 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_RUDDER_CENT, clip_params->rudder_center);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	885b      	ldrh	r3, [r3, #2]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f240 1001 	movw	r0, #257	; 0x101
 8001c94:	f7fe fc54 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_RUDDER_MAX, clip_params->rudder_max);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	889b      	ldrh	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001ca2:	f7fe fc4d 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_THROT_MIN, clip_params->throttle_min);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	88db      	ldrh	r3, [r3, #6]
 8001caa:	4619      	mov	r1, r3
 8001cac:	f240 1003 	movw	r0, #259	; 0x103
 8001cb0:	f7fe fc46 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_THROT_CENT, clip_params->throttle_center);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	891b      	ldrh	r3, [r3, #8]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001cbe:	f7fe fc3f 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_THROT_MAX, clip_params->throttle_max);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	895b      	ldrh	r3, [r3, #10]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f240 1005 	movw	r0, #261	; 0x105
 8001ccc:	f7fe fc38 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_CAMYAW_MIN, clip_params->cam_yaw_min);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	899b      	ldrh	r3, [r3, #12]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 7083 	mov.w	r0, #262	; 0x106
 8001cda:	f7fe fc31 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_CAMYAW_CENT, clip_params->cam_yaw_center);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	89db      	ldrh	r3, [r3, #14]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f240 1007 	movw	r0, #263	; 0x107
 8001ce8:	f7fe fc2a 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_CAMYAW_MAX, clip_params->cam_yaw_max);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	8a1b      	ldrh	r3, [r3, #16]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8001cf6:	f7fe fc23 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_CAMPIT_MIN, clip_params->cam_pitch_min);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8a5b      	ldrh	r3, [r3, #18]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f240 1009 	movw	r0, #265	; 0x109
 8001d04:	f7fe fc1c 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_CAMPIT_CENT, clip_params->cam_pitch_center);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8a9b      	ldrh	r3, [r3, #20]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001d12:	f7fe fc15 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_CAMPIT_MAX, clip_params->cam_pitch_max);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	8adb      	ldrh	r3, [r3, #22]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f240 100b 	movw	r0, #267	; 0x10b
 8001d20:	f7fe fc0e 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_OUT1_MIN, clip_params->out1_min);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8b1b      	ldrh	r3, [r3, #24]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8001d2e:	f7fe fc07 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_OUT1_LOTH, clip_params->out1_lo_thr);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8b5b      	ldrh	r3, [r3, #26]
 8001d36:	4619      	mov	r1, r3
 8001d38:	f240 100d 	movw	r0, #269	; 0x10d
 8001d3c:	f7fe fc00 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_OUT1_HITH, clip_params->out1_hi_thr);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8b9b      	ldrh	r3, [r3, #28]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001d4a:	f7fe fbf9 	bl	8000540 <EE_WriteVariable>
	EE_WriteVariable(EE_ADDR_OUT1_MAX, clip_params->out1_max);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8bdb      	ldrh	r3, [r3, #30]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f240 100f 	movw	r0, #271	; 0x10f
 8001d58:	f7fe fbf2 	bl	8000540 <EE_WriteVariable>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <MapClippedControlsToAbstractInterval>:


static void MapClippedControlsToAbstractInterval(MixedControls_TypeDef *src, ControlsClipParams_TypeDef *clip_params, AbstractControls_TypeDef *dst)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
	dst->rudder = MapValueToAbstract(src->rudder, clip_params->rudder_min, clip_params->rudder_center, clip_params->rudder_max);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8818      	ldrh	r0, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	8819      	ldrh	r1, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	885a      	ldrh	r2, [r3, #2]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	889b      	ldrh	r3, [r3, #4]
 8001d80:	f000 f83e 	bl	8001e00 <MapValueToAbstract>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	701a      	strb	r2, [r3, #0]
	dst->throttle = MapValueToAbstract(src->throttle, clip_params->throttle_min, clip_params->throttle_center, clip_params->throttle_max);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8858      	ldrh	r0, [r3, #2]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	88d9      	ldrh	r1, [r3, #6]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	891a      	ldrh	r2, [r3, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	895b      	ldrh	r3, [r3, #10]
 8001d9c:	f000 f830 	bl	8001e00 <MapValueToAbstract>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	705a      	strb	r2, [r3, #1]
	dst->cam_yaw = MapValueToAbstract(src->cam_yaw, clip_params->cam_yaw_min, clip_params->cam_yaw_center, clip_params->cam_yaw_max);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8898      	ldrh	r0, [r3, #4]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	8999      	ldrh	r1, [r3, #12]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	89da      	ldrh	r2, [r3, #14]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	8a1b      	ldrh	r3, [r3, #16]
 8001db8:	f000 f822 	bl	8001e00 <MapValueToAbstract>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	709a      	strb	r2, [r3, #2]
	dst->cam_pitch = MapValueToAbstract(src->cam_pitch, clip_params->cam_pitch_min, clip_params->cam_pitch_center, clip_params->cam_pitch_max);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	88d8      	ldrh	r0, [r3, #6]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	8a59      	ldrh	r1, [r3, #18]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	8a9a      	ldrh	r2, [r3, #20]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	8adb      	ldrh	r3, [r3, #22]
 8001dd4:	f000 f814 	bl	8001e00 <MapValueToAbstract>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	70da      	strb	r2, [r3, #3]
	dst->out1 = (src->out1 > clip_params->out1_hi_thr);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	891a      	ldrh	r2, [r3, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	8b9b      	ldrh	r3, [r3, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	bf8c      	ite	hi
 8001dec:	2301      	movhi	r3, #1
 8001dee:	2300      	movls	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	711a      	strb	r2, [r3, #4]
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <MapValueToAbstract>:

static int8_t MapValueToAbstract(uint16_t x, uint16_t min, uint16_t center, uint16_t max)
{
 8001e00:	b490      	push	{r4, r7}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4604      	mov	r4, r0
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	4603      	mov	r3, r0
 8001e14:	80bb      	strh	r3, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	807b      	strh	r3, [r7, #2]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	803b      	strh	r3, [r7, #0]
	int8_t y;
	if (x > max)
 8001e1e:	88fa      	ldrh	r2, [r7, #6]
 8001e20:	883b      	ldrh	r3, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d902      	bls.n	8001e2c <MapValueToAbstract+0x2c>
	{
		y = 100;
 8001e26:	2364      	movs	r3, #100	; 0x64
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e02d      	b.n	8001e88 <MapValueToAbstract+0x88>
	}
	else if (x > center)
 8001e2c:	88fa      	ldrh	r2, [r7, #6]
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d90c      	bls.n	8001e4e <MapValueToAbstract+0x4e>
	{
		y = (x - center) * 100 / (max - center);
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2264      	movs	r2, #100	; 0x64
 8001e3c:	fb02 f203 	mul.w	r2, r2, r3
 8001e40:	8839      	ldrh	r1, [r7, #0]
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	1acb      	subs	r3, r1, r3
 8001e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e01c      	b.n	8001e88 <MapValueToAbstract+0x88>
	}
	else if (x < min)
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	88bb      	ldrh	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d202      	bcs.n	8001e5c <MapValueToAbstract+0x5c>
	{
		y = -100;
 8001e56:	239c      	movs	r3, #156	; 0x9c
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e015      	b.n	8001e88 <MapValueToAbstract+0x88>
	}
	else if (x < center)
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d20f      	bcs.n	8001e84 <MapValueToAbstract+0x84>
	{
		y = (x - min) * 100 / (center - min) - 100;
 8001e64:	88fa      	ldrh	r2, [r7, #6]
 8001e66:	88bb      	ldrh	r3, [r7, #4]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2264      	movs	r2, #100	; 0x64
 8001e6c:	fb02 f203 	mul.w	r2, r2, r3
 8001e70:	8879      	ldrh	r1, [r7, #2]
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	1acb      	subs	r3, r1, r3
 8001e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3b64      	subs	r3, #100	; 0x64
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e001      	b.n	8001e88 <MapValueToAbstract+0x88>
	}
	else
	{
		y = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
	}

	return y;
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <SBUS_Init>:
static void ParseSBUS_Frame(uint8_t *raw);
static uint8_t ReverseBiots(uint8_t b);


void SBUS_Init(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	CH1=CH2=CH3=CH4=CH5=CH6=CH7=CH8=CH9=CH10=CH11=CH12=CH13=CH14=CH15=CH16 = 0;
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <SBUS_Init+0xc4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <SBUS_Init+0xc4>)
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <SBUS_Init+0xc8>)
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <SBUS_Init+0xc8>)
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <SBUS_Init+0xcc>)
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <SBUS_Init+0xcc>)
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <SBUS_Init+0xd0>)
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <SBUS_Init+0xd0>)
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <SBUS_Init+0xd4>)
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <SBUS_Init+0xd4>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <SBUS_Init+0xd8>)
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <SBUS_Init+0xd8>)
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <SBUS_Init+0xdc>)
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <SBUS_Init+0xdc>)
 8001ed4:	881a      	ldrh	r2, [r3, #0]
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <SBUS_Init+0xe0>)
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <SBUS_Init+0xe0>)
 8001edc:	881a      	ldrh	r2, [r3, #0]
 8001ede:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <SBUS_Init+0xe4>)
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <SBUS_Init+0xe4>)
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <SBUS_Init+0xe8>)
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <SBUS_Init+0xe8>)
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <SBUS_Init+0xec>)
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <SBUS_Init+0xec>)
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <SBUS_Init+0xf0>)
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <SBUS_Init+0xf0>)
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <SBUS_Init+0xf4>)
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <SBUS_Init+0xf4>)
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <SBUS_Init+0xf8>)
 8001f08:	801a      	strh	r2, [r3, #0]
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <SBUS_Init+0xf8>)
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <SBUS_Init+0xfc>)
 8001f10:	801a      	strh	r2, [r3, #0]
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <SBUS_Init+0xfc>)
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <SBUS_Init+0x100>)
 8001f18:	801a      	strh	r2, [r3, #0]
	binCH17 = binCH18 = 0;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <SBUS_Init+0x104>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <SBUS_Init+0x104>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <SBUS_Init+0x108>)
 8001f26:	701a      	strb	r2, [r3, #0]
	frame_lost = 0;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <SBUS_Init+0x10c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
	failsafe = 0;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <SBUS_Init+0x110>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

	fl_data_ready = 0;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <SBUS_Init+0x114>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
	fl_receive_in_progress = 0;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <SBUS_Init+0x118>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
	t_last_frame_received = 0;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <SBUS_Init+0x11c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
	next_frame_byte_index = 0;
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <SBUS_Init+0x120>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
	t_last_byte_received = 0;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <SBUS_Init+0x124>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200003ae 	.word	0x200003ae
 8001f60:	200003ac 	.word	0x200003ac
 8001f64:	200003aa 	.word	0x200003aa
 8001f68:	200003a8 	.word	0x200003a8
 8001f6c:	200003a6 	.word	0x200003a6
 8001f70:	200003a4 	.word	0x200003a4
 8001f74:	200003a2 	.word	0x200003a2
 8001f78:	200003a0 	.word	0x200003a0
 8001f7c:	2000039e 	.word	0x2000039e
 8001f80:	2000039c 	.word	0x2000039c
 8001f84:	2000039a 	.word	0x2000039a
 8001f88:	20000398 	.word	0x20000398
 8001f8c:	20000396 	.word	0x20000396
 8001f90:	20000394 	.word	0x20000394
 8001f94:	20000392 	.word	0x20000392
 8001f98:	20000390 	.word	0x20000390
 8001f9c:	200003b1 	.word	0x200003b1
 8001fa0:	200003b0 	.word	0x200003b0
 8001fa4:	200003b2 	.word	0x200003b2
 8001fa8:	200003b3 	.word	0x200003b3
 8001fac:	200003b4 	.word	0x200003b4
 8001fb0:	200003b5 	.word	0x200003b5
 8001fb4:	200003b8 	.word	0x200003b8
 8001fb8:	200003bc 	.word	0x200003bc
 8001fbc:	200003c0 	.word	0x200003c0

08001fc0 <SBUS_IsData_Ready>:

uint8_t SBUS_IsData_Ready(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
	return fl_data_ready;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <SBUS_IsData_Ready+0x10>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	200003b4 	.word	0x200003b4

08001fd4 <SBUS_GetData>:
{
	return t_last_frame_received;
}

uint8_t SBUS_GetData(SBUS_Frame_TypeDef *sbus_frame)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	sbus_frame->servo_channels[0] = CH1;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <SBUS_GetData+0xd0>)
 8001fde:	881a      	ldrh	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	801a      	strh	r2, [r3, #0]
	sbus_frame->servo_channels[1] = CH2;
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <SBUS_GetData+0xd4>)
 8001fe6:	881a      	ldrh	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	805a      	strh	r2, [r3, #2]
	sbus_frame->servo_channels[2] = CH3;
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <SBUS_GetData+0xd8>)
 8001fee:	881a      	ldrh	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	809a      	strh	r2, [r3, #4]
	sbus_frame->servo_channels[3] = CH4;
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <SBUS_GetData+0xdc>)
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	80da      	strh	r2, [r3, #6]
	sbus_frame->servo_channels[4] = CH5;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <SBUS_GetData+0xe0>)
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	811a      	strh	r2, [r3, #8]
	sbus_frame->servo_channels[5] = CH6;
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <SBUS_GetData+0xe4>)
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	815a      	strh	r2, [r3, #10]
	sbus_frame->servo_channels[6] = CH7;
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <SBUS_GetData+0xe8>)
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	819a      	strh	r2, [r3, #12]
	sbus_frame->servo_channels[7] = CH8;
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <SBUS_GetData+0xec>)
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	81da      	strh	r2, [r3, #14]
	sbus_frame->servo_channels[8] = CH9;
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <SBUS_GetData+0xf0>)
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	821a      	strh	r2, [r3, #16]
	sbus_frame->servo_channels[9] = CH10;
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <SBUS_GetData+0xf4>)
 8002026:	881a      	ldrh	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	825a      	strh	r2, [r3, #18]
	sbus_frame->servo_channels[10] = CH11;
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <SBUS_GetData+0xf8>)
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	829a      	strh	r2, [r3, #20]
	sbus_frame->servo_channels[11] = CH12;
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <SBUS_GetData+0xfc>)
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	82da      	strh	r2, [r3, #22]
	sbus_frame->servo_channels[12] = CH13;
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <SBUS_GetData+0x100>)
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	831a      	strh	r2, [r3, #24]
	sbus_frame->servo_channels[13] = CH14;
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <SBUS_GetData+0x104>)
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	835a      	strh	r2, [r3, #26]
	sbus_frame->servo_channels[14] = CH15;
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <SBUS_GetData+0x108>)
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	839a      	strh	r2, [r3, #28]
	sbus_frame->servo_channels[15] = CH16;
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <SBUS_GetData+0x10c>)
 8002056:	881a      	ldrh	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	83da      	strh	r2, [r3, #30]
	sbus_frame->ch17 = binCH17;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <SBUS_GetData+0x110>)
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f883 2020 	strb.w	r2, [r3, #32]
	sbus_frame->ch18 = binCH18;
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <SBUS_GetData+0x114>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	sbus_frame->frame_lost = frame_lost;
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <SBUS_GetData+0x118>)
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sbus_frame->failsafe = failsafe;
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <SBUS_GetData+0x11c>)
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (fl_data_ready) {
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <SBUS_GetData+0x120>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <SBUS_GetData+0xc2>
		fl_data_ready = 0;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <SBUS_GetData+0x120>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
		return 1;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <SBUS_GetData+0xc4>
	} else {
		return 0;
 8002096:	2300      	movs	r3, #0
	}
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000390 	.word	0x20000390
 80020a8:	20000392 	.word	0x20000392
 80020ac:	20000394 	.word	0x20000394
 80020b0:	20000396 	.word	0x20000396
 80020b4:	20000398 	.word	0x20000398
 80020b8:	2000039a 	.word	0x2000039a
 80020bc:	2000039c 	.word	0x2000039c
 80020c0:	2000039e 	.word	0x2000039e
 80020c4:	200003a0 	.word	0x200003a0
 80020c8:	200003a2 	.word	0x200003a2
 80020cc:	200003a4 	.word	0x200003a4
 80020d0:	200003a6 	.word	0x200003a6
 80020d4:	200003a8 	.word	0x200003a8
 80020d8:	200003aa 	.word	0x200003aa
 80020dc:	200003ac 	.word	0x200003ac
 80020e0:	200003ae 	.word	0x200003ae
 80020e4:	200003b0 	.word	0x200003b0
 80020e8:	200003b1 	.word	0x200003b1
 80020ec:	200003b2 	.word	0x200003b2
 80020f0:	200003b3 	.word	0x200003b3
 80020f4:	200003b4 	.word	0x200003b4

080020f8 <SBUS_OnData_Received>:


uint8_t SBUS_OnData_Received(uint8_t data)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]

	//data = ReverseBiots(data);

	uint32_t t_now = SYS_GetTick();
 8002102:	f000 fbb3 	bl	800286c <SYS_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]
	if ((t_now - t_last_byte_received) > MIN_FRAME_PROTECTION_INTERVAL) {
 8002108:	4b24      	ldr	r3, [pc, #144]	; (800219c <SBUS_OnData_Received+0xa4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b05      	cmp	r3, #5
 8002112:	d905      	bls.n	8002120 <SBUS_OnData_Received+0x28>
		fl_receive_in_progress = 0;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <SBUS_OnData_Received+0xa8>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
		next_frame_byte_index = 0;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <SBUS_OnData_Received+0xac>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
	}
	t_last_byte_received = t_now;
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <SBUS_OnData_Received+0xa4>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6013      	str	r3, [r2, #0]



	if (!fl_receive_in_progress)
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <SBUS_OnData_Received+0xa8>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <SBUS_OnData_Received+0x50>
	{
		if (data == SBUS_FRAME_HEADER) {
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d12d      	bne.n	8002190 <SBUS_OnData_Received+0x98>
			raw_data_buff[0] = SBUS_FRAME_HEADER;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <SBUS_OnData_Received+0xb0>)
 8002136:	220f      	movs	r2, #15
 8002138:	701a      	strb	r2, [r3, #0]
			next_frame_byte_index = 1;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <SBUS_OnData_Received+0xac>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
			fl_receive_in_progress = 1;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <SBUS_OnData_Received+0xa8>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e023      	b.n	8002190 <SBUS_OnData_Received+0x98>
		}
	}
	else
	{
		raw_data_buff[next_frame_byte_index ++] = data;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <SBUS_OnData_Received+0xac>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	b2d1      	uxtb	r1, r2
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <SBUS_OnData_Received+0xac>)
 8002152:	7011      	strb	r1, [r2, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <SBUS_OnData_Received+0xb0>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	5453      	strb	r3, [r2, r1]
		if (next_frame_byte_index == RAW_SBUS_FRAME_LENGTH) {
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <SBUS_OnData_Received+0xac>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b19      	cmp	r3, #25
 8002162:	d115      	bne.n	8002190 <SBUS_OnData_Received+0x98>
			fl_receive_in_progress = 0;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <SBUS_OnData_Received+0xa8>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			next_frame_byte_index = 0;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <SBUS_OnData_Received+0xac>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
			if (data == SBUS_FRAME_FOOTER)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <SBUS_OnData_Received+0x98>
			{
				ParseSBUS_Frame(raw_data_buff);
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <SBUS_OnData_Received+0xb0>)
 8002178:	f000 f81c 	bl	80021b4 <ParseSBUS_Frame>
				fl_data_ready = 1;
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <SBUS_OnData_Received+0xb4>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
				t_last_frame_received = SYS_GetTick();
 8002182:	f000 fb73 	bl	800286c <SYS_GetTick>
 8002186:	4603      	mov	r3, r0
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <SBUS_OnData_Received+0xb8>)
 800218a:	6013      	str	r3, [r2, #0]
				return 1;
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <SBUS_OnData_Received+0x9a>
			}
		}
	}

	return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200003c0 	.word	0x200003c0
 80021a0:	200003b5 	.word	0x200003b5
 80021a4:	200003bc 	.word	0x200003bc
 80021a8:	200003c4 	.word	0x200003c4
 80021ac:	200003b4 	.word	0x200003b4
 80021b0:	200003b8 	.word	0x200003b8

080021b4 <ParseSBUS_Frame>:
	return (lookup[b & 0x0F] << 4) | lookup[(b >> 4) & 0x0F];
}


static void ParseSBUS_Frame(uint8_t *buf_)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	uint16_t v;

	if ((buf_[0] != SBUS_FRAME_HEADER) || (buf_[24] != SBUS_FRAME_FOOTER)) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	f040 81e7 	bne.w	8002594 <ParseSBUS_Frame+0x3e0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3318      	adds	r3, #24
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 81e1 	bne.w	8002594 <ParseSBUS_Frame+0x3e0>
		return;
	}

	// Channel 1
	v = buf_[1];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[2] << 8) & 0x7FF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3302      	adds	r3, #2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	81fb      	strh	r3, [r7, #14]
	CH1 = v;
 80021f4:	4aa1      	ldr	r2, [pc, #644]	; (800247c <ParseSBUS_Frame+0x2c8>)
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	8013      	strh	r3, [r2, #0]

	// Channel 2
	v = buf_[2] >> 3;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3302      	adds	r3, #2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[3] << 5) & 0x7FF);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3303      	adds	r3, #3
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	b21b      	sxth	r3, r3
 8002210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002214:	b21a      	sxth	r2, r3
 8002216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800221a:	4313      	orrs	r3, r2
 800221c:	b21b      	sxth	r3, r3
 800221e:	81fb      	strh	r3, [r7, #14]
	CH2 = v;
 8002220:	4a97      	ldr	r2, [pc, #604]	; (8002480 <ParseSBUS_Frame+0x2cc>)
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	8013      	strh	r3, [r2, #0]

	// Channel 3
	v = buf_[3] >> 6;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	b2db      	uxtb	r3, r3
 8002230:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[4] << 2)  & 0x7FF);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	b21b      	sxth	r3, r3
 800223c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002240:	b21a      	sxth	r2, r3
 8002242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002246:	4313      	orrs	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[5] << 10) & 0x7FF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3305      	adds	r3, #5
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	029b      	lsls	r3, r3, #10
 8002254:	b21b      	sxth	r3, r3
 8002256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225a:	b21a      	sxth	r2, r3
 800225c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002260:	4313      	orrs	r3, r2
 8002262:	b21b      	sxth	r3, r3
 8002264:	81fb      	strh	r3, [r7, #14]
	CH3 = v;
 8002266:	4a87      	ldr	r2, [pc, #540]	; (8002484 <ParseSBUS_Frame+0x2d0>)
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	8013      	strh	r3, [r2, #0]

	// Channel 4
	v = buf_[5] >> 1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3305      	adds	r3, #5
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[6] << 7) & 0x7FF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3306      	adds	r3, #6
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	01db      	lsls	r3, r3, #7
 8002280:	b21b      	sxth	r3, r3
 8002282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002286:	b21a      	sxth	r2, r3
 8002288:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800228c:	4313      	orrs	r3, r2
 800228e:	b21b      	sxth	r3, r3
 8002290:	81fb      	strh	r3, [r7, #14]
	CH4 = v;
 8002292:	4a7d      	ldr	r2, [pc, #500]	; (8002488 <ParseSBUS_Frame+0x2d4>)
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	8013      	strh	r3, [r2, #0]

	// Channel 5
	v = buf_[6] >> 4;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3306      	adds	r3, #6
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[7] << 4) & 0x7FF);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3307      	adds	r3, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	81fb      	strh	r3, [r7, #14]
	CH5 = v;
 80022be:	4a73      	ldr	r2, [pc, #460]	; (800248c <ParseSBUS_Frame+0x2d8>)
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	8013      	strh	r3, [r2, #0]

	// Channel 6
	v = buf_[7] >> 7;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3307      	adds	r3, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	09db      	lsrs	r3, r3, #7
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[8] << 1) & 0x7FF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3308      	adds	r3, #8
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b21b      	sxth	r3, r3
 80022da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022de:	b21a      	sxth	r2, r3
 80022e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[9] << 9) & 0x7FF);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3309      	adds	r3, #9
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fe:	4313      	orrs	r3, r2
 8002300:	b21b      	sxth	r3, r3
 8002302:	81fb      	strh	r3, [r7, #14]
	CH6 = v;
 8002304:	4a62      	ldr	r2, [pc, #392]	; (8002490 <ParseSBUS_Frame+0x2dc>)
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	8013      	strh	r3, [r2, #0]

	// Channel 7
	v = buf_[9] >> 2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3309      	adds	r3, #9
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[10] << 6) & 0x7FF);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	330a      	adds	r3, #10
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	b21b      	sxth	r3, r3
 8002320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002324:	b21a      	sxth	r2, r3
 8002326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800232a:	4313      	orrs	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	81fb      	strh	r3, [r7, #14]
	CH7 = v;
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <ParseSBUS_Frame+0x2e0>)
 8002332:	89fb      	ldrh	r3, [r7, #14]
 8002334:	8013      	strh	r3, [r2, #0]

	// Channel 8
	v = buf_[10] >> 5;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	330a      	adds	r3, #10
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[11] << 3) & 0x7FF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	330b      	adds	r3, #11
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	b21b      	sxth	r3, r3
 800234c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002350:	b21a      	sxth	r2, r3
 8002352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002356:	4313      	orrs	r3, r2
 8002358:	b21b      	sxth	r3, r3
 800235a:	81fb      	strh	r3, [r7, #14]
	CH8 = v;
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <ParseSBUS_Frame+0x2e4>)
 800235e:	89fb      	ldrh	r3, [r7, #14]
 8002360:	8013      	strh	r3, [r2, #0]

	// Channel 9
	v = buf_[12];
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	330c      	adds	r3, #12
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[13] << 8) & 0x7FF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	330d      	adds	r3, #13
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21b      	sxth	r3, r3
 8002374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002378:	b21a      	sxth	r2, r3
 800237a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800237e:	4313      	orrs	r3, r2
 8002380:	b21b      	sxth	r3, r3
 8002382:	81fb      	strh	r3, [r7, #14]
	CH9 = v;
 8002384:	4a45      	ldr	r2, [pc, #276]	; (800249c <ParseSBUS_Frame+0x2e8>)
 8002386:	89fb      	ldrh	r3, [r7, #14]
 8002388:	8013      	strh	r3, [r2, #0]

	// Channel 10
	v = buf_[13] >> 3;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	330d      	adds	r3, #13
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[14] << 5) & 0x7FF);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	330e      	adds	r3, #14
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	b21b      	sxth	r3, r3
 80023a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	81fb      	strh	r3, [r7, #14]
	CH10 = v;
 80023b0:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <ParseSBUS_Frame+0x2ec>)
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	8013      	strh	r3, [r2, #0]

	// Channel 11
	v = buf_[14] >> 6;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	330e      	adds	r3, #14
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[15] << 2) & 0x7FF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	330f      	adds	r3, #15
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21b      	sxth	r3, r3
 80023da:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[16] << 10) & 0x7FF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3310      	adds	r3, #16
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	81fb      	strh	r3, [r7, #14]
	CH11 = v;
 80023f6:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <ParseSBUS_Frame+0x2f0>)
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	8013      	strh	r3, [r2, #0]

	// Channel 12
	v = buf_[16] >> 1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3310      	adds	r3, #16
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[17] << 7) & 0x7FF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3311      	adds	r3, #17
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	b21b      	sxth	r3, r3
 8002412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002416:	b21a      	sxth	r2, r3
 8002418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800241c:	4313      	orrs	r3, r2
 800241e:	b21b      	sxth	r3, r3
 8002420:	81fb      	strh	r3, [r7, #14]
	CH12 = v;
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <ParseSBUS_Frame+0x2f4>)
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	8013      	strh	r3, [r2, #0]

	// Channel 13
	v = buf_[17] >> 4;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3311      	adds	r3, #17
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	b2db      	uxtb	r3, r3
 8002432:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[18] << 4) & 0x7FF);\
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3312      	adds	r3, #18
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	b21b      	sxth	r3, r3
 800243e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002442:	b21a      	sxth	r2, r3
 8002444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002448:	4313      	orrs	r3, r2
 800244a:	b21b      	sxth	r3, r3
 800244c:	81fb      	strh	r3, [r7, #14]
	CH13 = v;
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <ParseSBUS_Frame+0x2f8>)
 8002450:	89fb      	ldrh	r3, [r7, #14]
 8002452:	8013      	strh	r3, [r2, #0]

	// Channel 14
	v = buf_[18] >> 7;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3312      	adds	r3, #18
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	09db      	lsrs	r3, r3, #7
 800245c:	b2db      	uxtb	r3, r3
 800245e:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[19] << 1) & 0x7FF);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3313      	adds	r3, #19
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	b21b      	sxth	r3, r3
 800246a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800246e:	b21a      	sxth	r2, r3
 8002470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002474:	4313      	orrs	r3, r2
 8002476:	b21b      	sxth	r3, r3
 8002478:	e01a      	b.n	80024b0 <ParseSBUS_Frame+0x2fc>
 800247a:	bf00      	nop
 800247c:	20000390 	.word	0x20000390
 8002480:	20000392 	.word	0x20000392
 8002484:	20000394 	.word	0x20000394
 8002488:	20000396 	.word	0x20000396
 800248c:	20000398 	.word	0x20000398
 8002490:	2000039a 	.word	0x2000039a
 8002494:	2000039c 	.word	0x2000039c
 8002498:	2000039e 	.word	0x2000039e
 800249c:	200003a0 	.word	0x200003a0
 80024a0:	200003a2 	.word	0x200003a2
 80024a4:	200003a4 	.word	0x200003a4
 80024a8:	200003a6 	.word	0x200003a6
 80024ac:	200003a8 	.word	0x200003a8
 80024b0:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[20] << 9) & 0x7FF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3314      	adds	r3, #20
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	025b      	lsls	r3, r3, #9
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	81fb      	strh	r3, [r7, #14]
	CH14 = v;
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <ParseSBUS_Frame+0x3ec>)
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	8013      	strh	r3, [r2, #0]

	// Channel 15
	v = buf_[20] >> 2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3314      	adds	r3, #20
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[21] << 6) & 0x7FF);\
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3315      	adds	r3, #21
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	81fb      	strh	r3, [r7, #14]
	CH15 = v;
 80024f8:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <ParseSBUS_Frame+0x3f0>)
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	8013      	strh	r3, [r2, #0]

	// Channel 16
	v = buf_[21] >> 5;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3315      	adds	r3, #21
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[2] << 3) & 0x7FF);\
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	b21b      	sxth	r3, r3
 8002514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002518:	b21a      	sxth	r2, r3
 800251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251e:	4313      	orrs	r3, r2
 8002520:	b21b      	sxth	r3, r3
 8002522:	81fb      	strh	r3, [r7, #14]
	CH16 = v;
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <ParseSBUS_Frame+0x3f4>)
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	8013      	strh	r3, [r2, #0]

	// Channel 17
	binCH17 = (buf_[23] & CH17_MASK) != 0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3317      	adds	r3, #23
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <ParseSBUS_Frame+0x3f8>)
 8002542:	701a      	strb	r2, [r3, #0]

	// Channel 18
	binCH18 = (buf_[23] & CH18_MASK) != 0;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3317      	adds	r3, #23
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <ParseSBUS_Frame+0x3fc>)
 800255c:	701a      	strb	r2, [r3, #0]

	// Frame lost
	frame_lost = (buf_[23] & FRAME_LOST_MASK) != 0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3317      	adds	r3, #23
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <ParseSBUS_Frame+0x400>)
 8002576:	701a      	strb	r2, [r3, #0]

	// FailSafe
	failsafe = (buf_[23] & FAILSAFE_MASK) != 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3317      	adds	r3, #23
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <ParseSBUS_Frame+0x404>)
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e000      	b.n	8002596 <ParseSBUS_Frame+0x3e2>
		return;
 8002594:	bf00      	nop
}
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200003aa 	.word	0x200003aa
 80025a4:	200003ac 	.word	0x200003ac
 80025a8:	200003ae 	.word	0x200003ae
 80025ac:	200003b0 	.word	0x200003b0
 80025b0:	200003b1 	.word	0x200003b1
 80025b4:	200003b2 	.word	0x200003b2
 80025b8:	200003b3 	.word	0x200003b3

080025bc <LL_USART_IsActiveFlag_FE>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <LL_USART_IsActiveFlag_NE>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <LL_USART_IsActiveFlag_ORE>:
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <LL_USART_IsActiveFlag_RXNE>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b20      	cmp	r3, #32
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <LL_USART_IsActiveFlag_TXE>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <LL_USART_IsEnabledIT_RXNE>:
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b20      	cmp	r3, #32
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <LL_USART_IsEnabledIT_TXE>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <NMI_Handler+0x4>

080026be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <HardFault_Handler+0x4>

080026c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <MemManage_Handler+0x4>

080026ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <BusFault_Handler+0x4>

080026d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <UsageFault_Handler+0x4>

080026d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	SYS_IncTick();
 80026fe:	f000 f8a7 	bl	8002850 <SYS_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 800270c:	4812      	ldr	r0, [pc, #72]	; (8002758 <USART1_IRQHandler+0x50>)
 800270e:	f7ff ff8b 	bl	8002628 <LL_USART_IsActiveFlag_RXNE>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <USART1_IRQHandler+0x22>
 8002718:	480f      	ldr	r0, [pc, #60]	; (8002758 <USART1_IRQHandler+0x50>)
 800271a:	f7ff ffa9 	bl	8002670 <LL_USART_IsEnabledIT_RXNE>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <USART1_IRQHandler+0x22>
	{
		USART1_RX_Callback();
 8002724:	f7fe fe84 	bl	8001430 <USART1_RX_Callback>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002728:	e013      	b.n	8002752 <USART1_IRQHandler+0x4a>
	else if(LL_USART_IsActiveFlag_ORE(USART1) || LL_USART_IsActiveFlag_FE(USART1) || LL_USART_IsActiveFlag_NE(USART1))
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <USART1_IRQHandler+0x50>)
 800272c:	f7ff ff6a 	bl	8002604 <LL_USART_IsActiveFlag_ORE>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <USART1_IRQHandler+0x46>
 8002736:	4808      	ldr	r0, [pc, #32]	; (8002758 <USART1_IRQHandler+0x50>)
 8002738:	f7ff ff40 	bl	80025bc <LL_USART_IsActiveFlag_FE>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <USART1_IRQHandler+0x46>
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <USART1_IRQHandler+0x50>)
 8002744:	f7ff ff4c 	bl	80025e0 <LL_USART_IsActiveFlag_NE>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <USART1_IRQHandler+0x4a>
		(void) USART1->DR;
 800274e:	4b02      	ldr	r3, [pc, #8]	; (8002758 <USART1_IRQHandler+0x50>)
 8002750:	685b      	ldr	r3, [r3, #4]
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40013800 	.word	0x40013800

0800275c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2) || LL_USART_IsActiveFlag_NE(USART2))
 8002760:	4819      	ldr	r0, [pc, #100]	; (80027c8 <USART2_IRQHandler+0x6c>)
 8002762:	f7ff ff4f 	bl	8002604 <LL_USART_IsActiveFlag_ORE>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <USART2_IRQHandler+0x28>
 800276c:	4816      	ldr	r0, [pc, #88]	; (80027c8 <USART2_IRQHandler+0x6c>)
 800276e:	f7ff ff25 	bl	80025bc <LL_USART_IsActiveFlag_FE>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <USART2_IRQHandler+0x28>
 8002778:	4813      	ldr	r0, [pc, #76]	; (80027c8 <USART2_IRQHandler+0x6c>)
 800277a:	f7ff ff31 	bl	80025e0 <LL_USART_IsActiveFlag_NE>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <USART2_IRQHandler+0x2e>
	{
		(void) USART2->DR;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <USART2_IRQHandler+0x6c>)
 8002786:	685b      	ldr	r3, [r3, #4]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002788:	e01b      	b.n	80027c2 <USART2_IRQHandler+0x66>
		if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 800278a:	480f      	ldr	r0, [pc, #60]	; (80027c8 <USART2_IRQHandler+0x6c>)
 800278c:	f7ff ff4c 	bl	8002628 <LL_USART_IsActiveFlag_RXNE>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <USART2_IRQHandler+0x4a>
 8002796:	480c      	ldr	r0, [pc, #48]	; (80027c8 <USART2_IRQHandler+0x6c>)
 8002798:	f7ff ff6a 	bl	8002670 <LL_USART_IsEnabledIT_RXNE>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <USART2_IRQHandler+0x4a>
			USART2_RX_Callback();
 80027a2:	f000 fc05 	bl	8002fb0 <USART2_RX_Callback>
		if (LL_USART_IsActiveFlag_TXE(USART2) && LL_USART_IsEnabledIT_TXE(USART2))
 80027a6:	4808      	ldr	r0, [pc, #32]	; (80027c8 <USART2_IRQHandler+0x6c>)
 80027a8:	f7ff ff50 	bl	800264c <LL_USART_IsActiveFlag_TXE>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <USART2_IRQHandler+0x66>
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <USART2_IRQHandler+0x6c>)
 80027b4:	f7ff ff6e 	bl	8002694 <LL_USART_IsEnabledIT_TXE>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <USART2_IRQHandler+0x66>
			USART2_TX_Callback();
 80027be:	f7fe fe49 	bl	8001454 <USART2_TX_Callback>
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40004400 	.word	0x40004400

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f001 fabe 	bl	8003d7c <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20005000 	.word	0x20005000
 800282c:	00000400 	.word	0x00000400
 8002830:	200003e0 	.word	0x200003e0
 8002834:	20000400 	.word	0x20000400

08002838 <SYS_ClearTick>:
 */
#include "systick.h"

volatile uint32_t uwTick;

void SYS_ClearTick(void) {
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
	uwTick = 0;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <SYS_ClearTick+0x14>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200003ec 	.word	0x200003ec

08002850 <SYS_IncTick>:

void SYS_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	uwTick ++;
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SYS_IncTick+0x18>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	4a03      	ldr	r2, [pc, #12]	; (8002868 <SYS_IncTick+0x18>)
 800285c:	6013      	str	r3, [r2, #0]
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	200003ec 	.word	0x200003ec

0800286c <SYS_GetTick>:

uint32_t SYS_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
	return uwTick;
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <SYS_GetTick+0x10>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	200003ec 	.word	0x200003ec

08002880 <SYS_ResumeTick>:
	/* Disable SysTick Interrupt */
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}

void SYS_ResumeTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
	/* Enable SysTick Interrupt */
	SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SYS_ResumeTick+0x18>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <SYS_ResumeTick+0x18>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	e000e010 	.word	0xe000e010

0800289c <LL_APB1_GRP1_EnableClock>:
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <LL_APB2_GRP1_EnableClock>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4013      	ands	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	601a      	str	r2, [r3, #0]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
	...

0800291c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d01c      	beq.n	8002966 <LL_TIM_OC_DisableFast+0x4a>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b04      	cmp	r3, #4
 8002930:	d017      	beq.n	8002962 <LL_TIM_OC_DisableFast+0x46>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b10      	cmp	r3, #16
 8002936:	d012      	beq.n	800295e <LL_TIM_OC_DisableFast+0x42>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d00d      	beq.n	800295a <LL_TIM_OC_DisableFast+0x3e>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002944:	d007      	beq.n	8002956 <LL_TIM_OC_DisableFast+0x3a>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d101      	bne.n	8002952 <LL_TIM_OC_DisableFast+0x36>
 800294e:	2305      	movs	r3, #5
 8002950:	e00a      	b.n	8002968 <LL_TIM_OC_DisableFast+0x4c>
 8002952:	2306      	movs	r3, #6
 8002954:	e008      	b.n	8002968 <LL_TIM_OC_DisableFast+0x4c>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <LL_TIM_OC_DisableFast+0x4c>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <LL_TIM_OC_DisableFast+0x4c>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <LL_TIM_OC_DisableFast+0x4c>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <LL_TIM_OC_DisableFast+0x4c>
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3318      	adds	r3, #24
 800296e:	4619      	mov	r1, r3
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <LL_TIM_OC_DisableFast+0x80>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	440b      	add	r3, r1
 8002978:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <LL_TIM_OC_DisableFast+0x84>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	4619      	mov	r1, r3
 8002986:	2304      	movs	r3, #4
 8002988:	408b      	lsls	r3, r1
 800298a:	43db      	mvns	r3, r3
 800298c:	401a      	ands	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	601a      	str	r2, [r3, #0]

}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	08004788 	.word	0x08004788
 80029a0:	08004790 	.word	0x08004790

080029a4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d01c      	beq.n	80029ee <LL_TIM_OC_EnablePreload+0x4a>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d017      	beq.n	80029ea <LL_TIM_OC_EnablePreload+0x46>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d012      	beq.n	80029e6 <LL_TIM_OC_EnablePreload+0x42>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d00d      	beq.n	80029e2 <LL_TIM_OC_EnablePreload+0x3e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029cc:	d007      	beq.n	80029de <LL_TIM_OC_EnablePreload+0x3a>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d101      	bne.n	80029da <LL_TIM_OC_EnablePreload+0x36>
 80029d6:	2305      	movs	r3, #5
 80029d8:	e00a      	b.n	80029f0 <LL_TIM_OC_EnablePreload+0x4c>
 80029da:	2306      	movs	r3, #6
 80029dc:	e008      	b.n	80029f0 <LL_TIM_OC_EnablePreload+0x4c>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <LL_TIM_OC_EnablePreload+0x4c>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <LL_TIM_OC_EnablePreload+0x4c>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <LL_TIM_OC_EnablePreload+0x4c>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <LL_TIM_OC_EnablePreload+0x4c>
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3318      	adds	r3, #24
 80029f6:	4619      	mov	r1, r3
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <LL_TIM_OC_EnablePreload+0x80>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	440b      	add	r3, r1
 8002a00:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <LL_TIM_OC_EnablePreload+0x84>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2308      	movs	r3, #8
 8002a10:	408b      	lsls	r3, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	08004788 	.word	0x08004788
 8002a28:	08004790 	.word	0x08004790

08002a2c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
	...

08002a98 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b092      	sub	sp, #72	; 0x48
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f98a 	bl	8003dd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	463b      	mov	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002aca:	2002      	movs	r0, #2
 8002acc:	f7ff fee6 	bl	800289c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 114;
 8002ad0:	2372      	movs	r3, #114	; 0x72
 8002ad2:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 2004;
 8002ad8:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002ae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4843      	ldr	r0, [pc, #268]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002aea:	f000 fdef 	bl	80036cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002aee:	4842      	ldr	r0, [pc, #264]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002af0:	f7ff ff04 	bl	80028fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002af4:	2100      	movs	r1, #0
 8002af6:	4840      	ldr	r0, [pc, #256]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002af8:	f7ff ff98 	bl	8002a2c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8002afc:	2101      	movs	r1, #1
 8002afe:	483e      	ldr	r0, [pc, #248]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b00:	f7ff ff50 	bl	80029a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002b04:	2360      	movs	r3, #96	; 0x60
 8002b06:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 990;
 8002b10:	f240 33de 	movw	r3, #990	; 0x3de
 8002b14:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2101      	movs	r1, #1
 8002b22:	4835      	ldr	r0, [pc, #212]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b24:	f000 fe30 	bl	8003788 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4833      	ldr	r0, [pc, #204]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b2c:	f7ff fef6 	bl	800291c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8002b30:	2110      	movs	r1, #16
 8002b32:	4831      	ldr	r0, [pc, #196]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b34:	f7ff ff36 	bl	80029a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 1001;
 8002b38:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002b3c:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	461a      	mov	r2, r3
 8002b44:	2110      	movs	r1, #16
 8002b46:	482c      	ldr	r0, [pc, #176]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b48:	f000 fe1e 	bl	8003788 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	482a      	ldr	r0, [pc, #168]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b50:	f7ff fee4 	bl	800291c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8002b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b58:	4827      	ldr	r0, [pc, #156]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b5a:	f7ff ff23 	bl	80029a4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b68:	4823      	ldr	r0, [pc, #140]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b6a:	f000 fe0d 	bl	8003788 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8002b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b72:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b74:	f7ff fed2 	bl	800291c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b7c:	481e      	ldr	r0, [pc, #120]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b7e:	f7ff ff11 	bl	80029a4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	461a      	mov	r2, r3
 8002b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8c:	481a      	ldr	r0, [pc, #104]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b8e:	f000 fdfb 	bl	8003788 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b96:	4818      	ldr	r0, [pc, #96]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002b98:	f7ff fec0 	bl	800291c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4816      	ldr	r0, [pc, #88]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002ba0:	f7ff ff58 	bl	8002a54 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002ba4:	4814      	ldr	r0, [pc, #80]	; (8002bf8 <MX_TIM3_Init+0x160>)
 8002ba6:	f7ff ff67 	bl	8002a78 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002baa:	2004      	movs	r0, #4
 8002bac:	f7ff fe8e 	bl	80028cc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002bb0:	2008      	movs	r0, #8
 8002bb2:	f7ff fe8b 	bl	80028cc <LL_APB2_GRP1_EnableClock>
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = PWM_SPEED_Pin|PWM_RUDE_Pin;
 8002bb6:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8002bba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bbc:	2309      	movs	r3, #9
 8002bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	463b      	mov	r3, r7
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480b      	ldr	r0, [pc, #44]	; (8002bfc <MX_TIM3_Init+0x164>)
 8002bce:	f000 fb9b 	bl	8003308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM_CAM_YAW_Pin|PWM_CAM_PITCH_Pin;
 8002bd2:	f240 3303 	movw	r3, #771	; 0x303
 8002bd6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bd8:	2309      	movs	r3, #9
 8002bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	463b      	mov	r3, r7
 8002be6:	4619      	mov	r1, r3
 8002be8:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_TIM3_Init+0x168>)
 8002bea:	f000 fb8d 	bl	8003308 <LL_GPIO_Init>

}
 8002bee:	bf00      	nop
 8002bf0:	3748      	adds	r7, #72	; 0x48
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	40010c00 	.word	0x40010c00

08002c04 <__NVIC_GetPriorityGrouping>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <__NVIC_EnableIRQ+0x34>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	; 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <LL_APB1_GRP1_EnableClock>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <LL_APB2_GRP1_EnableClock>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	4907      	ldr	r1, [pc, #28]	; (8002d6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <LL_USART_Enable>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <LL_USART_ConfigAsyncMode>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	615a      	str	r2, [r3, #20]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <LL_USART_EnableIT_RXNE>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <LL_USART_EnableIT_ERROR>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	611a      	str	r2, [r3, #16]
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0e:	463b      	mov	r3, r7
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002e1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e20:	f7ff ff8e 	bl	8002d40 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002e24:	2004      	movs	r0, #4
 8002e26:	f7ff ff8b 	bl	8002d40 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = U1TX_Pin;
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <MX_USART1_UART_Init+0xd0>)
 8002e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e2e:	2309      	movs	r3, #9
 8002e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(U1TX_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4822      	ldr	r0, [pc, #136]	; (8002ec8 <MX_USART1_UART_Init+0xd4>)
 8002e40:	f000 fa62 	bl	8003308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sBUS_Pin;
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <MX_USART1_UART_Init+0xd8>)
 8002e46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(sBUS_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	463b      	mov	r3, r7
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481d      	ldr	r0, [pc, #116]	; (8002ec8 <MX_USART1_UART_Init+0xd4>)
 8002e52:	f000 fa59 	bl	8003308 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002e56:	f7ff fed5 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff23 	bl	8002cac <NVIC_EncodePriority>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4619      	mov	r1, r3
 8002e6a:	2025      	movs	r0, #37	; 0x25
 8002e6c:	f7ff fef4 	bl	8002c58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002e70:	2025      	movs	r0, #37	; 0x25
 8002e72:	f7ff fed5 	bl	8002c20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_USART1_UART_Init+0xdc>)
 8002e78:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8002e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e84:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8002e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <MX_USART1_UART_Init+0xe0>)
 8002ea0:	f000 fed6 	bl	8003c50 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002ea4:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <MX_USART1_UART_Init+0xe0>)
 8002ea6:	f7ff ff72 	bl	8002d8e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002eaa:	480a      	ldr	r0, [pc, #40]	; (8002ed4 <MX_USART1_UART_Init+0xe0>)
 8002eac:	f7ff ff60 	bl	8002d70 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  LL_USART_EnableIT_RXNE(USART1);
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <MX_USART1_UART_Init+0xe0>)
 8002eb2:	f7ff ff81 	bl	8002db8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 8002eb6:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <MX_USART1_UART_Init+0xe0>)
 8002eb8:	f7ff ff8d 	bl	8002dd6 <LL_USART_EnableIT_ERROR>

  /* USER CODE END USART1_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	04020002 	.word	0x04020002
 8002ec8:	40010800 	.word	0x40010800
 8002ecc:	04040004 	.word	0x04040004
 8002ed0:	000186a0 	.word	0x000186a0
 8002ed4:	40013800 	.word	0x40013800

08002ed8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	611a      	str	r2, [r3, #16]
 8002eee:	615a      	str	r2, [r3, #20]
 8002ef0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002f00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f04:	f7ff ff04 	bl	8002d10 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002f08:	2004      	movs	r0, #4
 8002f0a:	f7ff ff19 	bl	8002d40 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LOG_OUT_Pin;
 8002f0e:	f240 4304 	movw	r3, #1028	; 0x404
 8002f12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f14:	2309      	movs	r3, #9
 8002f16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LOG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002f20:	463b      	mov	r3, r7
 8002f22:	4619      	mov	r1, r3
 8002f24:	4820      	ldr	r0, [pc, #128]	; (8002fa8 <MX_USART2_UART_Init+0xd0>)
 8002f26:	f000 f9ef 	bl	8003308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = U2RX_Pin;
 8002f2a:	f640 0308 	movw	r3, #2056	; 0x808
 8002f2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002f30:	2308      	movs	r3, #8
 8002f32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(U2RX_GPIO_Port, &GPIO_InitStruct);
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	481a      	ldr	r0, [pc, #104]	; (8002fa8 <MX_USART2_UART_Init+0xd0>)
 8002f3e:	f000 f9e3 	bl	8003308 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002f42:	f7ff fe5f 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fead 	bl	8002cac <NVIC_EncodePriority>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4619      	mov	r1, r3
 8002f56:	2026      	movs	r0, #38	; 0x26
 8002f58:	f7ff fe7e 	bl	8002c58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002f5c:	2026      	movs	r0, #38	; 0x26
 8002f5e:	f7ff fe5f 	bl	8002c20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002f62:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f66:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8002f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f72:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8002f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f78:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4807      	ldr	r0, [pc, #28]	; (8002fac <MX_USART2_UART_Init+0xd4>)
 8002f8e:	f000 fe5f 	bl	8003c50 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <MX_USART2_UART_Init+0xd4>)
 8002f94:	f7ff fefb 	bl	8002d8e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002f98:	4804      	ldr	r0, [pc, #16]	; (8002fac <MX_USART2_UART_Init+0xd4>)
 8002f9a:	f7ff fee9 	bl	8002d70 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	3730      	adds	r7, #48	; 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	40004400 	.word	0x40004400

08002fb0 <USART2_RX_Callback>:
{
	// Override this
}

__weak void USART2_RX_Callback(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
	// Override this
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <FLASH_Unlock+0x18>)
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <FLASH_Unlock+0x1c>)
 8002fd0:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8002fd2:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <FLASH_Unlock+0x18>)
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <FLASH_Unlock+0x20>)
 8002fd6:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	45670123 	.word	0x45670123
 8002fe8:	cdef89ab 	.word	0xcdef89ab

08002fec <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002ff8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002ffc:	f000 f8aa 	bl	8003154 <FLASH_WaitForLastOperation>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b04      	cmp	r3, #4
 8003008:	d11b      	bne.n	8003042 <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <FLASH_ErasePage+0x60>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <FLASH_ErasePage+0x60>)
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8003016:	4a0d      	ldr	r2, [pc, #52]	; (800304c <FLASH_ErasePage+0x60>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <FLASH_ErasePage+0x60>)
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <FLASH_ErasePage+0x60>)
 8003022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003026:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003028:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800302c:	f000 f892 	bl	8003154 <FLASH_WaitForLastOperation>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <FLASH_ErasePage+0x60>)
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <FLASH_ErasePage+0x60>)
 800303a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800303e:	4013      	ands	r3, r2
 8003040:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40022000 	.word	0x40022000

08003050 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800305c:	2304      	movs	r3, #4
 800305e:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003060:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003064:	f000 f876 	bl	8003154 <FLASH_WaitForLastOperation>
 8003068:	4603      	mov	r3, r0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d115      	bne.n	800309e <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <FLASH_ProgramHalfWord+0x58>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <FLASH_ProgramHalfWord+0x58>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003088:	f000 f864 	bl	8003154 <FLASH_WaitForLastOperation>
 800308c:	4603      	mov	r3, r0
 800308e:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <FLASH_ProgramHalfWord+0x58>)
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	4904      	ldr	r1, [pc, #16]	; (80030a8 <FLASH_ProgramHalfWord+0x58>)
 8003096:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800309a:	4013      	ands	r3, r2
 800309c:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40022000 	.word	0x40022000

080030ac <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetStatus(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80030b2:	2304      	movs	r3, #4
 80030b4:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <FLASH_GetStatus+0x50>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 80030c2:	2301      	movs	r3, #1
 80030c4:	71fb      	strb	r3, [r7, #7]
 80030c6:	e013      	b.n	80030f0 <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <FLASH_GetStatus+0x50>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 80030d4:	2302      	movs	r3, #2
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	e00a      	b.n	80030f0 <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <FLASH_GetStatus+0x50>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <FLASH_GetStatus+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 80030e6:	2303      	movs	r3, #3
 80030e8:	71fb      	strb	r3, [r7, #7]
 80030ea:	e001      	b.n	80030f0 <FLASH_GetStatus+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80030ec:	2304      	movs	r3, #4
 80030ee:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 80030f0:	79fb      	ldrb	r3, [r7, #7]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40022000 	.word	0x40022000

08003100 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8003106:	2304      	movs	r3, #4
 8003108:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <FLASH_GetBank1Status+0x50>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8003116:	2301      	movs	r3, #1
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	e013      	b.n	8003144 <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <FLASH_GetBank1Status+0x50>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8003128:	2302      	movs	r3, #2
 800312a:	71fb      	strb	r3, [r7, #7]
 800312c:	e00a      	b.n	8003144 <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <FLASH_GetBank1Status+0x50>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 800313a:	2303      	movs	r3, #3
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	e001      	b.n	8003144 <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8003140:	2304      	movs	r3, #4
 8003142:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8003144:	79fb      	ldrb	r3, [r7, #7]
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40022000 	.word	0x40022000

08003154 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 800315c:	2304      	movs	r3, #4
 800315e:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8003160:	f7ff ffce 	bl	8003100 <FLASH_GetBank1Status>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8003168:	e006      	b.n	8003178 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 800316a:	f7ff ffc9 	bl	8003100 <FLASH_GetBank1Status>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3b01      	subs	r3, #1
 8003176:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <FLASH_WaitForLastOperation+0x30>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f2      	bne.n	800316a <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 800318a:	2305      	movs	r3, #5
 800318c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <LL_GPIO_SetPinMode>:
{
 8003198:	b490      	push	{r4, r7}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0e1b      	lsrs	r3, r3, #24
 80031ac:	4413      	add	r3, r2
 80031ae:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80031b0:	6822      	ldr	r2, [r4, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	210f      	movs	r1, #15
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	401a      	ands	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	61bb      	str	r3, [r7, #24]
  return result;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	6023      	str	r3, [r4, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc90      	pop	{r4, r7}
 80031fa:	4770      	bx	lr

080031fc <LL_GPIO_SetPinSpeed>:
{
 80031fc:	b490      	push	{r4, r7}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	0e1b      	lsrs	r3, r3, #24
 8003210:	4413      	add	r3, r2
 8003212:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	613b      	str	r3, [r7, #16]
  return result;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	2103      	movs	r1, #3
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	61bb      	str	r3, [r7, #24]
  return result;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	6023      	str	r3, [r4, #0]
}
 8003256:	bf00      	nop
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bc90      	pop	{r4, r7}
 800325e:	4770      	bx	lr

08003260 <LL_GPIO_SetPinOutputType>:
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0e1b      	lsrs	r3, r3, #24
 8003274:	4413      	add	r3, r2
 8003276:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	613b      	str	r3, [r7, #16]
  return result;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	2104      	movs	r1, #4
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	401a      	ands	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	61bb      	str	r3, [r7, #24]
  return result;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	6023      	str	r3, [r4, #0]
}
 80032ba:	bf00      	nop
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc90      	pop	{r4, r7}
 80032c2:	4770      	bx	lr

080032c4 <LL_GPIO_SetPinPull>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	613b      	str	r3, [r7, #16]
  return result;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	408b      	lsls	r3, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	60da      	str	r2, [r3, #12]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	60fb      	str	r3, [r7, #12]
  return result;
 8003328:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003332:	e044      	b.n	80033be <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003334:	2201      	movs	r2, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	409a      	lsls	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03a      	beq.n	80033b8 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b07      	cmp	r3, #7
 8003346:	d806      	bhi.n	8003356 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003348:	f240 1201 	movw	r2, #257	; 0x101
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	e008      	b.n	8003368 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b08      	subs	r3, #8
 800335a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003366:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d106      	bne.n	800337e <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	461a      	mov	r2, r3
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ffa3 	bl	80032c4 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ff06 	bl	8003198 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d003      	beq.n	800339c <LL_GPIO_Init+0x94>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b09      	cmp	r3, #9
 800339a:	d10d      	bne.n	80033b8 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	461a      	mov	r2, r3
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff29 	bl	80031fc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	69b9      	ldr	r1, [r7, #24]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ff54 	bl	8003260 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	3301      	adds	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1b4      	bne.n	8003334 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <LL_RCC_GetSysClkSource>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <LL_RCC_GetSysClkSource+0x14>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000

080033ec <LL_RCC_GetAHBPrescaler>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <LL_RCC_GetAHBPrescaler+0x14>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	40021000 	.word	0x40021000

08003404 <LL_RCC_GetAPB1Prescaler>:
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <LL_RCC_GetAPB1Prescaler+0x14>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	40021000 	.word	0x40021000

0800341c <LL_RCC_GetAPB2Prescaler>:
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40021000 	.word	0x40021000

08003434 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <LL_RCC_PLL_GetMainSource+0x14>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40021000 	.word	0x40021000

0800344c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40021000 	.word	0x40021000

08003464 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <LL_RCC_PLL_GetPrediv+0x18>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0c5b      	lsrs	r3, r3, #17
 800346e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003488:	f000 f820 	bl	80034cc <RCC_GetSystemClockFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f83e 	bl	8003518 <RCC_GetHCLKClockFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f84c 	bl	8003544 <RCC_GetPCLK1ClockFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f858 	bl	800356c <RCC_GetPCLK2ClockFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60da      	str	r2, [r3, #12]
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80034d6:	f7ff ff7d 	bl	80033d4 <LL_RCC_GetSysClkSource>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d00c      	beq.n	80034fa <RCC_GetSystemClockFreq+0x2e>
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d80e      	bhi.n	8003502 <RCC_GetSystemClockFreq+0x36>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <RCC_GetSystemClockFreq+0x22>
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d003      	beq.n	80034f4 <RCC_GetSystemClockFreq+0x28>
 80034ec:	e009      	b.n	8003502 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <RCC_GetSystemClockFreq+0x48>)
 80034f0:	607b      	str	r3, [r7, #4]
      break;
 80034f2:	e009      	b.n	8003508 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <RCC_GetSystemClockFreq+0x48>)
 80034f6:	607b      	str	r3, [r7, #4]
      break;
 80034f8:	e006      	b.n	8003508 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80034fa:	f000 f84b 	bl	8003594 <RCC_PLL_GetFreqDomain_SYS>
 80034fe:	6078      	str	r0, [r7, #4]
      break;
 8003500:	e002      	b.n	8003508 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <RCC_GetSystemClockFreq+0x48>)
 8003504:	607b      	str	r3, [r7, #4]
      break;
 8003506:	bf00      	nop
  }

  return frequency;
 8003508:	687b      	ldr	r3, [r7, #4]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	007a1200 	.word	0x007a1200

08003518 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003520:	f7ff ff64 	bl	80033ec <LL_RCC_GetAHBPrescaler>
 8003524:	4603      	mov	r3, r0
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	4a04      	ldr	r2, [pc, #16]	; (8003540 <RCC_GetHCLKClockFreq+0x28>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	461a      	mov	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	40d3      	lsrs	r3, r2
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08004798 	.word	0x08004798

08003544 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800354c:	f7ff ff5a 	bl	8003404 <LL_RCC_GetAPB1Prescaler>
 8003550:	4603      	mov	r3, r0
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <RCC_GetPCLK1ClockFreq+0x24>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	40d3      	lsrs	r3, r2
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	080047a8 	.word	0x080047a8

0800356c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003574:	f7ff ff52 	bl	800341c <LL_RCC_GetAPB2Prescaler>
 8003578:	4603      	mov	r3, r0
 800357a:	0adb      	lsrs	r3, r3, #11
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <RCC_GetPCLK2ClockFreq+0x24>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	40d3      	lsrs	r3, r2
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	080047a8 	.word	0x080047a8

08003594 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	2300      	movs	r3, #0
 80035a0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80035a2:	f7ff ff47 	bl	8003434 <LL_RCC_PLL_GetMainSource>
 80035a6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d004      	beq.n	80035b8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d003      	beq.n	80035be <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80035b6:	e00b      	b.n	80035d0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80035ba:	607b      	str	r3, [r7, #4]
      break;
 80035bc:	e00b      	b.n	80035d6 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80035be:	f7ff ff51 	bl	8003464 <LL_RCC_PLL_GetPrediv>
 80035c2:	4603      	mov	r3, r0
 80035c4:	3301      	adds	r3, #1
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	607b      	str	r3, [r7, #4]
      break;
 80035ce:	e002      	b.n	80035d6 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80035d2:	607b      	str	r3, [r7, #4]
      break;
 80035d4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80035d6:	f7ff ff39 	bl	800344c <LL_RCC_PLL_GetMultiplicator>
 80035da:	4603      	mov	r3, r0
 80035dc:	0c9b      	lsrs	r3, r3, #18
 80035de:	3302      	adds	r3, #2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	003d0900 	.word	0x003d0900
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <LL_TIM_SetPrescaler>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <LL_TIM_SetAutoReload>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <LL_TIM_SetRepetitionCounter>:
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <LL_TIM_OC_SetCompareCH1>:
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <LL_TIM_OC_SetCompareCH2>:
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <LL_TIM_OC_SetCompareCH3>:
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <LL_TIM_OC_SetCompareCH4>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	615a      	str	r2, [r3, #20]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a27      	ldr	r2, [pc, #156]	; (800377c <LL_TIM_Init+0xb0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <LL_TIM_Init+0x30>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d007      	beq.n	80036fc <LL_TIM_Init+0x30>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a24      	ldr	r2, [pc, #144]	; (8003780 <LL_TIM_Init+0xb4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <LL_TIM_Init+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <LL_TIM_Init+0xb8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d106      	bne.n	800370a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <LL_TIM_Init+0xb0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00b      	beq.n	800372a <LL_TIM_Init+0x5e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d007      	beq.n	800372a <LL_TIM_Init+0x5e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <LL_TIM_Init+0xb4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <LL_TIM_Init+0x5e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a17      	ldr	r2, [pc, #92]	; (8003784 <LL_TIM_Init+0xb8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d106      	bne.n	8003738 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff64 	bl	8003612 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff51 	bl	80035f8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <LL_TIM_Init+0xb0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d105      	bne.n	800376a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff61 	bl	800362c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff9f 	bl	80036ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800

08003788 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d027      	beq.n	80037f0 <LL_TIM_OC_Init+0x68>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a6:	d82a      	bhi.n	80037fe <LL_TIM_OC_Init+0x76>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ae:	d018      	beq.n	80037e2 <LL_TIM_OC_Init+0x5a>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b6:	d822      	bhi.n	80037fe <LL_TIM_OC_Init+0x76>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d003      	beq.n	80037c6 <LL_TIM_OC_Init+0x3e>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d007      	beq.n	80037d4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80037c4:	e01b      	b.n	80037fe <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f81f 	bl	800380c <OC1Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	75fb      	strb	r3, [r7, #23]
      break;
 80037d2:	e015      	b.n	8003800 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f87e 	bl	80038d8 <OC2Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	75fb      	strb	r3, [r7, #23]
      break;
 80037e0:	e00e      	b.n	8003800 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f8e1 	bl	80039ac <OC3Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]
      break;
 80037ee:	e007      	b.n	8003800 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f944 	bl	8003a80 <OC4Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
      break;
 80037fc:	e000      	b.n	8003800 <LL_TIM_OC_Init+0x78>
      break;
 80037fe:	bf00      	nop
  }

  return result;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0201 	bic.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 0202 	bic.w	r2, r3, #2
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <OC1Config+0xc8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d11e      	bne.n	80038ac <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0208 	bic.w	r2, r3, #8
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 0204 	bic.w	r2, r3, #4
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fec1 	bl	8003646 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40012c00 	.word	0x40012c00

080038d8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0210 	bic.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0220 	bic.w	r2, r3, #32
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0210 	bic.w	r2, r3, #16
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <OC2Config+0xd0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d11f      	bne.n	8003980 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	019b      	lsls	r3, r3, #6
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	019b      	lsls	r3, r3, #6
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fe64 	bl	8003660 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40012c00 	.word	0x40012c00

080039ac <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <OC3Config+0xd0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d11f      	bne.n	8003a52 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	015b      	lsls	r3, r3, #5
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fe08 	bl	800367a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00

08003a80 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	031b      	lsls	r3, r3, #12
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	031b      	lsls	r3, r3, #12
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <OC4Config+0xa0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d107      	bne.n	8003af8 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	019b      	lsls	r3, r3, #6
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fdc2 	bl	8003694 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40012c00 	.word	0x40012c00

08003b24 <LL_USART_IsEnabled>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <LL_USART_SetStopBitsLength>:
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <LL_USART_SetHWFlowCtrl>:
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	615a      	str	r2, [r3, #20]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
	...

08003b94 <LL_USART_SetBaudRate>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009a      	lsls	r2, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <LL_USART_SetBaudRate+0xb8>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	b299      	uxth	r1, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009a      	lsls	r2, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <LL_USART_SetBaudRate+0xb8>)
 8003bd8:	fba3 0302 	umull	r0, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2064      	movs	r0, #100	; 0x64
 8003be0:	fb00 f303 	mul.w	r3, r0, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	3332      	adds	r3, #50	; 0x32
 8003bea:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <LL_USART_SetBaudRate+0xb8>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <LL_USART_SetBaudRate+0xb8>)
 8003c14:	fba3 0302 	umull	r0, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2064      	movs	r0, #100	; 0x64
 8003c1c:	fb00 f303 	mul.w	r3, r0, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <LL_USART_SetBaudRate+0xb8>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	440b      	add	r3, r1
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ff5e 	bl	8003b24 <LL_USART_IsEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d145      	bne.n	8003cfa <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c76:	f023 030c 	bic.w	r3, r3, #12
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6851      	ldr	r1, [r2, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	4311      	orrs	r1, r2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6912      	ldr	r2, [r2, #16]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff57 	bl	8003b4a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ff63 	bl	8003b6e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ca8:	f107 0308 	add.w	r3, r7, #8
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fbe7 	bl	8003480 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <LL_USART_Init+0xb4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d102      	bne.n	8003cc0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e00c      	b.n	8003cda <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <LL_USART_Init+0xb8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e005      	b.n	8003cda <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <LL_USART_Init+0xbc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff4d 	bl	8003b94 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	40004800 	.word	0x40004800

08003d10 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <LL_InitTick+0x30>)
 8003d24:	3b01      	subs	r3, #1
 8003d26:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <LL_InitTick+0x30>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <LL_InitTick+0x30>)
 8003d30:	2205      	movs	r2, #5
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ffdd 	bl	8003d10 <LL_InitTick>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d68:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <LL_SetSystemCoreClock+0x18>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000028 	.word	0x20000028

08003d7c <__errno>:
 8003d7c:	4b01      	ldr	r3, [pc, #4]	; (8003d84 <__errno+0x8>)
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2000002c 	.word	0x2000002c

08003d88 <__libc_init_array>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	4d0c      	ldr	r5, [pc, #48]	; (8003dc0 <__libc_init_array+0x38>)
 8003d8e:	4c0d      	ldr	r4, [pc, #52]	; (8003dc4 <__libc_init_array+0x3c>)
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	42a6      	cmp	r6, r4
 8003d96:	d109      	bne.n	8003dac <__libc_init_array+0x24>
 8003d98:	f000 fc5c 	bl	8004654 <_init>
 8003d9c:	2600      	movs	r6, #0
 8003d9e:	4d0a      	ldr	r5, [pc, #40]	; (8003dc8 <__libc_init_array+0x40>)
 8003da0:	4c0a      	ldr	r4, [pc, #40]	; (8003dcc <__libc_init_array+0x44>)
 8003da2:	1b64      	subs	r4, r4, r5
 8003da4:	10a4      	asrs	r4, r4, #2
 8003da6:	42a6      	cmp	r6, r4
 8003da8:	d105      	bne.n	8003db6 <__libc_init_array+0x2e>
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db0:	4798      	blx	r3
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7ee      	b.n	8003d94 <__libc_init_array+0xc>
 8003db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dba:	4798      	blx	r3
 8003dbc:	3601      	adds	r6, #1
 8003dbe:	e7f2      	b.n	8003da6 <__libc_init_array+0x1e>
 8003dc0:	080047e4 	.word	0x080047e4
 8003dc4:	080047e4 	.word	0x080047e4
 8003dc8:	080047e4 	.word	0x080047e4
 8003dcc:	080047e8 	.word	0x080047e8

08003dd0 <memset>:
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4402      	add	r2, r0
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d100      	bne.n	8003dda <memset+0xa>
 8003dd8:	4770      	bx	lr
 8003dda:	f803 1b01 	strb.w	r1, [r3], #1
 8003dde:	e7f9      	b.n	8003dd4 <memset+0x4>

08003de0 <siprintf>:
 8003de0:	b40e      	push	{r1, r2, r3}
 8003de2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003de6:	b500      	push	{lr}
 8003de8:	b09c      	sub	sp, #112	; 0x70
 8003dea:	ab1d      	add	r3, sp, #116	; 0x74
 8003dec:	9002      	str	r0, [sp, #8]
 8003dee:	9006      	str	r0, [sp, #24]
 8003df0:	9107      	str	r1, [sp, #28]
 8003df2:	9104      	str	r1, [sp, #16]
 8003df4:	4808      	ldr	r0, [pc, #32]	; (8003e18 <siprintf+0x38>)
 8003df6:	4909      	ldr	r1, [pc, #36]	; (8003e1c <siprintf+0x3c>)
 8003df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfc:	9105      	str	r1, [sp, #20]
 8003dfe:	6800      	ldr	r0, [r0, #0]
 8003e00:	a902      	add	r1, sp, #8
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	f000 f868 	bl	8003ed8 <_svfiprintf_r>
 8003e08:	2200      	movs	r2, #0
 8003e0a:	9b02      	ldr	r3, [sp, #8]
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	b01c      	add	sp, #112	; 0x70
 8003e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e14:	b003      	add	sp, #12
 8003e16:	4770      	bx	lr
 8003e18:	2000002c 	.word	0x2000002c
 8003e1c:	ffff0208 	.word	0xffff0208

08003e20 <__ssputs_r>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	688e      	ldr	r6, [r1, #8]
 8003e26:	4682      	mov	sl, r0
 8003e28:	429e      	cmp	r6, r3
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	461f      	mov	r7, r3
 8003e30:	d838      	bhi.n	8003ea4 <__ssputs_r+0x84>
 8003e32:	898a      	ldrh	r2, [r1, #12]
 8003e34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e38:	d032      	beq.n	8003ea0 <__ssputs_r+0x80>
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	6909      	ldr	r1, [r1, #16]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	eba5 0901 	sub.w	r9, r5, r1
 8003e44:	6965      	ldr	r5, [r4, #20]
 8003e46:	444b      	add	r3, r9
 8003e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e50:	106d      	asrs	r5, r5, #1
 8003e52:	429d      	cmp	r5, r3
 8003e54:	bf38      	it	cc
 8003e56:	461d      	movcc	r5, r3
 8003e58:	0553      	lsls	r3, r2, #21
 8003e5a:	d531      	bpl.n	8003ec0 <__ssputs_r+0xa0>
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f000 fb53 	bl	8004508 <_malloc_r>
 8003e62:	4606      	mov	r6, r0
 8003e64:	b950      	cbnz	r0, 8003e7c <__ssputs_r+0x5c>
 8003e66:	230c      	movs	r3, #12
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	f8ca 3000 	str.w	r3, [sl]
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e76:	81a3      	strh	r3, [r4, #12]
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7c:	464a      	mov	r2, r9
 8003e7e:	6921      	ldr	r1, [r4, #16]
 8003e80:	f000 face 	bl	8004420 <memcpy>
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	6126      	str	r6, [r4, #16]
 8003e92:	444e      	add	r6, r9
 8003e94:	6026      	str	r6, [r4, #0]
 8003e96:	463e      	mov	r6, r7
 8003e98:	6165      	str	r5, [r4, #20]
 8003e9a:	eba5 0509 	sub.w	r5, r5, r9
 8003e9e:	60a5      	str	r5, [r4, #8]
 8003ea0:	42be      	cmp	r6, r7
 8003ea2:	d900      	bls.n	8003ea6 <__ssputs_r+0x86>
 8003ea4:	463e      	mov	r6, r7
 8003ea6:	4632      	mov	r2, r6
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	f000 fac6 	bl	800443c <memmove>
 8003eb0:	68a3      	ldr	r3, [r4, #8]
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	1b9b      	subs	r3, r3, r6
 8003eb6:	4432      	add	r2, r6
 8003eb8:	2000      	movs	r0, #0
 8003eba:	60a3      	str	r3, [r4, #8]
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	e7db      	b.n	8003e78 <__ssputs_r+0x58>
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	f000 fb7b 	bl	80045bc <_realloc_r>
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1e1      	bne.n	8003e90 <__ssputs_r+0x70>
 8003ecc:	4650      	mov	r0, sl
 8003ece:	6921      	ldr	r1, [r4, #16]
 8003ed0:	f000 face 	bl	8004470 <_free_r>
 8003ed4:	e7c7      	b.n	8003e66 <__ssputs_r+0x46>
	...

08003ed8 <_svfiprintf_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	4698      	mov	r8, r3
 8003ede:	898b      	ldrh	r3, [r1, #12]
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	460d      	mov	r5, r1
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	b09d      	sub	sp, #116	; 0x74
 8003eea:	d50e      	bpl.n	8003f0a <_svfiprintf_r+0x32>
 8003eec:	690b      	ldr	r3, [r1, #16]
 8003eee:	b963      	cbnz	r3, 8003f0a <_svfiprintf_r+0x32>
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	f000 fb09 	bl	8004508 <_malloc_r>
 8003ef6:	6028      	str	r0, [r5, #0]
 8003ef8:	6128      	str	r0, [r5, #16]
 8003efa:	b920      	cbnz	r0, 8003f06 <_svfiprintf_r+0x2e>
 8003efc:	230c      	movs	r3, #12
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	e0d1      	b.n	80040aa <_svfiprintf_r+0x1d2>
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	616b      	str	r3, [r5, #20]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0e:	2320      	movs	r3, #32
 8003f10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f14:	2330      	movs	r3, #48	; 0x30
 8003f16:	f04f 0901 	mov.w	r9, #1
 8003f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040c4 <_svfiprintf_r+0x1ec>
 8003f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f26:	4623      	mov	r3, r4
 8003f28:	469a      	mov	sl, r3
 8003f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f2e:	b10a      	cbz	r2, 8003f34 <_svfiprintf_r+0x5c>
 8003f30:	2a25      	cmp	r2, #37	; 0x25
 8003f32:	d1f9      	bne.n	8003f28 <_svfiprintf_r+0x50>
 8003f34:	ebba 0b04 	subs.w	fp, sl, r4
 8003f38:	d00b      	beq.n	8003f52 <_svfiprintf_r+0x7a>
 8003f3a:	465b      	mov	r3, fp
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4638      	mov	r0, r7
 8003f42:	f7ff ff6d 	bl	8003e20 <__ssputs_r>
 8003f46:	3001      	adds	r0, #1
 8003f48:	f000 80aa 	beq.w	80040a0 <_svfiprintf_r+0x1c8>
 8003f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f4e:	445a      	add	r2, fp
 8003f50:	9209      	str	r2, [sp, #36]	; 0x24
 8003f52:	f89a 3000 	ldrb.w	r3, [sl]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80a2 	beq.w	80040a0 <_svfiprintf_r+0x1c8>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f66:	f10a 0a01 	add.w	sl, sl, #1
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	9307      	str	r3, [sp, #28]
 8003f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f72:	931a      	str	r3, [sp, #104]	; 0x68
 8003f74:	4654      	mov	r4, sl
 8003f76:	2205      	movs	r2, #5
 8003f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7c:	4851      	ldr	r0, [pc, #324]	; (80040c4 <_svfiprintf_r+0x1ec>)
 8003f7e:	f000 fa41 	bl	8004404 <memchr>
 8003f82:	9a04      	ldr	r2, [sp, #16]
 8003f84:	b9d8      	cbnz	r0, 8003fbe <_svfiprintf_r+0xe6>
 8003f86:	06d0      	lsls	r0, r2, #27
 8003f88:	bf44      	itt	mi
 8003f8a:	2320      	movmi	r3, #32
 8003f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f90:	0711      	lsls	r1, r2, #28
 8003f92:	bf44      	itt	mi
 8003f94:	232b      	movmi	r3, #43	; 0x2b
 8003f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa0:	d015      	beq.n	8003fce <_svfiprintf_r+0xf6>
 8003fa2:	4654      	mov	r4, sl
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f04f 0c0a 	mov.w	ip, #10
 8003faa:	9a07      	ldr	r2, [sp, #28]
 8003fac:	4621      	mov	r1, r4
 8003fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb2:	3b30      	subs	r3, #48	; 0x30
 8003fb4:	2b09      	cmp	r3, #9
 8003fb6:	d94e      	bls.n	8004056 <_svfiprintf_r+0x17e>
 8003fb8:	b1b0      	cbz	r0, 8003fe8 <_svfiprintf_r+0x110>
 8003fba:	9207      	str	r2, [sp, #28]
 8003fbc:	e014      	b.n	8003fe8 <_svfiprintf_r+0x110>
 8003fbe:	eba0 0308 	sub.w	r3, r0, r8
 8003fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	46a2      	mov	sl, r4
 8003fca:	9304      	str	r3, [sp, #16]
 8003fcc:	e7d2      	b.n	8003f74 <_svfiprintf_r+0x9c>
 8003fce:	9b03      	ldr	r3, [sp, #12]
 8003fd0:	1d19      	adds	r1, r3, #4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	9103      	str	r1, [sp, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bfbb      	ittet	lt
 8003fda:	425b      	neglt	r3, r3
 8003fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe0:	9307      	strge	r3, [sp, #28]
 8003fe2:	9307      	strlt	r3, [sp, #28]
 8003fe4:	bfb8      	it	lt
 8003fe6:	9204      	strlt	r2, [sp, #16]
 8003fe8:	7823      	ldrb	r3, [r4, #0]
 8003fea:	2b2e      	cmp	r3, #46	; 0x2e
 8003fec:	d10c      	bne.n	8004008 <_svfiprintf_r+0x130>
 8003fee:	7863      	ldrb	r3, [r4, #1]
 8003ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff2:	d135      	bne.n	8004060 <_svfiprintf_r+0x188>
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	3402      	adds	r4, #2
 8003ff8:	1d1a      	adds	r2, r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	9203      	str	r2, [sp, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfb8      	it	lt
 8004002:	f04f 33ff 	movlt.w	r3, #4294967295
 8004006:	9305      	str	r3, [sp, #20]
 8004008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040d4 <_svfiprintf_r+0x1fc>
 800400c:	2203      	movs	r2, #3
 800400e:	4650      	mov	r0, sl
 8004010:	7821      	ldrb	r1, [r4, #0]
 8004012:	f000 f9f7 	bl	8004404 <memchr>
 8004016:	b140      	cbz	r0, 800402a <_svfiprintf_r+0x152>
 8004018:	2340      	movs	r3, #64	; 0x40
 800401a:	eba0 000a 	sub.w	r0, r0, sl
 800401e:	fa03 f000 	lsl.w	r0, r3, r0
 8004022:	9b04      	ldr	r3, [sp, #16]
 8004024:	3401      	adds	r4, #1
 8004026:	4303      	orrs	r3, r0
 8004028:	9304      	str	r3, [sp, #16]
 800402a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402e:	2206      	movs	r2, #6
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <_svfiprintf_r+0x1f0>)
 8004032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004036:	f000 f9e5 	bl	8004404 <memchr>
 800403a:	2800      	cmp	r0, #0
 800403c:	d038      	beq.n	80040b0 <_svfiprintf_r+0x1d8>
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <_svfiprintf_r+0x1f4>)
 8004040:	bb1b      	cbnz	r3, 800408a <_svfiprintf_r+0x1b2>
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	3307      	adds	r3, #7
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	3308      	adds	r3, #8
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004050:	4433      	add	r3, r6
 8004052:	9309      	str	r3, [sp, #36]	; 0x24
 8004054:	e767      	b.n	8003f26 <_svfiprintf_r+0x4e>
 8004056:	460c      	mov	r4, r1
 8004058:	2001      	movs	r0, #1
 800405a:	fb0c 3202 	mla	r2, ip, r2, r3
 800405e:	e7a5      	b.n	8003fac <_svfiprintf_r+0xd4>
 8004060:	2300      	movs	r3, #0
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4619      	mov	r1, r3
 8004068:	3401      	adds	r4, #1
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	4620      	mov	r0, r4
 800406e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004072:	3a30      	subs	r2, #48	; 0x30
 8004074:	2a09      	cmp	r2, #9
 8004076:	d903      	bls.n	8004080 <_svfiprintf_r+0x1a8>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0c5      	beq.n	8004008 <_svfiprintf_r+0x130>
 800407c:	9105      	str	r1, [sp, #20]
 800407e:	e7c3      	b.n	8004008 <_svfiprintf_r+0x130>
 8004080:	4604      	mov	r4, r0
 8004082:	2301      	movs	r3, #1
 8004084:	fb0c 2101 	mla	r1, ip, r1, r2
 8004088:	e7f0      	b.n	800406c <_svfiprintf_r+0x194>
 800408a:	ab03      	add	r3, sp, #12
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	462a      	mov	r2, r5
 8004090:	4638      	mov	r0, r7
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <_svfiprintf_r+0x1f8>)
 8004094:	a904      	add	r1, sp, #16
 8004096:	f3af 8000 	nop.w
 800409a:	1c42      	adds	r2, r0, #1
 800409c:	4606      	mov	r6, r0
 800409e:	d1d6      	bne.n	800404e <_svfiprintf_r+0x176>
 80040a0:	89ab      	ldrh	r3, [r5, #12]
 80040a2:	065b      	lsls	r3, r3, #25
 80040a4:	f53f af2c 	bmi.w	8003f00 <_svfiprintf_r+0x28>
 80040a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040aa:	b01d      	add	sp, #116	; 0x74
 80040ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	462a      	mov	r2, r5
 80040b6:	4638      	mov	r0, r7
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <_svfiprintf_r+0x1f8>)
 80040ba:	a904      	add	r1, sp, #16
 80040bc:	f000 f87c 	bl	80041b8 <_printf_i>
 80040c0:	e7eb      	b.n	800409a <_svfiprintf_r+0x1c2>
 80040c2:	bf00      	nop
 80040c4:	080047b0 	.word	0x080047b0
 80040c8:	080047ba 	.word	0x080047ba
 80040cc:	00000000 	.word	0x00000000
 80040d0:	08003e21 	.word	0x08003e21
 80040d4:	080047b6 	.word	0x080047b6

080040d8 <_printf_common>:
 80040d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	4616      	mov	r6, r2
 80040de:	4699      	mov	r9, r3
 80040e0:	688a      	ldr	r2, [r1, #8]
 80040e2:	690b      	ldr	r3, [r1, #16]
 80040e4:	4607      	mov	r7, r0
 80040e6:	4293      	cmp	r3, r2
 80040e8:	bfb8      	it	lt
 80040ea:	4613      	movlt	r3, r2
 80040ec:	6033      	str	r3, [r6, #0]
 80040ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040f2:	460c      	mov	r4, r1
 80040f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f8:	b10a      	cbz	r2, 80040fe <_printf_common+0x26>
 80040fa:	3301      	adds	r3, #1
 80040fc:	6033      	str	r3, [r6, #0]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	0699      	lsls	r1, r3, #26
 8004102:	bf42      	ittt	mi
 8004104:	6833      	ldrmi	r3, [r6, #0]
 8004106:	3302      	addmi	r3, #2
 8004108:	6033      	strmi	r3, [r6, #0]
 800410a:	6825      	ldr	r5, [r4, #0]
 800410c:	f015 0506 	ands.w	r5, r5, #6
 8004110:	d106      	bne.n	8004120 <_printf_common+0x48>
 8004112:	f104 0a19 	add.w	sl, r4, #25
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	6832      	ldr	r2, [r6, #0]
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	42ab      	cmp	r3, r5
 800411e:	dc28      	bgt.n	8004172 <_printf_common+0x9a>
 8004120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004124:	1e13      	subs	r3, r2, #0
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	bf18      	it	ne
 800412a:	2301      	movne	r3, #1
 800412c:	0692      	lsls	r2, r2, #26
 800412e:	d42d      	bmi.n	800418c <_printf_common+0xb4>
 8004130:	4649      	mov	r1, r9
 8004132:	4638      	mov	r0, r7
 8004134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004138:	47c0      	blx	r8
 800413a:	3001      	adds	r0, #1
 800413c:	d020      	beq.n	8004180 <_printf_common+0xa8>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	68e5      	ldr	r5, [r4, #12]
 8004142:	f003 0306 	and.w	r3, r3, #6
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf18      	it	ne
 800414a:	2500      	movne	r5, #0
 800414c:	6832      	ldr	r2, [r6, #0]
 800414e:	f04f 0600 	mov.w	r6, #0
 8004152:	68a3      	ldr	r3, [r4, #8]
 8004154:	bf08      	it	eq
 8004156:	1aad      	subeq	r5, r5, r2
 8004158:	6922      	ldr	r2, [r4, #16]
 800415a:	bf08      	it	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	4293      	cmp	r3, r2
 8004162:	bfc4      	itt	gt
 8004164:	1a9b      	subgt	r3, r3, r2
 8004166:	18ed      	addgt	r5, r5, r3
 8004168:	341a      	adds	r4, #26
 800416a:	42b5      	cmp	r5, r6
 800416c:	d11a      	bne.n	80041a4 <_printf_common+0xcc>
 800416e:	2000      	movs	r0, #0
 8004170:	e008      	b.n	8004184 <_printf_common+0xac>
 8004172:	2301      	movs	r3, #1
 8004174:	4652      	mov	r2, sl
 8004176:	4649      	mov	r1, r9
 8004178:	4638      	mov	r0, r7
 800417a:	47c0      	blx	r8
 800417c:	3001      	adds	r0, #1
 800417e:	d103      	bne.n	8004188 <_printf_common+0xb0>
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004188:	3501      	adds	r5, #1
 800418a:	e7c4      	b.n	8004116 <_printf_common+0x3e>
 800418c:	2030      	movs	r0, #48	; 0x30
 800418e:	18e1      	adds	r1, r4, r3
 8004190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800419a:	4422      	add	r2, r4
 800419c:	3302      	adds	r3, #2
 800419e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a2:	e7c5      	b.n	8004130 <_printf_common+0x58>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4622      	mov	r2, r4
 80041a8:	4649      	mov	r1, r9
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0e6      	beq.n	8004180 <_printf_common+0xa8>
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7d9      	b.n	800416a <_printf_common+0x92>
	...

080041b8 <_printf_i>:
 80041b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	460c      	mov	r4, r1
 80041be:	7e27      	ldrb	r7, [r4, #24]
 80041c0:	4691      	mov	r9, r2
 80041c2:	2f78      	cmp	r7, #120	; 0x78
 80041c4:	4680      	mov	r8, r0
 80041c6:	469a      	mov	sl, r3
 80041c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ce:	d807      	bhi.n	80041e0 <_printf_i+0x28>
 80041d0:	2f62      	cmp	r7, #98	; 0x62
 80041d2:	d80a      	bhi.n	80041ea <_printf_i+0x32>
 80041d4:	2f00      	cmp	r7, #0
 80041d6:	f000 80d9 	beq.w	800438c <_printf_i+0x1d4>
 80041da:	2f58      	cmp	r7, #88	; 0x58
 80041dc:	f000 80a4 	beq.w	8004328 <_printf_i+0x170>
 80041e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041e8:	e03a      	b.n	8004260 <_printf_i+0xa8>
 80041ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ee:	2b15      	cmp	r3, #21
 80041f0:	d8f6      	bhi.n	80041e0 <_printf_i+0x28>
 80041f2:	a001      	add	r0, pc, #4	; (adr r0, 80041f8 <_printf_i+0x40>)
 80041f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004265 	.word	0x08004265
 8004200:	080041e1 	.word	0x080041e1
 8004204:	080041e1 	.word	0x080041e1
 8004208:	080041e1 	.word	0x080041e1
 800420c:	080041e1 	.word	0x080041e1
 8004210:	08004265 	.word	0x08004265
 8004214:	080041e1 	.word	0x080041e1
 8004218:	080041e1 	.word	0x080041e1
 800421c:	080041e1 	.word	0x080041e1
 8004220:	080041e1 	.word	0x080041e1
 8004224:	08004373 	.word	0x08004373
 8004228:	08004295 	.word	0x08004295
 800422c:	08004355 	.word	0x08004355
 8004230:	080041e1 	.word	0x080041e1
 8004234:	080041e1 	.word	0x080041e1
 8004238:	08004395 	.word	0x08004395
 800423c:	080041e1 	.word	0x080041e1
 8004240:	08004295 	.word	0x08004295
 8004244:	080041e1 	.word	0x080041e1
 8004248:	080041e1 	.word	0x080041e1
 800424c:	0800435d 	.word	0x0800435d
 8004250:	680b      	ldr	r3, [r1, #0]
 8004252:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	600a      	str	r2, [r1, #0]
 800425c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004260:	2301      	movs	r3, #1
 8004262:	e0a4      	b.n	80043ae <_printf_i+0x1f6>
 8004264:	6825      	ldr	r5, [r4, #0]
 8004266:	6808      	ldr	r0, [r1, #0]
 8004268:	062e      	lsls	r6, r5, #24
 800426a:	f100 0304 	add.w	r3, r0, #4
 800426e:	d50a      	bpl.n	8004286 <_printf_i+0xce>
 8004270:	6805      	ldr	r5, [r0, #0]
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	2d00      	cmp	r5, #0
 8004276:	da03      	bge.n	8004280 <_printf_i+0xc8>
 8004278:	232d      	movs	r3, #45	; 0x2d
 800427a:	426d      	negs	r5, r5
 800427c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004280:	230a      	movs	r3, #10
 8004282:	485e      	ldr	r0, [pc, #376]	; (80043fc <_printf_i+0x244>)
 8004284:	e019      	b.n	80042ba <_printf_i+0x102>
 8004286:	f015 0f40 	tst.w	r5, #64	; 0x40
 800428a:	6805      	ldr	r5, [r0, #0]
 800428c:	600b      	str	r3, [r1, #0]
 800428e:	bf18      	it	ne
 8004290:	b22d      	sxthne	r5, r5
 8004292:	e7ef      	b.n	8004274 <_printf_i+0xbc>
 8004294:	680b      	ldr	r3, [r1, #0]
 8004296:	6825      	ldr	r5, [r4, #0]
 8004298:	1d18      	adds	r0, r3, #4
 800429a:	6008      	str	r0, [r1, #0]
 800429c:	0628      	lsls	r0, r5, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xec>
 80042a0:	681d      	ldr	r5, [r3, #0]
 80042a2:	e002      	b.n	80042aa <_printf_i+0xf2>
 80042a4:	0669      	lsls	r1, r5, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xe8>
 80042a8:	881d      	ldrh	r5, [r3, #0]
 80042aa:	2f6f      	cmp	r7, #111	; 0x6f
 80042ac:	bf0c      	ite	eq
 80042ae:	2308      	moveq	r3, #8
 80042b0:	230a      	movne	r3, #10
 80042b2:	4852      	ldr	r0, [pc, #328]	; (80043fc <_printf_i+0x244>)
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ba:	6866      	ldr	r6, [r4, #4]
 80042bc:	2e00      	cmp	r6, #0
 80042be:	bfa8      	it	ge
 80042c0:	6821      	ldrge	r1, [r4, #0]
 80042c2:	60a6      	str	r6, [r4, #8]
 80042c4:	bfa4      	itt	ge
 80042c6:	f021 0104 	bicge.w	r1, r1, #4
 80042ca:	6021      	strge	r1, [r4, #0]
 80042cc:	b90d      	cbnz	r5, 80042d2 <_printf_i+0x11a>
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	d04d      	beq.n	800436e <_printf_i+0x1b6>
 80042d2:	4616      	mov	r6, r2
 80042d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d8:	fb03 5711 	mls	r7, r3, r1, r5
 80042dc:	5dc7      	ldrb	r7, [r0, r7]
 80042de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e2:	462f      	mov	r7, r5
 80042e4:	42bb      	cmp	r3, r7
 80042e6:	460d      	mov	r5, r1
 80042e8:	d9f4      	bls.n	80042d4 <_printf_i+0x11c>
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d10b      	bne.n	8004306 <_printf_i+0x14e>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	07df      	lsls	r7, r3, #31
 80042f2:	d508      	bpl.n	8004306 <_printf_i+0x14e>
 80042f4:	6923      	ldr	r3, [r4, #16]
 80042f6:	6861      	ldr	r1, [r4, #4]
 80042f8:	4299      	cmp	r1, r3
 80042fa:	bfde      	ittt	le
 80042fc:	2330      	movle	r3, #48	; 0x30
 80042fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004302:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004306:	1b92      	subs	r2, r2, r6
 8004308:	6122      	str	r2, [r4, #16]
 800430a:	464b      	mov	r3, r9
 800430c:	4621      	mov	r1, r4
 800430e:	4640      	mov	r0, r8
 8004310:	f8cd a000 	str.w	sl, [sp]
 8004314:	aa03      	add	r2, sp, #12
 8004316:	f7ff fedf 	bl	80040d8 <_printf_common>
 800431a:	3001      	adds	r0, #1
 800431c:	d14c      	bne.n	80043b8 <_printf_i+0x200>
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	b004      	add	sp, #16
 8004324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004328:	4834      	ldr	r0, [pc, #208]	; (80043fc <_printf_i+0x244>)
 800432a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800432e:	680e      	ldr	r6, [r1, #0]
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	f856 5b04 	ldr.w	r5, [r6], #4
 8004336:	061f      	lsls	r7, r3, #24
 8004338:	600e      	str	r6, [r1, #0]
 800433a:	d514      	bpl.n	8004366 <_printf_i+0x1ae>
 800433c:	07d9      	lsls	r1, r3, #31
 800433e:	bf44      	itt	mi
 8004340:	f043 0320 	orrmi.w	r3, r3, #32
 8004344:	6023      	strmi	r3, [r4, #0]
 8004346:	b91d      	cbnz	r5, 8004350 <_printf_i+0x198>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	f023 0320 	bic.w	r3, r3, #32
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	2310      	movs	r3, #16
 8004352:	e7af      	b.n	80042b4 <_printf_i+0xfc>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	f043 0320 	orr.w	r3, r3, #32
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	2378      	movs	r3, #120	; 0x78
 800435e:	4828      	ldr	r0, [pc, #160]	; (8004400 <_printf_i+0x248>)
 8004360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004364:	e7e3      	b.n	800432e <_printf_i+0x176>
 8004366:	065e      	lsls	r6, r3, #25
 8004368:	bf48      	it	mi
 800436a:	b2ad      	uxthmi	r5, r5
 800436c:	e7e6      	b.n	800433c <_printf_i+0x184>
 800436e:	4616      	mov	r6, r2
 8004370:	e7bb      	b.n	80042ea <_printf_i+0x132>
 8004372:	680b      	ldr	r3, [r1, #0]
 8004374:	6826      	ldr	r6, [r4, #0]
 8004376:	1d1d      	adds	r5, r3, #4
 8004378:	6960      	ldr	r0, [r4, #20]
 800437a:	600d      	str	r5, [r1, #0]
 800437c:	0635      	lsls	r5, r6, #24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	d501      	bpl.n	8004386 <_printf_i+0x1ce>
 8004382:	6018      	str	r0, [r3, #0]
 8004384:	e002      	b.n	800438c <_printf_i+0x1d4>
 8004386:	0671      	lsls	r1, r6, #25
 8004388:	d5fb      	bpl.n	8004382 <_printf_i+0x1ca>
 800438a:	8018      	strh	r0, [r3, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	4616      	mov	r6, r2
 8004390:	6123      	str	r3, [r4, #16]
 8004392:	e7ba      	b.n	800430a <_printf_i+0x152>
 8004394:	680b      	ldr	r3, [r1, #0]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	600a      	str	r2, [r1, #0]
 800439a:	681e      	ldr	r6, [r3, #0]
 800439c:	2100      	movs	r1, #0
 800439e:	4630      	mov	r0, r6
 80043a0:	6862      	ldr	r2, [r4, #4]
 80043a2:	f000 f82f 	bl	8004404 <memchr>
 80043a6:	b108      	cbz	r0, 80043ac <_printf_i+0x1f4>
 80043a8:	1b80      	subs	r0, r0, r6
 80043aa:	6060      	str	r0, [r4, #4]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	2300      	movs	r3, #0
 80043b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b6:	e7a8      	b.n	800430a <_printf_i+0x152>
 80043b8:	4632      	mov	r2, r6
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	47d0      	blx	sl
 80043c2:	3001      	adds	r0, #1
 80043c4:	d0ab      	beq.n	800431e <_printf_i+0x166>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	079b      	lsls	r3, r3, #30
 80043ca:	d413      	bmi.n	80043f4 <_printf_i+0x23c>
 80043cc:	68e0      	ldr	r0, [r4, #12]
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	4298      	cmp	r0, r3
 80043d2:	bfb8      	it	lt
 80043d4:	4618      	movlt	r0, r3
 80043d6:	e7a4      	b.n	8004322 <_printf_i+0x16a>
 80043d8:	2301      	movs	r3, #1
 80043da:	4632      	mov	r2, r6
 80043dc:	4649      	mov	r1, r9
 80043de:	4640      	mov	r0, r8
 80043e0:	47d0      	blx	sl
 80043e2:	3001      	adds	r0, #1
 80043e4:	d09b      	beq.n	800431e <_printf_i+0x166>
 80043e6:	3501      	adds	r5, #1
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	9903      	ldr	r1, [sp, #12]
 80043ec:	1a5b      	subs	r3, r3, r1
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	dcf2      	bgt.n	80043d8 <_printf_i+0x220>
 80043f2:	e7eb      	b.n	80043cc <_printf_i+0x214>
 80043f4:	2500      	movs	r5, #0
 80043f6:	f104 0619 	add.w	r6, r4, #25
 80043fa:	e7f5      	b.n	80043e8 <_printf_i+0x230>
 80043fc:	080047c1 	.word	0x080047c1
 8004400:	080047d2 	.word	0x080047d2

08004404 <memchr>:
 8004404:	4603      	mov	r3, r0
 8004406:	b510      	push	{r4, lr}
 8004408:	b2c9      	uxtb	r1, r1
 800440a:	4402      	add	r2, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	4618      	mov	r0, r3
 8004410:	d101      	bne.n	8004416 <memchr+0x12>
 8004412:	2000      	movs	r0, #0
 8004414:	e003      	b.n	800441e <memchr+0x1a>
 8004416:	7804      	ldrb	r4, [r0, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	428c      	cmp	r4, r1
 800441c:	d1f6      	bne.n	800440c <memchr+0x8>
 800441e:	bd10      	pop	{r4, pc}

08004420 <memcpy>:
 8004420:	440a      	add	r2, r1
 8004422:	4291      	cmp	r1, r2
 8004424:	f100 33ff 	add.w	r3, r0, #4294967295
 8004428:	d100      	bne.n	800442c <memcpy+0xc>
 800442a:	4770      	bx	lr
 800442c:	b510      	push	{r4, lr}
 800442e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004432:	4291      	cmp	r1, r2
 8004434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004438:	d1f9      	bne.n	800442e <memcpy+0xe>
 800443a:	bd10      	pop	{r4, pc}

0800443c <memmove>:
 800443c:	4288      	cmp	r0, r1
 800443e:	b510      	push	{r4, lr}
 8004440:	eb01 0402 	add.w	r4, r1, r2
 8004444:	d902      	bls.n	800444c <memmove+0x10>
 8004446:	4284      	cmp	r4, r0
 8004448:	4623      	mov	r3, r4
 800444a:	d807      	bhi.n	800445c <memmove+0x20>
 800444c:	1e43      	subs	r3, r0, #1
 800444e:	42a1      	cmp	r1, r4
 8004450:	d008      	beq.n	8004464 <memmove+0x28>
 8004452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800445a:	e7f8      	b.n	800444e <memmove+0x12>
 800445c:	4601      	mov	r1, r0
 800445e:	4402      	add	r2, r0
 8004460:	428a      	cmp	r2, r1
 8004462:	d100      	bne.n	8004466 <memmove+0x2a>
 8004464:	bd10      	pop	{r4, pc}
 8004466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800446a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800446e:	e7f7      	b.n	8004460 <memmove+0x24>

08004470 <_free_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4605      	mov	r5, r0
 8004474:	2900      	cmp	r1, #0
 8004476:	d043      	beq.n	8004500 <_free_r+0x90>
 8004478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447c:	1f0c      	subs	r4, r1, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfb8      	it	lt
 8004482:	18e4      	addlt	r4, r4, r3
 8004484:	f000 f8d0 	bl	8004628 <__malloc_lock>
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <_free_r+0x94>)
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	4610      	mov	r0, r2
 800448e:	b933      	cbnz	r3, 800449e <_free_r+0x2e>
 8004490:	6063      	str	r3, [r4, #4]
 8004492:	6014      	str	r4, [r2, #0]
 8004494:	4628      	mov	r0, r5
 8004496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800449a:	f000 b8cb 	b.w	8004634 <__malloc_unlock>
 800449e:	42a3      	cmp	r3, r4
 80044a0:	d90a      	bls.n	80044b8 <_free_r+0x48>
 80044a2:	6821      	ldr	r1, [r4, #0]
 80044a4:	1862      	adds	r2, r4, r1
 80044a6:	4293      	cmp	r3, r2
 80044a8:	bf01      	itttt	eq
 80044aa:	681a      	ldreq	r2, [r3, #0]
 80044ac:	685b      	ldreq	r3, [r3, #4]
 80044ae:	1852      	addeq	r2, r2, r1
 80044b0:	6022      	streq	r2, [r4, #0]
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	6004      	str	r4, [r0, #0]
 80044b6:	e7ed      	b.n	8004494 <_free_r+0x24>
 80044b8:	461a      	mov	r2, r3
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	b10b      	cbz	r3, 80044c2 <_free_r+0x52>
 80044be:	42a3      	cmp	r3, r4
 80044c0:	d9fa      	bls.n	80044b8 <_free_r+0x48>
 80044c2:	6811      	ldr	r1, [r2, #0]
 80044c4:	1850      	adds	r0, r2, r1
 80044c6:	42a0      	cmp	r0, r4
 80044c8:	d10b      	bne.n	80044e2 <_free_r+0x72>
 80044ca:	6820      	ldr	r0, [r4, #0]
 80044cc:	4401      	add	r1, r0
 80044ce:	1850      	adds	r0, r2, r1
 80044d0:	4283      	cmp	r3, r0
 80044d2:	6011      	str	r1, [r2, #0]
 80044d4:	d1de      	bne.n	8004494 <_free_r+0x24>
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4401      	add	r1, r0
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	6053      	str	r3, [r2, #4]
 80044e0:	e7d8      	b.n	8004494 <_free_r+0x24>
 80044e2:	d902      	bls.n	80044ea <_free_r+0x7a>
 80044e4:	230c      	movs	r3, #12
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	e7d4      	b.n	8004494 <_free_r+0x24>
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1821      	adds	r1, r4, r0
 80044ee:	428b      	cmp	r3, r1
 80044f0:	bf01      	itttt	eq
 80044f2:	6819      	ldreq	r1, [r3, #0]
 80044f4:	685b      	ldreq	r3, [r3, #4]
 80044f6:	1809      	addeq	r1, r1, r0
 80044f8:	6021      	streq	r1, [r4, #0]
 80044fa:	6063      	str	r3, [r4, #4]
 80044fc:	6054      	str	r4, [r2, #4]
 80044fe:	e7c9      	b.n	8004494 <_free_r+0x24>
 8004500:	bd38      	pop	{r3, r4, r5, pc}
 8004502:	bf00      	nop
 8004504:	200003e4 	.word	0x200003e4

08004508 <_malloc_r>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	1ccd      	adds	r5, r1, #3
 800450c:	f025 0503 	bic.w	r5, r5, #3
 8004510:	3508      	adds	r5, #8
 8004512:	2d0c      	cmp	r5, #12
 8004514:	bf38      	it	cc
 8004516:	250c      	movcc	r5, #12
 8004518:	2d00      	cmp	r5, #0
 800451a:	4606      	mov	r6, r0
 800451c:	db01      	blt.n	8004522 <_malloc_r+0x1a>
 800451e:	42a9      	cmp	r1, r5
 8004520:	d903      	bls.n	800452a <_malloc_r+0x22>
 8004522:	230c      	movs	r3, #12
 8004524:	6033      	str	r3, [r6, #0]
 8004526:	2000      	movs	r0, #0
 8004528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452a:	f000 f87d 	bl	8004628 <__malloc_lock>
 800452e:	4921      	ldr	r1, [pc, #132]	; (80045b4 <_malloc_r+0xac>)
 8004530:	680a      	ldr	r2, [r1, #0]
 8004532:	4614      	mov	r4, r2
 8004534:	b99c      	cbnz	r4, 800455e <_malloc_r+0x56>
 8004536:	4f20      	ldr	r7, [pc, #128]	; (80045b8 <_malloc_r+0xb0>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b923      	cbnz	r3, 8004546 <_malloc_r+0x3e>
 800453c:	4621      	mov	r1, r4
 800453e:	4630      	mov	r0, r6
 8004540:	f000 f862 	bl	8004608 <_sbrk_r>
 8004544:	6038      	str	r0, [r7, #0]
 8004546:	4629      	mov	r1, r5
 8004548:	4630      	mov	r0, r6
 800454a:	f000 f85d 	bl	8004608 <_sbrk_r>
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	d123      	bne.n	800459a <_malloc_r+0x92>
 8004552:	230c      	movs	r3, #12
 8004554:	4630      	mov	r0, r6
 8004556:	6033      	str	r3, [r6, #0]
 8004558:	f000 f86c 	bl	8004634 <__malloc_unlock>
 800455c:	e7e3      	b.n	8004526 <_malloc_r+0x1e>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	1b5b      	subs	r3, r3, r5
 8004562:	d417      	bmi.n	8004594 <_malloc_r+0x8c>
 8004564:	2b0b      	cmp	r3, #11
 8004566:	d903      	bls.n	8004570 <_malloc_r+0x68>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	441c      	add	r4, r3
 800456c:	6025      	str	r5, [r4, #0]
 800456e:	e004      	b.n	800457a <_malloc_r+0x72>
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	42a2      	cmp	r2, r4
 8004574:	bf0c      	ite	eq
 8004576:	600b      	streq	r3, [r1, #0]
 8004578:	6053      	strne	r3, [r2, #4]
 800457a:	4630      	mov	r0, r6
 800457c:	f000 f85a 	bl	8004634 <__malloc_unlock>
 8004580:	f104 000b 	add.w	r0, r4, #11
 8004584:	1d23      	adds	r3, r4, #4
 8004586:	f020 0007 	bic.w	r0, r0, #7
 800458a:	1ac2      	subs	r2, r0, r3
 800458c:	d0cc      	beq.n	8004528 <_malloc_r+0x20>
 800458e:	1a1b      	subs	r3, r3, r0
 8004590:	50a3      	str	r3, [r4, r2]
 8004592:	e7c9      	b.n	8004528 <_malloc_r+0x20>
 8004594:	4622      	mov	r2, r4
 8004596:	6864      	ldr	r4, [r4, #4]
 8004598:	e7cc      	b.n	8004534 <_malloc_r+0x2c>
 800459a:	1cc4      	adds	r4, r0, #3
 800459c:	f024 0403 	bic.w	r4, r4, #3
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d0e3      	beq.n	800456c <_malloc_r+0x64>
 80045a4:	1a21      	subs	r1, r4, r0
 80045a6:	4630      	mov	r0, r6
 80045a8:	f000 f82e 	bl	8004608 <_sbrk_r>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d1dd      	bne.n	800456c <_malloc_r+0x64>
 80045b0:	e7cf      	b.n	8004552 <_malloc_r+0x4a>
 80045b2:	bf00      	nop
 80045b4:	200003e4 	.word	0x200003e4
 80045b8:	200003e8 	.word	0x200003e8

080045bc <_realloc_r>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	4607      	mov	r7, r0
 80045c0:	4614      	mov	r4, r2
 80045c2:	460e      	mov	r6, r1
 80045c4:	b921      	cbnz	r1, 80045d0 <_realloc_r+0x14>
 80045c6:	4611      	mov	r1, r2
 80045c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045cc:	f7ff bf9c 	b.w	8004508 <_malloc_r>
 80045d0:	b922      	cbnz	r2, 80045dc <_realloc_r+0x20>
 80045d2:	f7ff ff4d 	bl	8004470 <_free_r>
 80045d6:	4625      	mov	r5, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045dc:	f000 f830 	bl	8004640 <_malloc_usable_size_r>
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d20f      	bcs.n	8004604 <_realloc_r+0x48>
 80045e4:	4621      	mov	r1, r4
 80045e6:	4638      	mov	r0, r7
 80045e8:	f7ff ff8e 	bl	8004508 <_malloc_r>
 80045ec:	4605      	mov	r5, r0
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d0f2      	beq.n	80045d8 <_realloc_r+0x1c>
 80045f2:	4631      	mov	r1, r6
 80045f4:	4622      	mov	r2, r4
 80045f6:	f7ff ff13 	bl	8004420 <memcpy>
 80045fa:	4631      	mov	r1, r6
 80045fc:	4638      	mov	r0, r7
 80045fe:	f7ff ff37 	bl	8004470 <_free_r>
 8004602:	e7e9      	b.n	80045d8 <_realloc_r+0x1c>
 8004604:	4635      	mov	r5, r6
 8004606:	e7e7      	b.n	80045d8 <_realloc_r+0x1c>

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	2300      	movs	r3, #0
 800460c:	4d05      	ldr	r5, [pc, #20]	; (8004624 <_sbrk_r+0x1c>)
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fe f8da 	bl	80027cc <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	200003f0 	.word	0x200003f0

08004628 <__malloc_lock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_lock+0x8>)
 800462a:	f000 b811 	b.w	8004650 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	200003f8 	.word	0x200003f8

08004634 <__malloc_unlock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_unlock+0x8>)
 8004636:	f000 b80c 	b.w	8004652 <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	200003f8 	.word	0x200003f8

08004640 <_malloc_usable_size_r>:
 8004640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004644:	1f18      	subs	r0, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfbc      	itt	lt
 800464a:	580b      	ldrlt	r3, [r1, r0]
 800464c:	18c0      	addlt	r0, r0, r3
 800464e:	4770      	bx	lr

08004650 <__retarget_lock_acquire_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_release_recursive>:
 8004652:	4770      	bx	lr

08004654 <_init>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	bf00      	nop
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr

08004660 <_fini>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr
