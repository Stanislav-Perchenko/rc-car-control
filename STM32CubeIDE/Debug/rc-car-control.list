
rc-car-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003918  08003918  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003918  08003918  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000068  08003988  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08003988  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_line   000086e2  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007e10  00000000  00000000  00028773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f91  00000000  00000000  00030583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  00032518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007f0c3  00000000  00000000  00032ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000878  00000000  00000000  000b1f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017c4c  00000000  00000000  000b27e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  000ca488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800367c 	.word	0x0800367c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800367c 	.word	0x0800367c

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 ff37 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f002 fe1b 	bl	8002db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f001 f851 	bl	8001220 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000188:	08003920 	.word	0x08003920
  ldr r2, =_sbss
 800018c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000190:	20000380 	.word	0x20000380

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(uint16_t *all_virt_addr_table, uint16_t all_virt_addr_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]
	VirtAddVarTab = all_virt_addr_table;
 80001a4:	4a9f      	ldr	r2, [pc, #636]	; (8000424 <EE_Init+0x28c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6013      	str	r3, [r2, #0]
	EepromTotalDataSize = all_virt_addr_size;
 80001aa:	4a9f      	ldr	r2, [pc, #636]	; (8000428 <EE_Init+0x290>)
 80001ac:	887b      	ldrh	r3, [r7, #2]
 80001ae:	8013      	strh	r3, [r2, #0]

  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80001b0:	2306      	movs	r3, #6
 80001b2:	827b      	strh	r3, [r7, #18]
 80001b4:	2306      	movs	r3, #6
 80001b6:	823b      	strh	r3, [r7, #16]
  uint16_t VarIdx = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	81fb      	strh	r3, [r7, #14]
 80001c0:	2300      	movs	r3, #0
 80001c2:	81bb      	strh	r3, [r7, #12]
  int16_t x = -1;
 80001c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c8:	82bb      	strh	r3, [r7, #20]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80001ca:	4b98      	ldr	r3, [pc, #608]	; (800042c <EE_Init+0x294>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	827b      	strh	r3, [r7, #18]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80001d0:	4b97      	ldr	r3, [pc, #604]	; (8000430 <EE_Init+0x298>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	823b      	strh	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80001d6:	8a7b      	ldrh	r3, [r7, #18]
 80001d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001dc:	4293      	cmp	r3, r2
 80001de:	d00b      	beq.n	80001f8 <EE_Init+0x60>
 80001e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80001e4:	f280 8136 	bge.w	8000454 <EE_Init+0x2bc>
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	f000 80b5 	beq.w	8000358 <EE_Init+0x1c0>
 80001ee:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d033      	beq.n	800025e <EE_Init+0xc6>
 80001f6:	e12d      	b.n	8000454 <EE_Init+0x2bc>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d10a      	bne.n	8000214 <EE_Init+0x7c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80001fe:	488b      	ldr	r0, [pc, #556]	; (800042c <EE_Init+0x294>)
 8000200:	f001 ff08 	bl	8002014 <FLASH_ErasePage>
 8000204:	4603      	mov	r3, r0
 8000206:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000208:	897b      	ldrh	r3, [r7, #10]
 800020a:	2b04      	cmp	r3, #4
 800020c:	f000 812b 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000210:	897b      	ldrh	r3, [r7, #10]
 8000212:	e130      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000214:	8a3b      	ldrh	r3, [r7, #16]
 8000216:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800021a:	4293      	cmp	r3, r2
 800021c:	d115      	bne.n	800024a <EE_Init+0xb2>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800021e:	4883      	ldr	r0, [pc, #524]	; (800042c <EE_Init+0x294>)
 8000220:	f001 fef8 	bl	8002014 <FLASH_ErasePage>
 8000224:	4603      	mov	r3, r0
 8000226:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000228:	897b      	ldrh	r3, [r7, #10]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d001      	beq.n	8000232 <EE_Init+0x9a>
        {
          return FlashStatus;
 800022e:	897b      	ldrh	r3, [r7, #10]
 8000230:	e121      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000232:	2100      	movs	r1, #0
 8000234:	487e      	ldr	r0, [pc, #504]	; (8000430 <EE_Init+0x298>)
 8000236:	f001 ff1f 	bl	8002078 <FLASH_ProgramHalfWord>
 800023a:	4603      	mov	r3, r0
 800023c:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800023e:	897b      	ldrh	r3, [r7, #10]
 8000240:	2b04      	cmp	r3, #4
 8000242:	f000 8110 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000246:	897b      	ldrh	r3, [r7, #10]
 8000248:	e115      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800024a:	f000 f9bb 	bl	80005c4 <EE_Format>
 800024e:	4603      	mov	r3, r0
 8000250:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000252:	897b      	ldrh	r3, [r7, #10]
 8000254:	2b04      	cmp	r3, #4
 8000256:	f000 8106 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 800025a:	897b      	ldrh	r3, [r7, #10]
 800025c:	e10b      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800025e:	8a3b      	ldrh	r3, [r7, #16]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d154      	bne.n	800030e <EE_Init+0x176>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000264:	2300      	movs	r3, #0
 8000266:	82fb      	strh	r3, [r7, #22]
 8000268:	e036      	b.n	80002d8 <EE_Init+0x140>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800026a:	4b72      	ldr	r3, [pc, #456]	; (8000434 <EE_Init+0x29c>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	b29a      	uxth	r2, r3
 8000270:	4b6c      	ldr	r3, [pc, #432]	; (8000424 <EE_Init+0x28c>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	8afb      	ldrh	r3, [r7, #22]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	440b      	add	r3, r1
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d101      	bne.n	8000284 <EE_Init+0xec>
          {
            x = VarIdx;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 8000284:	8afa      	ldrh	r2, [r7, #22]
 8000286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800028a:	429a      	cmp	r2, r3
 800028c:	d021      	beq.n	80002d2 <EE_Init+0x13a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800028e:	4b65      	ldr	r3, [pc, #404]	; (8000424 <EE_Init+0x28c>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	8afb      	ldrh	r3, [r7, #22]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4413      	add	r3, r2
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	4967      	ldr	r1, [pc, #412]	; (8000438 <EE_Init+0x2a0>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f8f1 	bl	8000484 <EE_ReadVariable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d012      	beq.n	80002d2 <EE_Init+0x13a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80002ac:	4b5d      	ldr	r3, [pc, #372]	; (8000424 <EE_Init+0x28c>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	8afb      	ldrh	r3, [r7, #22]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	4a5f      	ldr	r2, [pc, #380]	; (8000438 <EE_Init+0x2a0>)
 80002ba:	8812      	ldrh	r2, [r2, #0]
 80002bc:	4611      	mov	r1, r2
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f9ec 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80002c4:	4603      	mov	r3, r0
 80002c6:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d001      	beq.n	80002d2 <EE_Init+0x13a>
              {
                return EepromStatus;
 80002ce:	89fb      	ldrh	r3, [r7, #14]
 80002d0:	e0d1      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3301      	adds	r3, #1
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	4b53      	ldr	r3, [pc, #332]	; (8000428 <EE_Init+0x290>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	8afa      	ldrh	r2, [r7, #22]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3c3      	bcc.n	800026a <EE_Init+0xd2>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	4851      	ldr	r0, [pc, #324]	; (800042c <EE_Init+0x294>)
 80002e6:	f001 fec7 	bl	8002078 <FLASH_ProgramHalfWord>
 80002ea:	4603      	mov	r3, r0
 80002ec:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80002ee:	897b      	ldrh	r3, [r7, #10]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d001      	beq.n	80002f8 <EE_Init+0x160>
        {
          return FlashStatus;
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	e0be      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80002f8:	484d      	ldr	r0, [pc, #308]	; (8000430 <EE_Init+0x298>)
 80002fa:	f001 fe8b 	bl	8002014 <FLASH_ErasePage>
 80002fe:	4603      	mov	r3, r0
 8000300:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000302:	897b      	ldrh	r3, [r7, #10]
 8000304:	2b04      	cmp	r3, #4
 8000306:	f000 80b0 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 800030a:	897b      	ldrh	r3, [r7, #10]
 800030c:	e0b3      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800030e:	8a3b      	ldrh	r3, [r7, #16]
 8000310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000314:	4293      	cmp	r3, r2
 8000316:	d115      	bne.n	8000344 <EE_Init+0x1ac>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000318:	4845      	ldr	r0, [pc, #276]	; (8000430 <EE_Init+0x298>)
 800031a:	f001 fe7b 	bl	8002014 <FLASH_ErasePage>
 800031e:	4603      	mov	r3, r0
 8000320:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000322:	897b      	ldrh	r3, [r7, #10]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d001      	beq.n	800032c <EE_Init+0x194>
        {
          return FlashStatus;
 8000328:	897b      	ldrh	r3, [r7, #10]
 800032a:	e0a4      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800032c:	2100      	movs	r1, #0
 800032e:	483f      	ldr	r0, [pc, #252]	; (800042c <EE_Init+0x294>)
 8000330:	f001 fea2 	bl	8002078 <FLASH_ProgramHalfWord>
 8000334:	4603      	mov	r3, r0
 8000336:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000338:	897b      	ldrh	r3, [r7, #10]
 800033a:	2b04      	cmp	r3, #4
 800033c:	f000 8095 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000340:	897b      	ldrh	r3, [r7, #10]
 8000342:	e098      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000344:	f000 f93e 	bl	80005c4 <EE_Format>
 8000348:	4603      	mov	r3, r0
 800034a:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800034c:	897b      	ldrh	r3, [r7, #10]
 800034e:	2b04      	cmp	r3, #4
 8000350:	f000 808b 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000354:	897b      	ldrh	r3, [r7, #10]
 8000356:	e08e      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000358:	8a3b      	ldrh	r3, [r7, #16]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d109      	bne.n	8000372 <EE_Init+0x1da>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800035e:	f000 f931 	bl	80005c4 <EE_Format>
 8000362:	4603      	mov	r3, r0
 8000364:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	2b04      	cmp	r3, #4
 800036a:	f000 8080 	beq.w	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800036e:	897b      	ldrh	r3, [r7, #10]
 8000370:	e081      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000372:	8a3b      	ldrh	r3, [r7, #16]
 8000374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000378:	4293      	cmp	r3, r2
 800037a:	d109      	bne.n	8000390 <EE_Init+0x1f8>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800037c:	482c      	ldr	r0, [pc, #176]	; (8000430 <EE_Init+0x298>)
 800037e:	f001 fe49 	bl	8002014 <FLASH_ErasePage>
 8000382:	4603      	mov	r3, r0
 8000384:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000386:	897b      	ldrh	r3, [r7, #10]
 8000388:	2b04      	cmp	r3, #4
 800038a:	d070      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800038c:	897b      	ldrh	r3, [r7, #10]
 800038e:	e072      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000390:	2300      	movs	r3, #0
 8000392:	82fb      	strh	r3, [r7, #22]
 8000394:	e036      	b.n	8000404 <EE_Init+0x26c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <EE_Init+0x2a4>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <EE_Init+0x28c>)
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	8afb      	ldrh	r3, [r7, #22]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	440b      	add	r3, r1
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d101      	bne.n	80003b0 <EE_Init+0x218>
          {
            x = VarIdx;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 80003b0:	8afa      	ldrh	r2, [r7, #22]
 80003b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d021      	beq.n	80003fe <EE_Init+0x266>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <EE_Init+0x28c>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	8afb      	ldrh	r3, [r7, #22]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	491c      	ldr	r1, [pc, #112]	; (8000438 <EE_Init+0x2a0>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f85b 	bl	8000484 <EE_ReadVariable>
 80003ce:	4603      	mov	r3, r0
 80003d0:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80003d2:	89bb      	ldrh	r3, [r7, #12]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d012      	beq.n	80003fe <EE_Init+0x266>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <EE_Init+0x28c>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <EE_Init+0x2a0>)
 80003e6:	8812      	ldrh	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f956 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80003f0:	4603      	mov	r3, r0
 80003f2:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d001      	beq.n	80003fe <EE_Init+0x266>
              {
                return EepromStatus;
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	e03b      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EE_Init+0x290>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	8afa      	ldrh	r2, [r7, #22]
 800040a:	429a      	cmp	r2, r3
 800040c:	d3c3      	bcc.n	8000396 <EE_Init+0x1fe>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800040e:	2100      	movs	r1, #0
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <EE_Init+0x298>)
 8000412:	f001 fe31 	bl	8002078 <FLASH_ProgramHalfWord>
 8000416:	4603      	mov	r3, r0
 8000418:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800041a:	897b      	ldrh	r3, [r7, #10]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d00f      	beq.n	8000440 <EE_Init+0x2a8>
        {
          return FlashStatus;
 8000420:	897b      	ldrh	r3, [r7, #10]
 8000422:	e028      	b.n	8000476 <EE_Init+0x2de>
 8000424:	20000084 	.word	0x20000084
 8000428:	20000088 	.word	0x20000088
 800042c:	0800f800 	.word	0x0800f800
 8000430:	0800fc00 	.word	0x0800fc00
 8000434:	0800f806 	.word	0x0800f806
 8000438:	2000008a 	.word	0x2000008a
 800043c:	0800fc06 	.word	0x0800fc06
        }
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <EE_Init+0x2e8>)
 8000442:	f001 fde7 	bl	8002014 <FLASH_ErasePage>
 8000446:	4603      	mov	r3, r0
 8000448:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800044a:	897b      	ldrh	r3, [r7, #10]
 800044c:	2b04      	cmp	r3, #4
 800044e:	d00e      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 8000450:	897b      	ldrh	r3, [r7, #10]
 8000452:	e010      	b.n	8000476 <EE_Init+0x2de>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8000454:	f000 f8b6 	bl	80005c4 <EE_Format>
 8000458:	4603      	mov	r3, r0
 800045a:	817b      	strh	r3, [r7, #10]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d007      	beq.n	8000472 <EE_Init+0x2da>
      {
        return FlashStatus;
 8000462:	897b      	ldrh	r3, [r7, #10]
 8000464:	e007      	b.n	8000476 <EE_Init+0x2de>
      break;
 8000466:	bf00      	nop
 8000468:	e004      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046a:	bf00      	nop
 800046c:	e002      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046e:	bf00      	nop
 8000470:	e000      	b.n	8000474 <EE_Init+0x2dc>
      }
      break;
 8000472:	bf00      	nop
  }

  return FLASH_COMPLETE;
 8000474:	2304      	movs	r3, #4
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	0800f800 	.word	0x0800f800

08000484 <EE_ReadVariable>:
  *           - EE_VAR_FOUND: if variable was found
  *           - EE_VAR_NOT_FOUND: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage;
  uint16_t AddressValue;
  uint16_t ReadStatus = EE_VAR_NOT_FOUND;
 8000490:	2301      	movs	r3, #1
 8000492:	83fb      	strh	r3, [r7, #30]
  uint32_t Address;
  uint32_t PageStartAddress;
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <EE_ReadVariable+0xb0>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <EE_ReadVariable+0x20>
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <EE_ReadVariable+0xb4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10c      	bne.n	80004be <EE_ReadVariable+0x3a>
	  return EE_NOT_INITIALIZED;
 80004a4:	23aa      	movs	r3, #170	; 0xaa
 80004a6:	e041      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	dc02      	bgt.n	80004b4 <EE_ReadVariable+0x30>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	da02      	bge.n	80004b8 <EE_ReadVariable+0x34>
 80004b2:	e004      	b.n	80004be <EE_ReadVariable+0x3a>
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d102      	bne.n	80004be <EE_ReadVariable+0x3a>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
	  case FLASH_TIMEOUT:
		  return f_stat;
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	e036      	b.n	800052c <EE_ReadVariable+0xa8>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 80004be:	f001 fe09 	bl	80020d4 <FLASH_GetStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	75fb      	strb	r3, [r7, #23]
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d1ed      	bne.n	80004a8 <EE_ReadVariable+0x24>
	  }
  }


  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 f8a1 	bl	8000614 <EE_FindValidPage>
 80004d2:	4603      	mov	r3, r0
 80004d4:	82bb      	strh	r3, [r7, #20]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80004d6:	8abb      	ldrh	r3, [r7, #20]
 80004d8:	2bab      	cmp	r3, #171	; 0xab
 80004da:	d101      	bne.n	80004e0 <EE_ReadVariable+0x5c>
  {
    return  NO_VALID_PAGE;
 80004dc:	23ab      	movs	r3, #171	; 0xab
 80004de:	e025      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80004e0:	8abb      	ldrh	r3, [r7, #20]
 80004e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80004e6:	333e      	adds	r3, #62	; 0x3e
 80004e8:	029b      	lsls	r3, r3, #10
 80004ea:	613b      	str	r3, [r7, #16]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80004ec:	8abb      	ldrh	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	029a      	lsls	r2, r3, #10
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <EE_ReadVariable+0xb8>)
 80004f4:	4413      	add	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80004f8:	e012      	b.n	8000520 <EE_ReadVariable+0x9c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000500:	89fa      	ldrh	r2, [r7, #14]
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	429a      	cmp	r2, r3
 8000506:	d108      	bne.n	800051a <EE_ReadVariable+0x96>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3b02      	subs	r3, #2
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b29a      	uxth	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = EE_VAR_FOUND;
 8000514:	2300      	movs	r3, #0
 8000516:	83fb      	strh	r3, [r7, #30]

      break;
 8000518:	e007      	b.n	800052a <EE_ReadVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	3b04      	subs	r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
  while (Address > (PageStartAddress + 2))
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	3302      	adds	r3, #2
 8000524:	69ba      	ldr	r2, [r7, #24]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8e7      	bhi.n	80004fa <EE_ReadVariable+0x76>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800052a:	8bfb      	ldrh	r3, [r7, #30]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000088 	.word	0x20000088
 8000538:	20000084 	.word	0x20000084
 800053c:	0800f7fe 	.word	0x0800f7fe

08000540 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	4613      	mov	r3, r2
 800054e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	81fb      	strh	r3, [r7, #14]
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <EE_WriteVariable+0x7c>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d003      	beq.n	8000564 <EE_WriteVariable+0x24>
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <EE_WriteVariable+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10c      	bne.n	800057e <EE_WriteVariable+0x3e>
	  return EE_NOT_INITIALIZED;
 8000564:	23aa      	movs	r3, #170	; 0xaa
 8000566:	e025      	b.n	80005b4 <EE_WriteVariable+0x74>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	2b03      	cmp	r3, #3
 800056c:	dc02      	bgt.n	8000574 <EE_WriteVariable+0x34>
 800056e:	2b02      	cmp	r3, #2
 8000570:	da02      	bge.n	8000578 <EE_WriteVariable+0x38>
 8000572:	e004      	b.n	800057e <EE_WriteVariable+0x3e>
 8000574:	2b05      	cmp	r3, #5
 8000576:	d102      	bne.n	800057e <EE_WriteVariable+0x3e>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
  	  case FLASH_TIMEOUT:
  		  return f_stat;
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	b29b      	uxth	r3, r3
 800057c:	e01a      	b.n	80005b4 <EE_WriteVariable+0x74>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 800057e:	f001 fda9 	bl	80020d4 <FLASH_GetStatus>
 8000582:	4603      	mov	r3, r0
 8000584:	737b      	strb	r3, [r7, #13]
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d1ed      	bne.n	8000568 <EE_WriteVariable+0x28>
	  }
  }

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800058c:	88ba      	ldrh	r2, [r7, #4]
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f882 	bl	800069c <EE_VerifyPageFullWriteVariable>
 8000598:	4603      	mov	r3, r0
 800059a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	2b80      	cmp	r3, #128	; 0x80
 80005a0:	d107      	bne.n	80005b2 <EE_WriteVariable+0x72>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80005a2:	88ba      	ldrh	r2, [r7, #4]
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f8cf 	bl	800074c <EE_PageTransfer>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80005b2:	89fb      	ldrh	r3, [r7, #14]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000088 	.word	0x20000088
 80005c0:	20000084 	.word	0x20000084

080005c4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <EE_Format+0x48>)
 80005d0:	f001 fd20 	bl	8002014 <FLASH_ErasePage>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d001      	beq.n	80005e2 <EE_Format+0x1e>
  {
    return FlashStatus;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	e010      	b.n	8000604 <EE_Format+0x40>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <EE_Format+0x48>)
 80005e6:	f001 fd47 	bl	8002078 <FLASH_ProgramHalfWord>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d001      	beq.n	80005f8 <EE_Format+0x34>
  {
    return FlashStatus;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	e005      	b.n	8000604 <EE_Format+0x40>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <EE_Format+0x4c>)
 80005fa:	f001 fd0b 	bl	8002014 <FLASH_ErasePage>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

  /* Return Page1 erase operation status */
  return FlashStatus;
 8000602:	79fb      	ldrb	r3, [r7, #7]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	0800f800 	.word	0x0800f800
 8000610:	0800fc00 	.word	0x0800fc00

08000614 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800061e:	2306      	movs	r3, #6
 8000620:	81fb      	strh	r3, [r7, #14]
 8000622:	2306      	movs	r3, #6
 8000624:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = *(__IO uint16_t*)PAGE0_BASE_ADDRESS;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <EE_FindValidPage+0x80>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <EE_FindValidPage+0x84>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d01b      	beq.n	8000670 <EE_FindValidPage+0x5c>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d125      	bne.n	8000688 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d108      	bne.n	8000654 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000648:	4293      	cmp	r3, r2
 800064a:	d101      	bne.n	8000650 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800064c:	2300      	movs	r3, #0
 800064e:	e01c      	b.n	800068a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000650:	2301      	movs	r3, #1
 8000652:	e01a      	b.n	800068a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000654:	89fb      	ldrh	r3, [r7, #14]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d108      	bne.n	800066c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800065a:	89bb      	ldrh	r3, [r7, #12]
 800065c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000660:	4293      	cmp	r3, r2
 8000662:	d101      	bne.n	8000668 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000664:	2301      	movs	r3, #1
 8000666:	e010      	b.n	800068a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000668:	2300      	movs	r3, #0
 800066a:	e00e      	b.n	800068a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800066c:	23ab      	movs	r3, #171	; 0xab
 800066e:	e00c      	b.n	800068a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000676:	2300      	movs	r3, #0
 8000678:	e007      	b.n	800068a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000680:	2301      	movs	r3, #1
 8000682:	e002      	b.n	800068a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000684:	23ab      	movs	r3, #171	; 0xab
 8000686:	e000      	b.n	800068a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000688:	2300      	movs	r3, #0
  }
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	0800f800 	.word	0x0800f800
 8000698:	0800fc00 	.word	0x0800fc00

0800069c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80006ac:	2304      	movs	r3, #4
 80006ae:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	823b      	strh	r3, [r7, #16]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <EE_VerifyPageFullWriteVariable+0xa4>)
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <EE_VerifyPageFullWriteVariable+0xa8>)
 80006ba:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffa9 	bl	8000614 <EE_FindValidPage>
 80006c2:	4603      	mov	r3, r0
 80006c4:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80006c6:	8a3b      	ldrh	r3, [r7, #16]
 80006c8:	2bab      	cmp	r3, #171	; 0xab
 80006ca:	d101      	bne.n	80006d0 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80006cc:	23ab      	movs	r3, #171	; 0xab
 80006ce:	e032      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80006d0:	8a3b      	ldrh	r3, [r7, #16]
 80006d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006d6:	333e      	adds	r3, #62	; 0x3e
 80006d8:	029b      	lsls	r3, r3, #10
 80006da:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80006dc:	8a3b      	ldrh	r3, [r7, #16]
 80006de:	3301      	adds	r3, #1
 80006e0:	029a      	lsls	r2, r3, #10
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <EE_VerifyPageFullWriteVariable+0xac>)
 80006e4:	4413      	add	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80006e8:	e020      	b.n	800072c <EE_VerifyPageFullWriteVariable+0x90>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f2:	d118      	bne.n	8000726 <EE_VerifyPageFullWriteVariable+0x8a>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	4619      	mov	r1, r3
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f001 fcbd 	bl	8002078 <FLASH_ProgramHalfWord>
 80006fe:	4603      	mov	r3, r0
 8000700:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d002      	beq.n	800070e <EE_VerifyPageFullWriteVariable+0x72>
      {
        return FlashStatus;
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	b29b      	uxth	r3, r3
 800070c:	e013      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3302      	adds	r3, #2
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fcae 	bl	8002078 <FLASH_ProgramHalfWord>
 800071c:	4603      	mov	r3, r0
 800071e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	b29b      	uxth	r3, r3
 8000724:	e007      	b.n	8000736 <EE_VerifyPageFullWriteVariable+0x9a>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3da      	bcc.n	80006ea <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000734:	2380      	movs	r3, #128	; 0x80
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	08010000 	.word	0x08010000
 8000744:	080107ff 	.word	0x080107ff
 8000748:	0800f7fe 	.word	0x0800f7fe

0800074c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	80fb      	strh	r3, [r7, #6]
 8000758:	4613      	mov	r3, r2
 800075a:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 800075c:	2304      	movs	r3, #4
 800075e:	757b      	strb	r3, [r7, #21]
  uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
 8000760:	4b47      	ldr	r3, [pc, #284]	; (8000880 <EE_PageTransfer+0x134>)
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <EE_PageTransfer+0x138>)
 8000766:	61bb      	str	r3, [r7, #24]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	827b      	strh	r3, [r7, #18]
 800076c:	2300      	movs	r3, #0
 800076e:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	823b      	strh	r3, [r7, #16]
 8000774:	2300      	movs	r3, #0
 8000776:	81fb      	strh	r3, [r7, #14]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff4b 	bl	8000614 <EE_FindValidPage>
 800077e:	4603      	mov	r3, r0
 8000780:	827b      	strh	r3, [r7, #18]

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000782:	8a7b      	ldrh	r3, [r7, #18]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d104      	bne.n	8000792 <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <EE_PageTransfer+0x13c>)
 800078a:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <EE_PageTransfer+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	e009      	b.n	80007a6 <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000792:	8a7b      	ldrh	r3, [r7, #18]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <EE_PageTransfer+0x56>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <EE_PageTransfer+0x140>)
 800079a:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <EE_PageTransfer+0x13c>)
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	e001      	b.n	80007a6 <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80007a2:	23ab      	movs	r3, #171	; 0xab
 80007a4:	e068      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 80007a6:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80007aa:	69f8      	ldr	r0, [r7, #28]
 80007ac:	f001 fc64 	bl	8002078 <FLASH_ProgramHalfWord>
 80007b0:	4603      	mov	r3, r0
 80007b2:	757b      	strb	r3, [r7, #21]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80007b4:	7d7b      	ldrb	r3, [r7, #21]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d002      	beq.n	80007c0 <EE_PageTransfer+0x74>
  {
    return FlashStatus;
 80007ba:	7d7b      	ldrb	r3, [r7, #21]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	e05b      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80007c0:	88ba      	ldrh	r2, [r7, #4]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff68 	bl	800069c <EE_VerifyPageFullWriteVariable>
 80007cc:	4603      	mov	r3, r0
 80007ce:	823b      	strh	r3, [r7, #16]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 80007d0:	8a3b      	ldrh	r3, [r7, #16]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d001      	beq.n	80007da <EE_PageTransfer+0x8e>
  {
    return EepromStatus;
 80007d6:	8a3b      	ldrh	r3, [r7, #16]
 80007d8:	e04e      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	82fb      	strh	r3, [r7, #22]
 80007de:	e02d      	b.n	800083c <EE_PageTransfer+0xf0>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <EE_PageTransfer+0x144>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	8afb      	ldrh	r3, [r7, #22]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	88fa      	ldrh	r2, [r7, #6]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d021      	beq.n	8000836 <EE_PageTransfer+0xea>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <EE_PageTransfer+0x144>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4925      	ldr	r1, [pc, #148]	; (8000894 <EE_PageTransfer+0x148>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe3f 	bl	8000484 <EE_ReadVariable>
 8000806:	4603      	mov	r3, r0
 8000808:	81fb      	strh	r3, [r7, #14]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d012      	beq.n	8000836 <EE_PageTransfer+0xea>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <EE_PageTransfer+0x144>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <EE_PageTransfer+0x148>)
 800081e:	8812      	ldrh	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff3a 	bl	800069c <EE_VerifyPageFullWriteVariable>
 8000828:	4603      	mov	r3, r0
 800082a:	823b      	strh	r3, [r7, #16]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 800082c:	8a3b      	ldrh	r3, [r7, #16]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d001      	beq.n	8000836 <EE_PageTransfer+0xea>
        {
          return EepromStatus;
 8000832:	8a3b      	ldrh	r3, [r7, #16]
 8000834:	e020      	b.n	8000878 <EE_PageTransfer+0x12c>
  for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	3301      	adds	r3, #1
 800083a:	82fb      	strh	r3, [r7, #22]
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <EE_PageTransfer+0x14c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	8afa      	ldrh	r2, [r7, #22]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3cc      	bcc.n	80007e0 <EE_PageTransfer+0x94>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_ErasePage(OldPageAddress);
 8000846:	69b8      	ldr	r0, [r7, #24]
 8000848:	f001 fbe4 	bl	8002014 <FLASH_ErasePage>
 800084c:	4603      	mov	r3, r0
 800084e:	757b      	strb	r3, [r7, #21]
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d002      	beq.n	800085c <EE_PageTransfer+0x110>
  {
    return FlashStatus;
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	b29b      	uxth	r3, r3
 800085a:	e00d      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 800085c:	2100      	movs	r1, #0
 800085e:	69f8      	ldr	r0, [r7, #28]
 8000860:	f001 fc0a 	bl	8002078 <FLASH_ProgramHalfWord>
 8000864:	4603      	mov	r3, r0
 8000866:	757b      	strb	r3, [r7, #21]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d002      	beq.n	8000874 <EE_PageTransfer+0x128>
  {
    return FlashStatus;
 800086e:	7d7b      	ldrb	r3, [r7, #21]
 8000870:	b29b      	uxth	r3, r3
 8000872:	e001      	b.n	8000878 <EE_PageTransfer+0x12c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000874:	7d7b      	ldrb	r3, [r7, #21]
 8000876:	b29b      	uxth	r3, r3
}
 8000878:	4618      	mov	r0, r3
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	080103ff 	.word	0x080103ff
 8000884:	08010000 	.word	0x08010000
 8000888:	0800f800 	.word	0x0800f800
 800088c:	0800fc00 	.word	0x0800fc00
 8000890:	20000084 	.word	0x20000084
 8000894:	2000008a 	.word	0x2000008a
 8000898:	20000088 	.word	0x20000088

0800089c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	611a      	str	r2, [r3, #16]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	615a      	str	r2, [r3, #20]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff ffbd 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000922:	2020      	movs	r0, #32
 8000924:	f7ff ffba 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000928:	2004      	movs	r0, #4
 800092a:	f7ff ffb7 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff ffb4 	bl	800089c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000934:	492b      	ldr	r1, [pc, #172]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000936:	482c      	ldr	r0, [pc, #176]	; (80009e8 <MX_GPIO_Init+0xe0>)
 8000938:	f7ff ffd7 	bl	80008ea <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(F_R_GPIO_Port, F_R_Pin);
 800093c:	f242 0120 	movw	r1, #8224	; 0x2020
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000942:	f7ff ffd2 	bl	80008ea <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000946:	4927      	ldr	r1, [pc, #156]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000948:	4829      	ldr	r0, [pc, #164]	; (80009f0 <MX_GPIO_Init+0xe8>)
 800094a:	f7ff ffce 	bl	80008ea <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Board_LED_Pin;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000956:	2301      	movs	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <MX_GPIO_Init+0xe0>)
 8000964:	f001 fce4 	bl	8002330 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_11
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_GPIO_Init+0xec>)
 800096a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000976:	f001 fcdb 	bl	8002330 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_R_Pin;
 800097a:	f242 0320 	movw	r3, #8224	; 0x2020
 800097e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000980:	2301      	movs	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000992:	f001 fccd 	bl	8002330 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xf0>)
 8000998:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_GPIO_Init+0xe8>)
 80009a4:	f001 fcc4 	bl	8002330 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_GPIO_Init+0xdc>)
 80009aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xe8>)
 80009be:	f001 fcb7 	bl	8002330 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CLK_24MHZ_OUT_Pin;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_GPIO_Init+0xf4>)
 80009c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009c6:	2309      	movs	r3, #9
 80009c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CLK_24MHZ_OUT_GPIO_Port, &GPIO_InitStruct);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0xe4>)
 80009d8:	f001 fcaa 	bl	8002330 <LL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	04200020 	.word	0x04200020
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	0498139b 	.word	0x0498139b
 80009f8:	04dffcff 	.word	0x04dffcff
 80009fc:	04010001 	.word	0x04010001

08000a00 <GPIO_BOARD_Led_ON>:

/* USER CODE BEGIN 2 */
void GPIO_BOARD_Led_ON(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000a04:	4902      	ldr	r1, [pc, #8]	; (8000a10 <GPIO_BOARD_Led_ON+0x10>)
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <GPIO_BOARD_Led_ON+0x14>)
 8000a08:	f7ff ff6f 	bl	80008ea <LL_GPIO_ResetOutputPin>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	04200020 	.word	0x04200020
 8000a14:	40011000 	.word	0x40011000

08000a18 <GPIO_BOARD_Led_OFF>:

void GPIO_BOARD_Led_OFF(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000a1c:	4902      	ldr	r1, [pc, #8]	; (8000a28 <GPIO_BOARD_Led_OFF+0x10>)
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <GPIO_BOARD_Led_OFF+0x14>)
 8000a20:	f7ff ff54 	bl	80008cc <LL_GPIO_SetOutputPin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	04200020 	.word	0x04200020
 8000a2c:	40011000 	.word	0x40011000

08000a30 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f003 0207 	and.w	r2, r3, #7
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	605a      	str	r2, [r3, #4]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <LL_IWDG_IsReady+0x18>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <LL_IWDG_IsReady+0x1a>
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000ae6:	f7ff ffa3 	bl	8000a30 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000aec:	f7ff ffba 	bl	8000a64 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_64);
 8000af0:	2104      	movs	r1, #4
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000af4:	f7ff ffc3 	bl	8000a7e <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 1000);
 8000af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000afe:	f7ff ffcd 	bl	8000a9c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000b02:	bf00      	nop
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000b06:	f7ff ffd8 	bl	8000aba <LL_IWDG_IsReady>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d1f9      	bne.n	8000b04 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <MX_IWDG_Init+0x3c>)
 8000b12:	f7ff ff9a 	bl	8000a4a <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40003000 	.word	0x40003000

08000b20 <MX_IWDG_Reset>:

/* USER CODE BEGIN 1 */
void MX_IWDG_Reset(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	LL_IWDG_ReloadCounter(IWDG);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <MX_IWDG_Reset+0x10>)
 8000b26:	f7ff ff90 	bl	8000a4a <LL_IWDG_ReloadCounter>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003000 	.word	0x40003000

08000b34 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b44:	2b80      	cmp	r3, #128	; 0x80
 8000b46:	bf0c      	ite	eq
 8000b48:	2301      	moveq	r3, #1
 8000b4a:	2300      	movne	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60da      	str	r2, [r3, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60da      	str	r2, [r3, #12]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000ba0:	78fa      	ldrb	r2, [r7, #3]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	605a      	str	r2, [r3, #4]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <LOG_ResetLogger>:

static void AddLogDataByte(uint8_t data_byte);


void LOG_ResetLogger(USART_TypeDef *usart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	usart_log = usart;
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <LOG_ResetLogger+0x30>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
	start_index = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <LOG_ResetLogger+0x34>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	801a      	strh	r2, [r3, #0]
	data_length = 0;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LOG_ResetLogger+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
	log_tx_time_finished = SYS_GetTick() + 1;
 8000bca:	f000 fe69 	bl	80018a0 <SYS_GetTick>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a06      	ldr	r2, [pc, #24]	; (8000bec <LOG_ResetLogger+0x3c>)
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000008c 	.word	0x2000008c
 8000be4:	2000025e 	.word	0x2000025e
 8000be8:	2000025c 	.word	0x2000025c
 8000bec:	20000260 	.word	0x20000260

08000bf0 <LOG_IsInProgress>:

uint8_t LOG_IsInProgress(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	return (data_length > 0);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <LOG_IsInProgress+0x1c>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000025c 	.word	0x2000025c

08000c10 <LOG_SendLog>:
	return log_tx_time_finished;
}


void LOG_SendLog(uint8_t *data, uint16_t offset, uint16_t n_bytes)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	803b      	strh	r3, [r7, #0]
	if (!usart_log || (n_bytes == 0) || (data_length >= LOG_BUFFER_SIZE)) return;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <LOG_SendLog+0x74>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d029      	beq.n	8000c7c <LOG_SendLog+0x6c>
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d026      	beq.n	8000c7c <LOG_SendLog+0x6c>
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <LOG_SendLog+0x78>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000c36:	d221      	bcs.n	8000c7c <LOG_SendLog+0x6c>

	LL_USART_DisableIT_TXE(usart_log);
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <LOG_SendLog+0x74>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff9a 	bl	8000b76 <LL_USART_DisableIT_TXE>


	do {
		AddLogDataByte(data[offset ++]);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	807a      	strh	r2, [r7, #2]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f81b 	bl	8000c8c <AddLogDataByte>
		n_bytes --;
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	803b      	strh	r3, [r7, #0]
	} while((n_bytes > 0) && (data_length < LOG_BUFFER_SIZE));
 8000c5c:	883b      	ldrh	r3, [r7, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <LOG_SendLog+0x5c>
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <LOG_SendLog+0x78>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000c6a:	d3ea      	bcc.n	8000c42 <LOG_SendLog+0x32>


	LOG_EvaluateDataSend();
 8000c6c:	f000 f83c 	bl	8000ce8 <LOG_EvaluateDataSend>
	LL_USART_EnableIT_TXE(usart_log);
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <LOG_SendLog+0x74>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff6f 	bl	8000b58 <LL_USART_EnableIT_TXE>
 8000c7a:	e000      	b.n	8000c7e <LOG_SendLog+0x6e>
	if (!usart_log || (n_bytes == 0) || (data_length >= LOG_BUFFER_SIZE)) return;
 8000c7c:	bf00      	nop


}
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000008c 	.word	0x2000008c
 8000c88:	2000025c 	.word	0x2000025c

08000c8c <AddLogDataByte>:

static void AddLogDataByte(uint8_t data_byte)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	uint16_t next_index;
	if (data_length < LOG_BUFFER_SIZE)
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <AddLogDataByte+0x50>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000c9e:	d217      	bcs.n	8000cd0 <AddLogDataByte+0x44>
	{
		next_index = start_index + data_length;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <AddLogDataByte+0x54>)
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <AddLogDataByte+0x50>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	4413      	add	r3, r2
 8000caa:	81fb      	strh	r3, [r7, #14]
		if (next_index >= LOG_BUFFER_SIZE) {
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000cb2:	d303      	bcc.n	8000cbc <AddLogDataByte+0x30>
			next_index -= LOG_BUFFER_SIZE;
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000cba:	81fb      	strh	r3, [r7, #14]
		}

		log_tx_buffer[next_index] = data_byte;
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	4909      	ldr	r1, [pc, #36]	; (8000ce4 <AddLogDataByte+0x58>)
 8000cc0:	79fa      	ldrb	r2, [r7, #7]
 8000cc2:	54ca      	strb	r2, [r1, r3]
		data_length ++;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <AddLogDataByte+0x50>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <AddLogDataByte+0x50>)
 8000cce:	801a      	strh	r2, [r3, #0]
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000025c 	.word	0x2000025c
 8000ce0:	2000025e 	.word	0x2000025e
 8000ce4:	20000090 	.word	0x20000090

08000ce8 <LOG_EvaluateDataSend>:


void LOG_EvaluateDataSend(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	uint8_t byte_to_send;

	if (!usart_log || (data_length == 0) || !LL_USART_IsActiveFlag_TXE(usart_log))
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <LOG_EvaluateDataSend+0x80>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d034      	beq.n	8000d60 <LOG_EvaluateDataSend+0x78>
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <LOG_EvaluateDataSend+0x84>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d030      	beq.n	8000d60 <LOG_EvaluateDataSend+0x78>
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <LOG_EvaluateDataSend+0x80>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff16 	bl	8000b34 <LL_USART_IsActiveFlag_TXE>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d028      	beq.n	8000d60 <LOG_EvaluateDataSend+0x78>
	{
		return;
	}


	byte_to_send = log_tx_buffer[start_index ++];
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <LOG_EvaluateDataSend+0x88>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	b291      	uxth	r1, r2
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <LOG_EvaluateDataSend+0x88>)
 8000d18:	8011      	strh	r1, [r2, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <LOG_EvaluateDataSend+0x8c>)
 8000d1e:	5c9b      	ldrb	r3, [r3, r2]
 8000d20:	71fb      	strb	r3, [r7, #7]
	if (start_index == LOG_BUFFER_SIZE) {
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <LOG_EvaluateDataSend+0x88>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000d2a:	d102      	bne.n	8000d32 <LOG_EvaluateDataSend+0x4a>
		start_index = 0;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <LOG_EvaluateDataSend+0x88>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	801a      	strh	r2, [r3, #0]
	}
	data_length --;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <LOG_EvaluateDataSend+0x84>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LOG_EvaluateDataSend+0x84>)
 8000d3c:	801a      	strh	r2, [r3, #0]

	LL_USART_TransmitData8(usart_log, byte_to_send);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <LOG_EvaluateDataSend+0x80>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff24 	bl	8000b94 <LL_USART_TransmitData8>

	if (data_length == 0) {
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <LOG_EvaluateDataSend+0x84>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d106      	bne.n	8000d62 <LOG_EvaluateDataSend+0x7a>
		log_tx_time_finished = SYS_GetTick();
 8000d54:	f000 fda4 	bl	80018a0 <SYS_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <LOG_EvaluateDataSend+0x90>)
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e000      	b.n	8000d62 <LOG_EvaluateDataSend+0x7a>
		return;
 8000d60:	bf00      	nop
	}
}
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000008c 	.word	0x2000008c
 8000d6c:	2000025c 	.word	0x2000025c
 8000d70:	2000025e 	.word	0x2000025e
 8000d74:	20000090 	.word	0x20000090
 8000d78:	20000260 	.word	0x20000260

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4906      	ldr	r1, [pc, #24]	; (8000e14 <__NVIC_EnableIRQ+0x34>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <LL_RCC_HSE_Enable+0x18>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <LL_RCC_HSE_Enable+0x18>)
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000

08000eec <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <LL_RCC_HSE_IsReady+0x20>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <LL_RCC_LSI_Enable+0x18>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <LL_RCC_LSI_Enable+0x18>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000

08000f2c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <LL_RCC_LSI_IsReady+0x20>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <LL_RCC_SetSysClkSource+0x24>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f023 0203 	bic.w	r2, r3, #3
 8000f60:	4904      	ldr	r1, [pc, #16]	; (8000f74 <LL_RCC_SetSysClkSource+0x24>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <LL_RCC_GetSysClkSource+0x14>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fc8:	4904      	ldr	r1, [pc, #16]	; (8000fdc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ff0:	4904      	ldr	r1, [pc, #16]	; (8001004 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_ConfigMCO>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, MCOxSource);
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <LL_RCC_ConfigMCO+0x24>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <LL_RCC_ConfigMCO+0x24>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <LL_RCC_PLL_Enable+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <LL_RCC_PLL_Enable+0x18>)
 800103a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000

0800104c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <LL_RCC_PLL_IsReady+0x20>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800105c:	bf0c      	ite	eq
 800105e:	2301      	moveq	r3, #1
 8001060:	2300      	movne	r3, #0
 8001062:	b2db      	uxtb	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000

08001070 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	430b      	orrs	r3, r1
 800108c:	4903      	ldr	r1, [pc, #12]	; (800109c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000

080010a0 <LL_APB1_GRP1_EnableClock>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4013      	ands	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <LL_APB2_GRP1_EnableClock>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80010da:	699a      	ldr	r2, [r3, #24]
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4013      	ands	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <LL_FLASH_SetLatency+0x24>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 0207 	bic.w	r2, r3, #7
 8001110:	4904      	ldr	r1, [pc, #16]	; (8001124 <LL_FLASH_SetLatency+0x24>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40022000 	.word	0x40022000

08001128 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <LL_FLASH_GetLatency+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40022000 	.word	0x40022000

08001140 <LL_USART_DisableIT_TXE>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60da      	str	r2, [r3, #12]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800116a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800116e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a03      	ldr	r2, [pc, #12]	; (8001184 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117a:	6053      	str	r3, [r2, #4]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010000 	.word	0x40010000

08001188 <VerifyDataArray>:
void WriteDataArray(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t VerifyDataArray(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint16_t ee_result_code;
	uint16_t index;
	uint16_t data;

	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 800118e:	2300      	movs	r3, #0
 8001190:	80fb      	strh	r3, [r7, #6]
 8001192:	e01b      	b.n	80011cc <VerifyDataArray+0x44>
		ee_result_code = EE_ReadVariable(DEMO_DATA_ADDRESS(index), &data);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119a:	b29b      	uxth	r3, r3
 800119c:	1cba      	adds	r2, r7, #2
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f96f 	bl	8000484 <EE_ReadVariable>
 80011a6:	4603      	mov	r3, r0
 80011a8:	80bb      	strh	r3, [r7, #4]
		if (ee_result_code != EE_VAR_FOUND) {
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <VerifyDataArray+0x2c>
			return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e00f      	b.n	80011d4 <VerifyDataArray+0x4c>
		} else if (data != DemoDataTable[index]) {
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <VerifyDataArray+0x54>)
 80011b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <VerifyDataArray+0x3e>
			return 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e006      	b.n	80011d4 <VerifyDataArray+0x4c>
	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	3301      	adds	r3, #1
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	2b3f      	cmp	r3, #63	; 0x3f
 80011d0:	d9e0      	bls.n	8001194 <VerifyDataArray+0xc>
		}
	}
	return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0800383c 	.word	0x0800383c

080011e0 <WriteDataArray>:

void WriteDataArray(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	uint16_t index;
	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	80fb      	strh	r3, [r7, #6]
 80011ea:	e00e      	b.n	800120a <WriteDataArray+0x2a>
		EE_WriteVariable(DEMO_DATA_ADDRESS(index), DemoDataTable[index]);
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4909      	ldr	r1, [pc, #36]	; (800121c <WriteDataArray+0x3c>)
 80011f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f7ff f99e 	bl	8000540 <EE_WriteVariable>
	for (index = 0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	3301      	adds	r3, #1
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b3f      	cmp	r3, #63	; 0x3f
 800120e:	d9ed      	bls.n	80011ec <WriteDataArray+0xc>
	}
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800383c 	.word	0x0800383c

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Initialize EEPROM Virtual Address table
		EepromAllVirtAddrTable[0] = COUNTER_ADDRESS;
 8001226:	4bb1      	ldr	r3, [pc, #708]	; (80014ec <main+0x2cc>)
 8001228:	f245 5255 	movw	r2, #21845	; 0x5555
 800122c:	801a      	strh	r2, [r3, #0]
		for (uint8_t index=0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e00c      	b.n	800124e <main+0x2e>
			EepromAllVirtAddrTable[1+index] = DEMO_DATA_ADDRESS(index);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	b29a      	uxth	r2, r3
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001240:	b291      	uxth	r1, r2
 8001242:	4aaa      	ldr	r2, [pc, #680]	; (80014ec <main+0x2cc>)
 8001244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t index=0; index < DEMO_EEPROM_DATA_LENGTH; index++) {
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3301      	adds	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b3f      	cmp	r3, #63	; 0x3f
 8001252:	d9ef      	bls.n	8001234 <main+0x14>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff ff3b 	bl	80010d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800125a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800125e:	f7ff ff1f 	bl	80010a0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f7ff fd8a 	bl	8000d7c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001268:	f7ff fdac 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 800126c:	4603      	mov	r3, r0
 800126e:	2200      	movs	r2, #0
 8001270:	210f      	movs	r1, #15
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fdfa 	bl	8000e6c <NVIC_EncodePriority>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff fdca 	bl	8000e18 <__NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  NVIC_SetPriority(RCC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001284:	f7ff fd9e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8001288:	4603      	mov	r3, r0
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fdec 	bl	8000e6c <NVIC_EncodePriority>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	2005      	movs	r0, #5
 800129a:	f7ff fdbd 	bl	8000e18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RCC_IRQn);
 800129e:	2005      	movs	r0, #5
 80012a0:	f7ff fd9e 	bl	8000de0 <__NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80012a4:	f7ff ff5c 	bl	8001160 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f938 	bl	800151c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick->CTRL  &= ~SysTick_CTRL_CLKSOURCE_Msk;
 80012ac:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <main+0x2d0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a8f      	ldr	r2, [pc, #572]	; (80014f0 <main+0x2d0>)
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	6013      	str	r3, [r2, #0]
  SYS_ClearTick();
 80012b8:	f000 fad8 	bl	800186c <SYS_ClearTick>
  SYS_IncTick();
 80012bc:	f000 fae2 	bl	8001884 <SYS_IncTick>
  SYS_IncTick();
 80012c0:	f000 fae0 	bl	8001884 <SYS_IncTick>
  SYS_ResumeTick();
 80012c4:	f000 faf6 	bl	80018b4 <SYS_ResumeTick>

  /* Unlock the Flash Program Erase controller */
    FLASH_Unlock();
 80012c8:	f000 fe92 	bl	8001ff0 <FLASH_Unlock>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012cc:	f7ff fb1c 	bl	8000908 <MX_GPIO_Init>
  MX_TIM3_Init();
 80012d0:	f000 fc18 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012d4:	f000 fda6 	bl	8001e24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012d8:	f000 fe12 	bl	8001f00 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80012dc:	f7ff fc00 	bl	8000ae0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  EE_Init(EepromAllVirtAddrTable, TOTAL_EEPROM_DATA_SIZE);		// EEPROM Init
 80012e0:	2141      	movs	r1, #65	; 0x41
 80012e2:	4882      	ldr	r0, [pc, #520]	; (80014ec <main+0x2cc>)
 80012e4:	f7fe ff58 	bl	8000198 <EE_Init>
    LOG_ResetLogger(USART_LOG);											// Logger Init
 80012e8:	4882      	ldr	r0, [pc, #520]	; (80014f4 <main+0x2d4>)
 80012ea:	f7ff fc61 	bl	8000bb0 <LOG_ResetLogger>
    GPIO_BOARD_Led_OFF();
 80012ee:	f7ff fb93 	bl	8000a18 <GPIO_BOARD_Led_OFF>

    uint16_t counter = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	80fb      	strh	r3, [r7, #6]
    uint16_t n_bytes;
    uint16_t ee_result_code;

    ee_result_code = EE_ReadVariable(COUNTER_ADDRESS, &counter);
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	4619      	mov	r1, r3
 80012fa:	f245 5055 	movw	r0, #21845	; 0x5555
 80012fe:	f7ff f8c1 	bl	8000484 <EE_ReadVariable>
 8001302:	4603      	mov	r3, r0
 8001304:	813b      	strh	r3, [r7, #8]
    if (ee_result_code == EE_VAR_FOUND) { // Not First time start
 8001306:	893b      	ldrh	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d118      	bne.n	800133e <main+0x11e>
  	  if (VerifyDataArray()) {
 800130c:	f7ff ff3c 	bl	8001188 <VerifyDataArray>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <main+0x108>
  		  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - NOT first time. Counter = %d. Demo data array has been verified.\r\n", counter);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	461a      	mov	r2, r3
 800131a:	4977      	ldr	r1, [pc, #476]	; (80014f8 <main+0x2d8>)
 800131c:	4877      	ldr	r0, [pc, #476]	; (80014fc <main+0x2dc>)
 800131e:	f001 fd73 	bl	8002e08 <siprintf>
 8001322:	4603      	mov	r3, r0
 8001324:	81bb      	strh	r3, [r7, #12]
 8001326:	e020      	b.n	800136a <main+0x14a>
  	  } else {
  		  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - NOT first time. Counter = %d. Demo data array verification ERROR (try write it again).\r\n", counter);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	461a      	mov	r2, r3
 800132c:	4974      	ldr	r1, [pc, #464]	; (8001500 <main+0x2e0>)
 800132e:	4873      	ldr	r0, [pc, #460]	; (80014fc <main+0x2dc>)
 8001330:	f001 fd6a 	bl	8002e08 <siprintf>
 8001334:	4603      	mov	r3, r0
 8001336:	81bb      	strh	r3, [r7, #12]
  		  WriteDataArray();
 8001338:	f7ff ff52 	bl	80011e0 <WriteDataArray>
 800133c:	e015      	b.n	800136a <main+0x14a>
  	  }

    } else if (ee_result_code == EE_VAR_NOT_FOUND) { // First time start
 800133e:	893b      	ldrh	r3, [r7, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10a      	bne.n	800135a <main+0x13a>
  	  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - FIRST time\r\n");
 8001344:	496f      	ldr	r1, [pc, #444]	; (8001504 <main+0x2e4>)
 8001346:	486d      	ldr	r0, [pc, #436]	; (80014fc <main+0x2dc>)
 8001348:	f001 fd5e 	bl	8002e08 <siprintf>
 800134c:	4603      	mov	r3, r0
 800134e:	81bb      	strh	r3, [r7, #12]
  	  counter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	80fb      	strh	r3, [r7, #6]
  	  WriteDataArray();
 8001354:	f7ff ff44 	bl	80011e0 <WriteDataArray>
 8001358:	e007      	b.n	800136a <main+0x14a>

    } else {	// Error
  	  n_bytes = sprintf((char *)log_buffer, "\r\n\n---> Reset - EEPROM error - %d\r\n", ee_result_code);
 800135a:	893b      	ldrh	r3, [r7, #8]
 800135c:	461a      	mov	r2, r3
 800135e:	496a      	ldr	r1, [pc, #424]	; (8001508 <main+0x2e8>)
 8001360:	4866      	ldr	r0, [pc, #408]	; (80014fc <main+0x2dc>)
 8001362:	f001 fd51 	bl	8002e08 <siprintf>
 8001366:	4603      	mov	r3, r0
 8001368:	81bb      	strh	r3, [r7, #12]

    }

    LOG_SendLog(log_buffer, 0, n_bytes);
 800136a:	89bb      	ldrh	r3, [r7, #12]
 800136c:	461a      	mov	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	4862      	ldr	r0, [pc, #392]	; (80014fc <main+0x2dc>)
 8001372:	f7ff fc4d 	bl	8000c10 <LOG_SendLog>
    SYS_Delay(250);
 8001376:	20fa      	movs	r0, #250	; 0xfa
 8001378:	f000 faaa 	bl	80018d0 <SYS_Delay>
    MX_IWDG_Reset();
 800137c:	f7ff fbd0 	bl	8000b20 <MX_IWDG_Reset>



    uint16_t ccc;

    for (ccc=0; ccc < 500; ccc ++) {
 8001380:	2300      	movs	r3, #0
 8001382:	817b      	strh	r3, [r7, #10]
 8001384:	e015      	b.n	80013b2 <main+0x192>
    	n_bytes = sprintf((char *)log_buffer, "Testttttttt stringg - %d, \r\n", ccc);
 8001386:	897b      	ldrh	r3, [r7, #10]
 8001388:	461a      	mov	r2, r3
 800138a:	4960      	ldr	r1, [pc, #384]	; (800150c <main+0x2ec>)
 800138c:	485b      	ldr	r0, [pc, #364]	; (80014fc <main+0x2dc>)
 800138e:	f001 fd3b 	bl	8002e08 <siprintf>
 8001392:	4603      	mov	r3, r0
 8001394:	81bb      	strh	r3, [r7, #12]
    	LOG_SendLog(log_buffer, 0, n_bytes);
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	461a      	mov	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	4857      	ldr	r0, [pc, #348]	; (80014fc <main+0x2dc>)
 800139e:	f7ff fc37 	bl	8000c10 <LOG_SendLog>
    	SYS_Delay(3);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 fa94 	bl	80018d0 <SYS_Delay>
    	MX_IWDG_Reset();
 80013a8:	f7ff fbba 	bl	8000b20 <MX_IWDG_Reset>
    for (ccc=0; ccc < 500; ccc ++) {
 80013ac:	897b      	ldrh	r3, [r7, #10]
 80013ae:	3301      	adds	r3, #1
 80013b0:	817b      	strh	r3, [r7, #10]
 80013b2:	897b      	ldrh	r3, [r7, #10]
 80013b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b8:	d3e5      	bcc.n	8001386 <main+0x166>
    }


    SYS_Delay(250);
 80013ba:	20fa      	movs	r0, #250	; 0xfa
 80013bc:	f000 fa88 	bl	80018d0 <SYS_Delay>
    n_bytes = sprintf((char *)log_buffer, "\r\n\n----------------------------------------------------------");
 80013c0:	4953      	ldr	r1, [pc, #332]	; (8001510 <main+0x2f0>)
 80013c2:	484e      	ldr	r0, [pc, #312]	; (80014fc <main+0x2dc>)
 80013c4:	f001 fd20 	bl	8002e08 <siprintf>
 80013c8:	4603      	mov	r3, r0
 80013ca:	81bb      	strh	r3, [r7, #12]
    LOG_SendLog(log_buffer, 0, n_bytes);
 80013cc:	89bb      	ldrh	r3, [r7, #12]
 80013ce:	461a      	mov	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	484a      	ldr	r0, [pc, #296]	; (80014fc <main+0x2dc>)
 80013d4:	f7ff fc1c 	bl	8000c10 <LOG_SendLog>
    SYS_Delay(100);
 80013d8:	2064      	movs	r0, #100	; 0x64
 80013da:	f000 fa79 	bl	80018d0 <SYS_Delay>


    for (ccc=0; ccc < 500; ccc ++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	e015      	b.n	8001410 <main+0x1f0>
    	n_bytes = sprintf((char *)log_buffer, "Testtttttt stringggg - %d,  \r\n", ccc);
 80013e4:	897b      	ldrh	r3, [r7, #10]
 80013e6:	461a      	mov	r2, r3
 80013e8:	494a      	ldr	r1, [pc, #296]	; (8001514 <main+0x2f4>)
 80013ea:	4844      	ldr	r0, [pc, #272]	; (80014fc <main+0x2dc>)
 80013ec:	f001 fd0c 	bl	8002e08 <siprintf>
 80013f0:	4603      	mov	r3, r0
 80013f2:	81bb      	strh	r3, [r7, #12]
    	LOG_SendLog(log_buffer, 0, n_bytes);
 80013f4:	89bb      	ldrh	r3, [r7, #12]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2100      	movs	r1, #0
 80013fa:	4840      	ldr	r0, [pc, #256]	; (80014fc <main+0x2dc>)
 80013fc:	f7ff fc08 	bl	8000c10 <LOG_SendLog>
    	SYS_Delay(3);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 fa65 	bl	80018d0 <SYS_Delay>
    	MX_IWDG_Reset();
 8001406:	f7ff fb8b 	bl	8000b20 <MX_IWDG_Reset>
    for (ccc=0; ccc < 500; ccc ++) {
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	3301      	adds	r3, #1
 800140e:	817b      	strh	r3, [r7, #10]
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001416:	d3e5      	bcc.n	80013e4 <main+0x1c4>
    }

    SYS_Delay(250);
 8001418:	20fa      	movs	r0, #250	; 0xfa
 800141a:	f000 fa59 	bl	80018d0 <SYS_Delay>
    n_bytes = sprintf((char *)log_buffer, "\r\n\n----------------------------------------------------------");
 800141e:	493c      	ldr	r1, [pc, #240]	; (8001510 <main+0x2f0>)
 8001420:	4836      	ldr	r0, [pc, #216]	; (80014fc <main+0x2dc>)
 8001422:	f001 fcf1 	bl	8002e08 <siprintf>
 8001426:	4603      	mov	r3, r0
 8001428:	81bb      	strh	r3, [r7, #12]
    LOG_SendLog(log_buffer, 0, n_bytes);
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	461a      	mov	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	4832      	ldr	r0, [pc, #200]	; (80014fc <main+0x2dc>)
 8001432:	f7ff fbed 	bl	8000c10 <LOG_SendLog>
    SYS_Delay(100);
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f000 fa4a 	bl	80018d0 <SYS_Delay>

    for (ccc=0; ccc < 500; ccc ++) {
 800143c:	2300      	movs	r3, #0
 800143e:	817b      	strh	r3, [r7, #10]
 8001440:	e015      	b.n	800146e <main+0x24e>
    	n_bytes = sprintf((char *)log_buffer, "Testtttttt stringggg - %d,  \r\n", ccc);
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	461a      	mov	r2, r3
 8001446:	4933      	ldr	r1, [pc, #204]	; (8001514 <main+0x2f4>)
 8001448:	482c      	ldr	r0, [pc, #176]	; (80014fc <main+0x2dc>)
 800144a:	f001 fcdd 	bl	8002e08 <siprintf>
 800144e:	4603      	mov	r3, r0
 8001450:	81bb      	strh	r3, [r7, #12]
    	LOG_SendLog(log_buffer, 0, n_bytes);
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	461a      	mov	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <main+0x2dc>)
 800145a:	f7ff fbd9 	bl	8000c10 <LOG_SendLog>
    	SYS_Delay(3);
 800145e:	2003      	movs	r0, #3
 8001460:	f000 fa36 	bl	80018d0 <SYS_Delay>
    	MX_IWDG_Reset();
 8001464:	f7ff fb5c 	bl	8000b20 <MX_IWDG_Reset>
    for (ccc=0; ccc < 500; ccc ++) {
 8001468:	897b      	ldrh	r3, [r7, #10]
 800146a:	3301      	adds	r3, #1
 800146c:	817b      	strh	r3, [r7, #10]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001474:	d3e5      	bcc.n	8001442 <main+0x222>
    }
    SYS_Delay(250);
 8001476:	20fa      	movs	r0, #250	; 0xfa
 8001478:	f000 fa2a 	bl	80018d0 <SYS_Delay>
    n_bytes = sprintf((char *)log_buffer, "\r\n\n----------------------------------------------------------");
 800147c:	4924      	ldr	r1, [pc, #144]	; (8001510 <main+0x2f0>)
 800147e:	481f      	ldr	r0, [pc, #124]	; (80014fc <main+0x2dc>)
 8001480:	f001 fcc2 	bl	8002e08 <siprintf>
 8001484:	4603      	mov	r3, r0
 8001486:	81bb      	strh	r3, [r7, #12]
    LOG_SendLog(log_buffer, 0, n_bytes);
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	461a      	mov	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	481b      	ldr	r0, [pc, #108]	; (80014fc <main+0x2dc>)
 8001490:	f7ff fbbe 	bl	8000c10 <LOG_SendLog>
    SYS_Delay(100);
 8001494:	2064      	movs	r0, #100	; 0x64
 8001496:	f000 fa1b 	bl	80018d0 <SYS_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter ++;
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	3301      	adds	r3, #1
 800149e:	b29b      	uxth	r3, r3
 80014a0:	80fb      	strh	r3, [r7, #6]
	  ee_result_code = EE_WriteVariable(COUNTER_ADDRESS, counter);
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f245 5055 	movw	r0, #21845	; 0x5555
 80014aa:	f7ff f849 	bl	8000540 <EE_WriteVariable>
 80014ae:	4603      	mov	r3, r0
 80014b0:	813b      	strh	r3, [r7, #8]

	  n_bytes = sprintf((char *)log_buffer, "\r\nCounter = %d, write status = %d", counter, ee_result_code);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	461a      	mov	r2, r3
 80014b6:	893b      	ldrh	r3, [r7, #8]
 80014b8:	4917      	ldr	r1, [pc, #92]	; (8001518 <main+0x2f8>)
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <main+0x2dc>)
 80014bc:	f001 fca4 	bl	8002e08 <siprintf>
 80014c0:	4603      	mov	r3, r0
 80014c2:	81bb      	strh	r3, [r7, #12]
	  LOG_SendLog(log_buffer, 0, n_bytes);
 80014c4:	89bb      	ldrh	r3, [r7, #12]
 80014c6:	461a      	mov	r2, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <main+0x2dc>)
 80014cc:	f7ff fba0 	bl	8000c10 <LOG_SendLog>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	GPIO_BOARD_Led_ON();
 80014d0:	f7ff fa96 	bl	8000a00 <GPIO_BOARD_Led_ON>
	  		  SYS_Delay(100);
 80014d4:	2064      	movs	r0, #100	; 0x64
 80014d6:	f000 f9fb 	bl	80018d0 <SYS_Delay>
	  		  GPIO_BOARD_Led_OFF();
 80014da:	f7ff fa9d 	bl	8000a18 <GPIO_BOARD_Led_OFF>
	  		  SYS_Delay(900);
 80014de:	f44f 7061 	mov.w	r0, #900	; 0x384
 80014e2:	f000 f9f5 	bl	80018d0 <SYS_Delay>
	  		  MX_IWDG_Reset();
 80014e6:	f7ff fb1b 	bl	8000b20 <MX_IWDG_Reset>
	  counter ++;
 80014ea:	e7d6      	b.n	800149a <main+0x27a>
 80014ec:	200002e8 	.word	0x200002e8
 80014f0:	e000e010 	.word	0xe000e010
 80014f4:	40004400 	.word	0x40004400
 80014f8:	08003694 	.word	0x08003694
 80014fc:	20000264 	.word	0x20000264
 8001500:	080036e8 	.word	0x080036e8
 8001504:	08003754 	.word	0x08003754
 8001508:	08003774 	.word	0x08003774
 800150c:	08003798 	.word	0x08003798
 8001510:	080037b8 	.word	0x080037b8
 8001514:	080037f8 	.word	0x080037f8
 8001518:	08003818 	.word	0x08003818

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fded 	bl	8001100 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8001526:	bf00      	nop
 8001528:	f7ff fdfe 	bl	8001128 <LL_FLASH_GetLatency>
 800152c:	4603      	mov	r3, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	d1fa      	bne.n	8001528 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001532:	f7ff fccd 	bl	8000ed0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001536:	bf00      	nop
 8001538:	f7ff fcd8 	bl	8000eec <LL_RCC_HSE_IsReady>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d1fa      	bne.n	8001538 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 8001542:	f7ff fce5 	bl	8000f10 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001546:	bf00      	nop
 8001548:	f7ff fcf0 	bl	8000f2c <LL_RCC_LSI_IsReady>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d1fa      	bne.n	8001548 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 8001552:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001556:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800155a:	f7ff fd89 	bl	8001070 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800155e:	f7ff fd67 	bl	8001030 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001562:	bf00      	nop
 8001564:	f7ff fd72 	bl	800104c <LL_RCC_PLL_IsReady>
 8001568:	4603      	mov	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d1fa      	bne.n	8001564 <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fd0e 	bl	8000f90 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001574:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001578:	f7ff fd1e 	bl	8000fb8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 800157c:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8001580:	f7ff fd2e 	bl	8000fe0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001584:	2002      	movs	r0, #2
 8001586:	f7ff fce3 	bl	8000f50 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800158a:	bf00      	nop
 800158c:	f7ff fcf4 	bl	8000f78 <LL_RCC_GetSysClkSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b08      	cmp	r3, #8
 8001594:	d1fa      	bne.n	800158c <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(6000000);
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <SystemClock_Config+0x94>)
 8001598:	f001 fbe8 	bl	8002d6c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <SystemClock_Config+0x98>)
 800159e:	f001 fbf3 	bl	8002d88 <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_PLLCLK_DIV_2);
 80015a2:	f04f 60e0 	mov.w	r0, #117440512	; 0x7000000
 80015a6:	f7ff fd2f 	bl	8001008 <LL_RCC_ConfigMCO>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	005b8d80 	.word	0x005b8d80
 80015b4:	02dc6c00 	.word	0x02dc6c00

080015b8 <USART1_RX_Callback>:

/* USER CODE BEGIN 4 */
void USART1_RX_Callback(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	//uint8_t data = LL_USART_ReceiveData8(USART1);
	//TODO Process this data !!!!!!!!!!!!!!!!!!!!!!!!
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <USART2_TX_Callback>:

void USART2_TX_Callback(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	LOG_EvaluateDataSend();
 80015c8:	f7ff fb8e 	bl	8000ce8 <LOG_EvaluateDataSend>
	if(!LOG_IsInProgress()) {
 80015cc:	f7ff fb10 	bl	8000bf0 <LOG_IsInProgress>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <USART2_TX_Callback+0x18>
		LL_USART_DisableIT_TXE(USART_LOG);
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USART2_TX_Callback+0x1c>)
 80015d8:	f7ff fdb2 	bl	8001140 <LL_USART_DisableIT_TXE>
	}
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40004400 	.word	0x40004400

080015e4 <LL_USART_IsActiveFlag_FE>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <LL_USART_IsActiveFlag_NE>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b04      	cmp	r3, #4
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <LL_USART_IsActiveFlag_ORE>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b08      	cmp	r3, #8
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <LL_USART_IsActiveFlag_RXNE>:
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b20      	cmp	r3, #32
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <LL_USART_IsActiveFlag_TXE>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001684:	2b80      	cmp	r3, #128	; 0x80
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <LL_USART_IsEnabledIT_RXNE>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <LL_USART_IsEnabledIT_TXE>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016cc:	2b80      	cmp	r3, #128	; 0x80
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	SYS_IncTick();
 8001726:	f000 f8ad 	bl	8001884 <SYS_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}

0800172e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8001740:	4812      	ldr	r0, [pc, #72]	; (800178c <USART1_IRQHandler+0x50>)
 8001742:	f7ff ff85 	bl	8001650 <LL_USART_IsActiveFlag_RXNE>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <USART1_IRQHandler+0x22>
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <USART1_IRQHandler+0x50>)
 800174e:	f7ff ffa3 	bl	8001698 <LL_USART_IsEnabledIT_RXNE>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <USART1_IRQHandler+0x22>
	{
		USART1_RX_Callback();
 8001758:	f7ff ff2e 	bl	80015b8 <USART1_RX_Callback>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800175c:	e013      	b.n	8001786 <USART1_IRQHandler+0x4a>
	else if(LL_USART_IsActiveFlag_ORE(USART1) || LL_USART_IsActiveFlag_FE(USART1) || LL_USART_IsActiveFlag_NE(USART1))
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <USART1_IRQHandler+0x50>)
 8001760:	f7ff ff64 	bl	800162c <LL_USART_IsActiveFlag_ORE>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10b      	bne.n	8001782 <USART1_IRQHandler+0x46>
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <USART1_IRQHandler+0x50>)
 800176c:	f7ff ff3a 	bl	80015e4 <LL_USART_IsActiveFlag_FE>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <USART1_IRQHandler+0x46>
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <USART1_IRQHandler+0x50>)
 8001778:	f7ff ff46 	bl	8001608 <LL_USART_IsActiveFlag_NE>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <USART1_IRQHandler+0x4a>
		(void) USART1->DR;
 8001782:	4b02      	ldr	r3, [pc, #8]	; (800178c <USART1_IRQHandler+0x50>)
 8001784:	685b      	ldr	r3, [r3, #4]
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40013800 	.word	0x40013800

08001790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2) || LL_USART_IsActiveFlag_NE(USART2))
 8001794:	4819      	ldr	r0, [pc, #100]	; (80017fc <USART2_IRQHandler+0x6c>)
 8001796:	f7ff ff49 	bl	800162c <LL_USART_IsActiveFlag_ORE>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <USART2_IRQHandler+0x28>
 80017a0:	4816      	ldr	r0, [pc, #88]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017a2:	f7ff ff1f 	bl	80015e4 <LL_USART_IsActiveFlag_FE>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <USART2_IRQHandler+0x28>
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017ae:	f7ff ff2b 	bl	8001608 <LL_USART_IsActiveFlag_NE>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <USART2_IRQHandler+0x2e>
	{
		(void) USART2->DR;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017bc:	e01b      	b.n	80017f6 <USART2_IRQHandler+0x66>
		if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017c0:	f7ff ff46 	bl	8001650 <LL_USART_IsActiveFlag_RXNE>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <USART2_IRQHandler+0x4a>
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017cc:	f7ff ff64 	bl	8001698 <LL_USART_IsEnabledIT_RXNE>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <USART2_IRQHandler+0x4a>
			USART2_RX_Callback();
 80017d6:	f000 fbff 	bl	8001fd8 <USART2_RX_Callback>
		if (LL_USART_IsActiveFlag_TXE(USART2) && LL_USART_IsEnabledIT_TXE(USART2))
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017dc:	f7ff ff4a 	bl	8001674 <LL_USART_IsActiveFlag_TXE>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <USART2_IRQHandler+0x66>
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <USART2_IRQHandler+0x6c>)
 80017e8:	f7ff ff68 	bl	80016bc <LL_USART_IsEnabledIT_TXE>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <USART2_IRQHandler+0x66>
			USART2_TX_Callback();
 80017f2:	f7ff fee7 	bl	80015c4 <USART2_TX_Callback>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40004400 	.word	0x40004400

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f001 fab8 	bl	8002da4 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20005000 	.word	0x20005000
 8001860:	00000400 	.word	0x00000400
 8001864:	200002dc 	.word	0x200002dc
 8001868:	20000380 	.word	0x20000380

0800186c <SYS_ClearTick>:
 */
#include "systick.h"

volatile uint32_t uwTick;

void SYS_ClearTick(void) {
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	uwTick = 0;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <SYS_ClearTick+0x14>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2000036c 	.word	0x2000036c

08001884 <SYS_IncTick>:

void SYS_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	uwTick ++;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <SYS_IncTick+0x18>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	4a03      	ldr	r2, [pc, #12]	; (800189c <SYS_IncTick+0x18>)
 8001890:	6013      	str	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000036c 	.word	0x2000036c

080018a0 <SYS_GetTick>:

uint32_t SYS_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <SYS_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	2000036c 	.word	0x2000036c

080018b4 <SYS_ResumeTick>:
	/* Disable SysTick Interrupt */
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}

void SYS_ResumeTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	/* Enable SysTick Interrupt */
	SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SYS_ResumeTick+0x18>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <SYS_ResumeTick+0x18>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <SYS_Delay>:

void SYS_Delay(__IO uint32_t delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = SYS_GetTick();
 80018d8:	f7ff ffe2 	bl	80018a0 <SYS_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

	/* Add a period to guaranty minimum wait */
	if (delay == 0)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <SYS_Delay+0x1e>
    {
		delay ++;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
    }

	while((SYS_GetTick() - tickstart) < delay)
 80018ea:	e000      	b.n	80018ee <SYS_Delay+0x1e>
	{
		__WFI();
 80018ec:	bf30      	wfi
	while((SYS_GetTick() - tickstart) < delay)
 80018ee:	f7ff ffd7 	bl	80018a0 <SYS_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3f6      	bcc.n	80018ec <SYS_Delay+0x1c>
	}
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <LL_APB1_GRP1_EnableClock>:
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4313      	orrs	r3, r2
 800191a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <LL_APB1_GRP1_EnableClock+0x2c>)
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <LL_APB2_GRP1_EnableClock>:
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <LL_APB2_GRP1_EnableClock+0x2c>)
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	601a      	str	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
	...

08001988 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d01c      	beq.n	80019d2 <LL_TIM_OC_DisableFast+0x4a>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d017      	beq.n	80019ce <LL_TIM_OC_DisableFast+0x46>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d012      	beq.n	80019ca <LL_TIM_OC_DisableFast+0x42>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d00d      	beq.n	80019c6 <LL_TIM_OC_DisableFast+0x3e>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b0:	d007      	beq.n	80019c2 <LL_TIM_OC_DisableFast+0x3a>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b8:	d101      	bne.n	80019be <LL_TIM_OC_DisableFast+0x36>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e00a      	b.n	80019d4 <LL_TIM_OC_DisableFast+0x4c>
 80019be:	2306      	movs	r3, #6
 80019c0:	e008      	b.n	80019d4 <LL_TIM_OC_DisableFast+0x4c>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e006      	b.n	80019d4 <LL_TIM_OC_DisableFast+0x4c>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e004      	b.n	80019d4 <LL_TIM_OC_DisableFast+0x4c>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e002      	b.n	80019d4 <LL_TIM_OC_DisableFast+0x4c>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_TIM_OC_DisableFast+0x4c>
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3318      	adds	r3, #24
 80019da:	4619      	mov	r1, r3
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LL_TIM_OC_DisableFast+0x80>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	440b      	add	r3, r1
 80019e4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <LL_TIM_OC_DisableFast+0x84>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	4619      	mov	r1, r3
 80019f2:	2304      	movs	r3, #4
 80019f4:	408b      	lsls	r3, r1
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	601a      	str	r2, [r3, #0]

}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	080038bc 	.word	0x080038bc
 8001a0c:	080038c4 	.word	0x080038c4

08001a10 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d01c      	beq.n	8001a5a <LL_TIM_OC_EnablePreload+0x4a>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d017      	beq.n	8001a56 <LL_TIM_OC_EnablePreload+0x46>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d012      	beq.n	8001a52 <LL_TIM_OC_EnablePreload+0x42>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b40      	cmp	r3, #64	; 0x40
 8001a30:	d00d      	beq.n	8001a4e <LL_TIM_OC_EnablePreload+0x3e>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d007      	beq.n	8001a4a <LL_TIM_OC_EnablePreload+0x3a>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a40:	d101      	bne.n	8001a46 <LL_TIM_OC_EnablePreload+0x36>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e00a      	b.n	8001a5c <LL_TIM_OC_EnablePreload+0x4c>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e008      	b.n	8001a5c <LL_TIM_OC_EnablePreload+0x4c>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e006      	b.n	8001a5c <LL_TIM_OC_EnablePreload+0x4c>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e004      	b.n	8001a5c <LL_TIM_OC_EnablePreload+0x4c>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <LL_TIM_OC_EnablePreload+0x4c>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_TIM_OC_EnablePreload+0x4c>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3318      	adds	r3, #24
 8001a62:	4619      	mov	r1, r3
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LL_TIM_OC_EnablePreload+0x80>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	440b      	add	r3, r1
 8001a6c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <LL_TIM_OC_EnablePreload+0x84>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	408b      	lsls	r3, r1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	080038bc 	.word	0x080038bc
 8001a94:	080038c4 	.word	0x080038c4

08001a98 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aaa:	f023 0307 	bic.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	605a      	str	r2, [r3, #4]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b092      	sub	sp, #72	; 0x48
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	2220      	movs	r2, #32
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 f968 	bl	8002df8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff fee6 	bl	8001908 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 114;
 8001b3c:	2372      	movs	r3, #114	; 0x72
 8001b3e:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 2004;
 8001b44:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b52:	4619      	mov	r1, r3
 8001b54:	4843      	ldr	r0, [pc, #268]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001b56:	f000 fdcd 	bl	80026f4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001b5a:	4842      	ldr	r0, [pc, #264]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001b5c:	f7ff ff04 	bl	8001968 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4840      	ldr	r0, [pc, #256]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001b64:	f7ff ff98 	bl	8001a98 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	483e      	ldr	r0, [pc, #248]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001b6c:	f7ff ff50 	bl	8001a10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 990;
 8001b7c:	f240 33de 	movw	r3, #990	; 0x3de
 8001b80:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4835      	ldr	r0, [pc, #212]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001b90:	f000 fe0e 	bl	80027b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001b94:	2101      	movs	r1, #1
 8001b96:	4833      	ldr	r0, [pc, #204]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001b98:	f7ff fef6 	bl	8001988 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	4831      	ldr	r0, [pc, #196]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001ba0:	f7ff ff36 	bl	8001a10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 1001;
 8001ba4:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001ba8:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	482c      	ldr	r0, [pc, #176]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001bb4:	f000 fdfc 	bl	80027b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8001bb8:	2110      	movs	r1, #16
 8001bba:	482a      	ldr	r0, [pc, #168]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001bbc:	f7ff fee4 	bl	8001988 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8001bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc4:	4827      	ldr	r0, [pc, #156]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001bc6:	f7ff ff23 	bl	8001a10 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001bd6:	f000 fdeb 	bl	80027b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	4821      	ldr	r0, [pc, #132]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001be0:	f7ff fed2 	bl	8001988 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be8:	481e      	ldr	r0, [pc, #120]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001bea:	f7ff ff11 	bl	8001a10 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001bfa:	f000 fdd9 	bl	80027b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001c04:	f7ff fec0 	bl	8001988 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4816      	ldr	r0, [pc, #88]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001c0c:	f7ff ff58 	bl	8001ac0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001c10:	4814      	ldr	r0, [pc, #80]	; (8001c64 <MX_TIM3_Init+0x160>)
 8001c12:	f7ff ff67 	bl	8001ae4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001c16:	2004      	movs	r0, #4
 8001c18:	f7ff fe8e 	bl	8001938 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001c1c:	2008      	movs	r0, #8
 8001c1e:	f7ff fe8b 	bl	8001938 <LL_APB2_GRP1_EnableClock>
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = PWM_SPEED_Pin|PWM_RUDE_Pin;
 8001c22:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001c26:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c28:	2309      	movs	r3, #9
 8001c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	463b      	mov	r3, r7
 8001c36:	4619      	mov	r1, r3
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <MX_TIM3_Init+0x164>)
 8001c3a:	f000 fb79 	bl	8002330 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM_CAM_YAW_Pin|PWM_CAM_PITCH_Pin;
 8001c3e:	f240 3303 	movw	r3, #771	; 0x303
 8001c42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c44:	2309      	movs	r3, #9
 8001c46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	463b      	mov	r3, r7
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_TIM3_Init+0x168>)
 8001c56:	f000 fb6b 	bl	8002330 <LL_GPIO_Init>

}
 8001c5a:	bf00      	nop
 8001c5c:	3748      	adds	r7, #72	; 0x48
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00

08001c70 <__NVIC_GetPriorityGrouping>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4906      	ldr	r1, [pc, #24]	; (8001cc0 <__NVIC_EnableIRQ+0x34>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <LL_APB1_GRP1_EnableClock>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4013      	ands	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000

08001dac <LL_APB2_GRP1_EnableClock>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000

08001ddc <LL_USART_Enable>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <LL_USART_ConfigAsyncMode>:
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	615a      	str	r2, [r3, #20]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	615a      	str	r2, [r3, #20]
 8001e3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001e4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e50:	f7ff ffac 	bl	8001dac <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001e54:	2004      	movs	r0, #4
 8001e56:	f7ff ffa9 	bl	8001dac <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = U1TX_Pin;
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <MX_USART1_UART_Init+0xc8>)
 8001e5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e5e:	2309      	movs	r3, #9
 8001e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(U1TX_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4820      	ldr	r0, [pc, #128]	; (8001ef0 <MX_USART1_UART_Init+0xcc>)
 8001e70:	f000 fa5e 	bl	8002330 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sBUS_Pin;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <MX_USART1_UART_Init+0xd0>)
 8001e76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sBUS_GPIO_Port, &GPIO_InitStruct);
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <MX_USART1_UART_Init+0xcc>)
 8001e86:	f000 fa53 	bl	8002330 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e8a:	f7ff fef1 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff3f 	bl	8001d18 <NVIC_EncodePriority>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	2025      	movs	r0, #37	; 0x25
 8001ea0:	f7ff ff10 	bl	8001cc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001ea4:	2025      	movs	r0, #37	; 0x25
 8001ea6:	f7ff fef1 	bl	8001c8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <MX_USART1_UART_Init+0xd4>)
 8001eac:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480a      	ldr	r0, [pc, #40]	; (8001efc <MX_USART1_UART_Init+0xd8>)
 8001ed4:	f000 fed0 	bl	8002c78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001ed8:	4808      	ldr	r0, [pc, #32]	; (8001efc <MX_USART1_UART_Init+0xd8>)
 8001eda:	f7ff ff8e 	bl	8001dfa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_USART1_UART_Init+0xd8>)
 8001ee0:	f7ff ff7c 	bl	8001ddc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	3730      	adds	r7, #48	; 0x30
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	04020002 	.word	0x04020002
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	04040004 	.word	0x04040004
 8001ef8:	000186a0 	.word	0x000186a0
 8001efc:	40013800 	.word	0x40013800

08001f00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	615a      	str	r2, [r3, #20]
 8001f18:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001f28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f2c:	f7ff ff26 	bl	8001d7c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001f30:	2004      	movs	r0, #4
 8001f32:	f7ff ff3b 	bl	8001dac <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LOG_OUT_Pin;
 8001f36:	f240 4304 	movw	r3, #1028	; 0x404
 8001f3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LOG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <MX_USART2_UART_Init+0xd0>)
 8001f4e:	f000 f9ef 	bl	8002330 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = U2RX_Pin;
 8001f52:	f640 0308 	movw	r3, #2056	; 0x808
 8001f56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(U2RX_GPIO_Port, &GPIO_InitStruct);
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <MX_USART2_UART_Init+0xd0>)
 8001f66:	f000 f9e3 	bl	8002330 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f6a:	f7ff fe81 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fecf 	bl	8001d18 <NVIC_EncodePriority>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	f7ff fea0 	bl	8001cc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001f84:	2026      	movs	r0, #38	; 0x26
 8001f86:	f7ff fe81 	bl	8001c8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001f8a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f8e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <MX_USART2_UART_Init+0xd4>)
 8001fb6:	f000 fe5f 	bl	8002c78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_USART2_UART_Init+0xd4>)
 8001fbc:	f7ff ff1d 	bl	8001dfa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_USART2_UART_Init+0xd4>)
 8001fc2:	f7ff ff0b 	bl	8001ddc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <USART2_RX_Callback>:
{
	// Override this
}

__weak void USART2_RX_Callback(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	// Override this
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <FLASH_Unlock+0x18>)
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <FLASH_Unlock+0x1c>)
 8001ff8:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <FLASH_Unlock+0x18>)
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <FLASH_Unlock+0x20>)
 8001ffe:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40022000 	.word	0x40022000
 800200c:	45670123 	.word	0x45670123
 8002010:	cdef89ab 	.word	0xcdef89ab

08002014 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 800201c:	2304      	movs	r3, #4
 800201e:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002020:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002024:	f000 f8aa 	bl	800217c <FLASH_WaitForLastOperation>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b04      	cmp	r3, #4
 8002030:	d11b      	bne.n	800206a <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <FLASH_ErasePage+0x60>)
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <FLASH_ErasePage+0x60>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800203e:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <FLASH_ErasePage+0x60>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <FLASH_ErasePage+0x60>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <FLASH_ErasePage+0x60>)
 800204a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800204e:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002050:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002054:	f000 f892 	bl	800217c <FLASH_WaitForLastOperation>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <FLASH_ErasePage+0x60>)
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	4904      	ldr	r1, [pc, #16]	; (8002074 <FLASH_ErasePage+0x60>)
 8002062:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8002066:	4013      	ands	r3, r2
 8002068:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40022000 	.word	0x40022000

08002078 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8002084:	2304      	movs	r3, #4
 8002086:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002088:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800208c:	f000 f876 	bl	800217c <FLASH_WaitForLastOperation>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b04      	cmp	r3, #4
 8002098:	d115      	bne.n	80020c6 <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <FLASH_ProgramHalfWord+0x58>)
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <FLASH_ProgramHalfWord+0x58>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80020ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020b0:	f000 f864 	bl	800217c <FLASH_WaitForLastOperation>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <FLASH_ProgramHalfWord+0x58>)
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	4904      	ldr	r1, [pc, #16]	; (80020d0 <FLASH_ProgramHalfWord+0x58>)
 80020be:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80020c2:	4013      	ands	r3, r2
 80020c4:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000

080020d4 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetStatus(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80020da:	2304      	movs	r3, #4
 80020dc:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <FLASH_GetStatus+0x50>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 80020ea:	2301      	movs	r3, #1
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	e013      	b.n	8002118 <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <FLASH_GetStatus+0x50>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 80020fc:	2302      	movs	r3, #2
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	e00a      	b.n	8002118 <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <FLASH_GetStatus+0x50>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <FLASH_GetStatus+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 800210e:	2303      	movs	r3, #3
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	e001      	b.n	8002118 <FLASH_GetStatus+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8002114:	2304      	movs	r3, #4
 8002116:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8002118:	79fb      	ldrb	r3, [r7, #7]
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40022000 	.word	0x40022000

08002128 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800212e:	2304      	movs	r3, #4
 8002130:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <FLASH_GetBank1Status+0x50>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800213e:	2301      	movs	r3, #1
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	e013      	b.n	800216c <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <FLASH_GetBank1Status+0x50>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8002150:	2302      	movs	r3, #2
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	e00a      	b.n	800216c <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <FLASH_GetBank1Status+0x50>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8002162:	2303      	movs	r3, #3
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e001      	b.n	800216c <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8002168:	2304      	movs	r3, #4
 800216a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 800216c:	79fb      	ldrb	r3, [r7, #7]
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	40022000 	.word	0x40022000

0800217c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8002184:	2304      	movs	r3, #4
 8002186:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8002188:	f7ff ffce 	bl	8002128 <FLASH_GetBank1Status>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002190:	e006      	b.n	80021a0 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 8002192:	f7ff ffc9 	bl	8002128 <FLASH_GetBank1Status>
 8002196:	4603      	mov	r3, r0
 8002198:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3b01      	subs	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <FLASH_WaitForLastOperation+0x30>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 80021b2:	2305      	movs	r3, #5
 80021b4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <LL_GPIO_SetPinMode>:
{
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	0e1b      	lsrs	r3, r3, #24
 80021d4:	4413      	add	r3, r2
 80021d6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80021d8:	6822      	ldr	r2, [r4, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	210f      	movs	r1, #15
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	401a      	ands	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	61bb      	str	r3, [r7, #24]
  return result;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	6023      	str	r3, [r4, #0]
}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bc90      	pop	{r4, r7}
 8002222:	4770      	bx	lr

08002224 <LL_GPIO_SetPinSpeed>:
{
 8002224:	b490      	push	{r4, r7}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0e1b      	lsrs	r3, r3, #24
 8002238:	4413      	add	r3, r2
 800223a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	613b      	str	r3, [r7, #16]
  return result;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	2103      	movs	r1, #3
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	61bb      	str	r3, [r7, #24]
  return result;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	6023      	str	r3, [r4, #0]
}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bc90      	pop	{r4, r7}
 8002286:	4770      	bx	lr

08002288 <LL_GPIO_SetPinOutputType>:
{
 8002288:	b490      	push	{r4, r7}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	0e1b      	lsrs	r3, r3, #24
 800229c:	4413      	add	r3, r2
 800229e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	613b      	str	r3, [r7, #16]
  return result;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	2104      	movs	r1, #4
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	401a      	ands	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	61bb      	str	r3, [r7, #24]
  return result;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	6023      	str	r3, [r4, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc90      	pop	{r4, r7}
 80022ea:	4770      	bx	lr

080022ec <LL_GPIO_SetPinPull>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	613b      	str	r3, [r7, #16]
  return result;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	408b      	lsls	r3, r1
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	60da      	str	r2, [r3, #12]
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	60fb      	str	r3, [r7, #12]
  return result;
 8002350:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800235a:	e044      	b.n	80023e6 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	409a      	lsls	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03a      	beq.n	80023e0 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d806      	bhi.n	800237e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002370:	f240 1201 	movw	r2, #257	; 0x101
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	e008      	b.n	8002390 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b08      	subs	r3, #8
 8002382:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800238e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d106      	bne.n	80023a6 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	461a      	mov	r2, r3
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffa3 	bl	80022ec <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	69b9      	ldr	r1, [r7, #24]
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ff06 	bl	80021c0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d003      	beq.n	80023c4 <LL_GPIO_Init+0x94>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	d10d      	bne.n	80023e0 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	461a      	mov	r2, r3
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff29 	bl	8002224 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff54 	bl	8002288 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1b4      	bne.n	800235c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <LL_RCC_GetSysClkSource>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <LL_RCC_GetSysClkSource+0x14>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_RCC_GetAHBPrescaler>:
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <LL_RCC_GetAHBPrescaler+0x14>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40021000 	.word	0x40021000

0800242c <LL_RCC_GetAPB1Prescaler>:
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000

08002444 <LL_RCC_GetAPB2Prescaler>:
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <LL_RCC_GetAPB2Prescaler+0x14>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000

0800245c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <LL_RCC_PLL_GetMainSource+0x14>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40021000 	.word	0x40021000

08002474 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000

0800248c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <LL_RCC_PLL_GetPrediv+0x18>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c5b      	lsrs	r3, r3, #17
 8002496:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80024b0:	f000 f820 	bl	80024f4 <RCC_GetSystemClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f83e 	bl	8002540 <RCC_GetHCLKClockFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f84c 	bl	800256c <RCC_GetPCLK1ClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f858 	bl	8002594 <RCC_GetPCLK2ClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60da      	str	r2, [r3, #12]
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024fe:	f7ff ff7d 	bl	80023fc <LL_RCC_GetSysClkSource>
 8002502:	4603      	mov	r3, r0
 8002504:	2b08      	cmp	r3, #8
 8002506:	d00c      	beq.n	8002522 <RCC_GetSystemClockFreq+0x2e>
 8002508:	2b08      	cmp	r3, #8
 800250a:	d80e      	bhi.n	800252a <RCC_GetSystemClockFreq+0x36>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <RCC_GetSystemClockFreq+0x22>
 8002510:	2b04      	cmp	r3, #4
 8002512:	d003      	beq.n	800251c <RCC_GetSystemClockFreq+0x28>
 8002514:	e009      	b.n	800252a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <RCC_GetSystemClockFreq+0x48>)
 8002518:	607b      	str	r3, [r7, #4]
      break;
 800251a:	e009      	b.n	8002530 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <RCC_GetSystemClockFreq+0x48>)
 800251e:	607b      	str	r3, [r7, #4]
      break;
 8002520:	e006      	b.n	8002530 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002522:	f000 f84b 	bl	80025bc <RCC_PLL_GetFreqDomain_SYS>
 8002526:	6078      	str	r0, [r7, #4]
      break;
 8002528:	e002      	b.n	8002530 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <RCC_GetSystemClockFreq+0x48>)
 800252c:	607b      	str	r3, [r7, #4]
      break;
 800252e:	bf00      	nop
  }

  return frequency;
 8002530:	687b      	ldr	r3, [r7, #4]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	007a1200 	.word	0x007a1200

08002540 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002548:	f7ff ff64 	bl	8002414 <LL_RCC_GetAHBPrescaler>
 800254c:	4603      	mov	r3, r0
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <RCC_GetHCLKClockFreq+0x28>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	40d3      	lsrs	r3, r2
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	080038cc 	.word	0x080038cc

0800256c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002574:	f7ff ff5a 	bl	800242c <LL_RCC_GetAPB1Prescaler>
 8002578:	4603      	mov	r3, r0
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <RCC_GetPCLK1ClockFreq+0x24>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	40d3      	lsrs	r3, r2
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	080038dc 	.word	0x080038dc

08002594 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800259c:	f7ff ff52 	bl	8002444 <LL_RCC_GetAPB2Prescaler>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0adb      	lsrs	r3, r3, #11
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <RCC_GetPCLK2ClockFreq+0x24>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	40d3      	lsrs	r3, r2
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	080038dc 	.word	0x080038dc

080025bc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80025ca:	f7ff ff47 	bl	800245c <LL_RCC_PLL_GetMainSource>
 80025ce:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d003      	beq.n	80025e6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80025de:	e00b      	b.n	80025f8 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80025e2:	607b      	str	r3, [r7, #4]
      break;
 80025e4:	e00b      	b.n	80025fe <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80025e6:	f7ff ff51 	bl	800248c <LL_RCC_PLL_GetPrediv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	607b      	str	r3, [r7, #4]
      break;
 80025f6:	e002      	b.n	80025fe <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80025fa:	607b      	str	r3, [r7, #4]
      break;
 80025fc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80025fe:	f7ff ff39 	bl	8002474 <LL_RCC_PLL_GetMultiplicator>
 8002602:	4603      	mov	r3, r0
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	3302      	adds	r3, #2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	003d0900 	.word	0x003d0900
 800261c:	007a1200 	.word	0x007a1200

08002620 <LL_TIM_SetPrescaler>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <LL_TIM_SetAutoReload>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <LL_TIM_SetRepetitionCounter>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_TIM_OC_SetCompareCH1>:
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <LL_TIM_OC_SetCompareCH2>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <LL_TIM_OC_SetCompareCH3>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <LL_TIM_OC_SetCompareCH4>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	615a      	str	r2, [r3, #20]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <LL_TIM_Init+0xb0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <LL_TIM_Init+0x30>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d007      	beq.n	8002724 <LL_TIM_Init+0x30>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <LL_TIM_Init+0xb4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <LL_TIM_Init+0x30>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a23      	ldr	r2, [pc, #140]	; (80027ac <LL_TIM_Init+0xb8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d106      	bne.n	8002732 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <LL_TIM_Init+0xb0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00b      	beq.n	8002752 <LL_TIM_Init+0x5e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d007      	beq.n	8002752 <LL_TIM_Init+0x5e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <LL_TIM_Init+0xb4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <LL_TIM_Init+0x5e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <LL_TIM_Init+0xb8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d106      	bne.n	8002760 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff64 	bl	800263a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff51 	bl	8002620 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <LL_TIM_Init+0xb0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d105      	bne.n	8002792 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff61 	bl	8002654 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff9f 	bl	80026d6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800

080027b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c6:	d027      	beq.n	8002818 <LL_TIM_OC_Init+0x68>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	d82a      	bhi.n	8002826 <LL_TIM_OC_Init+0x76>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d6:	d018      	beq.n	800280a <LL_TIM_OC_Init+0x5a>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027de:	d822      	bhi.n	8002826 <LL_TIM_OC_Init+0x76>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d003      	beq.n	80027ee <LL_TIM_OC_Init+0x3e>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d007      	beq.n	80027fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80027ec:	e01b      	b.n	8002826 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f81f 	bl	8002834 <OC1Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	75fb      	strb	r3, [r7, #23]
      break;
 80027fa:	e015      	b.n	8002828 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f87e 	bl	8002900 <OC2Config>
 8002804:	4603      	mov	r3, r0
 8002806:	75fb      	strb	r3, [r7, #23]
      break;
 8002808:	e00e      	b.n	8002828 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f8e1 	bl	80029d4 <OC3Config>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]
      break;
 8002816:	e007      	b.n	8002828 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f944 	bl	8002aa8 <OC4Config>
 8002820:	4603      	mov	r3, r0
 8002822:	75fb      	strb	r3, [r7, #23]
      break;
 8002824:	e000      	b.n	8002828 <LL_TIM_OC_Init+0x78>
      break;
 8002826:	bf00      	nop
  }

  return result;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f023 0202 	bic.w	r2, r3, #2
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0201 	bic.w	r2, r3, #1
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <OC1Config+0xc8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d11e      	bne.n	80028d4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f023 0208 	bic.w	r2, r3, #8
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f023 0204 	bic.w	r2, r3, #4
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fec1 	bl	800266e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40012c00 	.word	0x40012c00

08002900 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	f023 0210 	bic.w	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0220 	bic.w	r2, r3, #32
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0210 	bic.w	r2, r3, #16
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <OC2Config+0xd0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d11f      	bne.n	80029a8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	019b      	lsls	r3, r3, #6
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	019b      	lsls	r3, r3, #6
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fe64 	bl	8002688 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40012c00 	.word	0x40012c00

080029d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0303 	bic.w	r3, r3, #3
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <OC3Config+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d11f      	bne.n	8002a7a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fe08 	bl	80026a2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00

08002aa8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	031b      	lsls	r3, r3, #12
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <OC4Config+0xa0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d107      	bne.n	8002b20 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	019b      	lsls	r3, r3, #6
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fdc2 	bl	80026bc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40012c00 	.word	0x40012c00

08002b4c <LL_USART_IsEnabled>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <LL_USART_SetStopBitsLength>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <LL_USART_SetHWFlowCtrl>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	615a      	str	r2, [r3, #20]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
	...

08002bbc <LL_USART_SetBaudRate>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <LL_USART_SetBaudRate+0xb8>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	b299      	uxth	r1, r3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009a      	lsls	r2, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <LL_USART_SetBaudRate+0xb8>)
 8002c00:	fba3 0302 	umull	r0, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	2064      	movs	r0, #100	; 0x64
 8002c08:	fb00 f303 	mul.w	r3, r0, r3
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	3332      	adds	r3, #50	; 0x32
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <LL_USART_SetBaudRate+0xb8>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	440b      	add	r3, r1
 8002c24:	b299      	uxth	r1, r3
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009a      	lsls	r2, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <LL_USART_SetBaudRate+0xb8>)
 8002c3c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	2064      	movs	r0, #100	; 0x64
 8002c44:	fb00 f303 	mul.w	r3, r0, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	3332      	adds	r3, #50	; 0x32
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <LL_USART_SetBaudRate+0xb8>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	440b      	add	r3, r1
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	51eb851f 	.word	0x51eb851f

08002c78 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff5e 	bl	8002b4c <LL_USART_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d145      	bne.n	8002d22 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	6851      	ldr	r1, [r2, #4]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68d2      	ldr	r2, [r2, #12]
 8002caa:	4311      	orrs	r1, r2
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6912      	ldr	r2, [r2, #16]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ff57 	bl	8002b72 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ff63 	bl	8002b96 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fbe7 	bl	80024a8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <LL_USART_Init+0xb4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d102      	bne.n	8002ce8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e00c      	b.n	8002d02 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <LL_USART_Init+0xb8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d102      	bne.n	8002cf6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e005      	b.n	8002d02 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <LL_USART_Init+0xbc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00c      	beq.n	8002d22 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff4d 	bl	8002bbc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	40004400 	.word	0x40004400
 8002d34:	40004800 	.word	0x40004800

08002d38 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <LL_InitTick+0x30>)
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <LL_InitTick+0x30>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <LL_InitTick+0x30>)
 8002d58:	2205      	movs	r2, #5
 8002d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e010 	.word	0xe000e010

08002d6c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ffdd 	bl	8002d38 <LL_InitTick>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <LL_SetSystemCoreClock+0x18>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000000 	.word	0x20000000

08002da4 <__errno>:
 8002da4:	4b01      	ldr	r3, [pc, #4]	; (8002dac <__errno+0x8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000004 	.word	0x20000004

08002db0 <__libc_init_array>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	2600      	movs	r6, #0
 8002db4:	4d0c      	ldr	r5, [pc, #48]	; (8002de8 <__libc_init_array+0x38>)
 8002db6:	4c0d      	ldr	r4, [pc, #52]	; (8002dec <__libc_init_array+0x3c>)
 8002db8:	1b64      	subs	r4, r4, r5
 8002dba:	10a4      	asrs	r4, r4, #2
 8002dbc:	42a6      	cmp	r6, r4
 8002dbe:	d109      	bne.n	8002dd4 <__libc_init_array+0x24>
 8002dc0:	f000 fc5c 	bl	800367c <_init>
 8002dc4:	2600      	movs	r6, #0
 8002dc6:	4d0a      	ldr	r5, [pc, #40]	; (8002df0 <__libc_init_array+0x40>)
 8002dc8:	4c0a      	ldr	r4, [pc, #40]	; (8002df4 <__libc_init_array+0x44>)
 8002dca:	1b64      	subs	r4, r4, r5
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	42a6      	cmp	r6, r4
 8002dd0:	d105      	bne.n	8002dde <__libc_init_array+0x2e>
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd8:	4798      	blx	r3
 8002dda:	3601      	adds	r6, #1
 8002ddc:	e7ee      	b.n	8002dbc <__libc_init_array+0xc>
 8002dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de2:	4798      	blx	r3
 8002de4:	3601      	adds	r6, #1
 8002de6:	e7f2      	b.n	8002dce <__libc_init_array+0x1e>
 8002de8:	08003918 	.word	0x08003918
 8002dec:	08003918 	.word	0x08003918
 8002df0:	08003918 	.word	0x08003918
 8002df4:	0800391c 	.word	0x0800391c

08002df8 <memset>:
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4402      	add	r2, r0
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <memset+0xa>
 8002e00:	4770      	bx	lr
 8002e02:	f803 1b01 	strb.w	r1, [r3], #1
 8002e06:	e7f9      	b.n	8002dfc <memset+0x4>

08002e08 <siprintf>:
 8002e08:	b40e      	push	{r1, r2, r3}
 8002e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e0e:	b500      	push	{lr}
 8002e10:	b09c      	sub	sp, #112	; 0x70
 8002e12:	ab1d      	add	r3, sp, #116	; 0x74
 8002e14:	9002      	str	r0, [sp, #8]
 8002e16:	9006      	str	r0, [sp, #24]
 8002e18:	9107      	str	r1, [sp, #28]
 8002e1a:	9104      	str	r1, [sp, #16]
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <siprintf+0x38>)
 8002e1e:	4909      	ldr	r1, [pc, #36]	; (8002e44 <siprintf+0x3c>)
 8002e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e24:	9105      	str	r1, [sp, #20]
 8002e26:	6800      	ldr	r0, [r0, #0]
 8002e28:	a902      	add	r1, sp, #8
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	f000 f868 	bl	8002f00 <_svfiprintf_r>
 8002e30:	2200      	movs	r2, #0
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	b01c      	add	sp, #112	; 0x70
 8002e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e3c:	b003      	add	sp, #12
 8002e3e:	4770      	bx	lr
 8002e40:	20000004 	.word	0x20000004
 8002e44:	ffff0208 	.word	0xffff0208

08002e48 <__ssputs_r>:
 8002e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e4c:	688e      	ldr	r6, [r1, #8]
 8002e4e:	4682      	mov	sl, r0
 8002e50:	429e      	cmp	r6, r3
 8002e52:	460c      	mov	r4, r1
 8002e54:	4690      	mov	r8, r2
 8002e56:	461f      	mov	r7, r3
 8002e58:	d838      	bhi.n	8002ecc <__ssputs_r+0x84>
 8002e5a:	898a      	ldrh	r2, [r1, #12]
 8002e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e60:	d032      	beq.n	8002ec8 <__ssputs_r+0x80>
 8002e62:	6825      	ldr	r5, [r4, #0]
 8002e64:	6909      	ldr	r1, [r1, #16]
 8002e66:	3301      	adds	r3, #1
 8002e68:	eba5 0901 	sub.w	r9, r5, r1
 8002e6c:	6965      	ldr	r5, [r4, #20]
 8002e6e:	444b      	add	r3, r9
 8002e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e78:	106d      	asrs	r5, r5, #1
 8002e7a:	429d      	cmp	r5, r3
 8002e7c:	bf38      	it	cc
 8002e7e:	461d      	movcc	r5, r3
 8002e80:	0553      	lsls	r3, r2, #21
 8002e82:	d531      	bpl.n	8002ee8 <__ssputs_r+0xa0>
 8002e84:	4629      	mov	r1, r5
 8002e86:	f000 fb53 	bl	8003530 <_malloc_r>
 8002e8a:	4606      	mov	r6, r0
 8002e8c:	b950      	cbnz	r0, 8002ea4 <__ssputs_r+0x5c>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	f8ca 3000 	str.w	r3, [sl]
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea4:	464a      	mov	r2, r9
 8002ea6:	6921      	ldr	r1, [r4, #16]
 8002ea8:	f000 face 	bl	8003448 <memcpy>
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	6126      	str	r6, [r4, #16]
 8002eba:	444e      	add	r6, r9
 8002ebc:	6026      	str	r6, [r4, #0]
 8002ebe:	463e      	mov	r6, r7
 8002ec0:	6165      	str	r5, [r4, #20]
 8002ec2:	eba5 0509 	sub.w	r5, r5, r9
 8002ec6:	60a5      	str	r5, [r4, #8]
 8002ec8:	42be      	cmp	r6, r7
 8002eca:	d900      	bls.n	8002ece <__ssputs_r+0x86>
 8002ecc:	463e      	mov	r6, r7
 8002ece:	4632      	mov	r2, r6
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f000 fac6 	bl	8003464 <memmove>
 8002ed8:	68a3      	ldr	r3, [r4, #8]
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	1b9b      	subs	r3, r3, r6
 8002ede:	4432      	add	r2, r6
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	6022      	str	r2, [r4, #0]
 8002ee6:	e7db      	b.n	8002ea0 <__ssputs_r+0x58>
 8002ee8:	462a      	mov	r2, r5
 8002eea:	f000 fb7b 	bl	80035e4 <_realloc_r>
 8002eee:	4606      	mov	r6, r0
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d1e1      	bne.n	8002eb8 <__ssputs_r+0x70>
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	6921      	ldr	r1, [r4, #16]
 8002ef8:	f000 face 	bl	8003498 <_free_r>
 8002efc:	e7c7      	b.n	8002e8e <__ssputs_r+0x46>
	...

08002f00 <_svfiprintf_r>:
 8002f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f04:	4698      	mov	r8, r3
 8002f06:	898b      	ldrh	r3, [r1, #12]
 8002f08:	4607      	mov	r7, r0
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	460d      	mov	r5, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	b09d      	sub	sp, #116	; 0x74
 8002f12:	d50e      	bpl.n	8002f32 <_svfiprintf_r+0x32>
 8002f14:	690b      	ldr	r3, [r1, #16]
 8002f16:	b963      	cbnz	r3, 8002f32 <_svfiprintf_r+0x32>
 8002f18:	2140      	movs	r1, #64	; 0x40
 8002f1a:	f000 fb09 	bl	8003530 <_malloc_r>
 8002f1e:	6028      	str	r0, [r5, #0]
 8002f20:	6128      	str	r0, [r5, #16]
 8002f22:	b920      	cbnz	r0, 8002f2e <_svfiprintf_r+0x2e>
 8002f24:	230c      	movs	r3, #12
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e0d1      	b.n	80030d2 <_svfiprintf_r+0x1d2>
 8002f2e:	2340      	movs	r3, #64	; 0x40
 8002f30:	616b      	str	r3, [r5, #20]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9309      	str	r3, [sp, #36]	; 0x24
 8002f36:	2320      	movs	r3, #32
 8002f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f3c:	2330      	movs	r3, #48	; 0x30
 8002f3e:	f04f 0901 	mov.w	r9, #1
 8002f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030ec <_svfiprintf_r+0x1ec>
 8002f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f4e:	4623      	mov	r3, r4
 8002f50:	469a      	mov	sl, r3
 8002f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f56:	b10a      	cbz	r2, 8002f5c <_svfiprintf_r+0x5c>
 8002f58:	2a25      	cmp	r2, #37	; 0x25
 8002f5a:	d1f9      	bne.n	8002f50 <_svfiprintf_r+0x50>
 8002f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f60:	d00b      	beq.n	8002f7a <_svfiprintf_r+0x7a>
 8002f62:	465b      	mov	r3, fp
 8002f64:	4622      	mov	r2, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff ff6d 	bl	8002e48 <__ssputs_r>
 8002f6e:	3001      	adds	r0, #1
 8002f70:	f000 80aa 	beq.w	80030c8 <_svfiprintf_r+0x1c8>
 8002f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f76:	445a      	add	r2, fp
 8002f78:	9209      	str	r2, [sp, #36]	; 0x24
 8002f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80a2 	beq.w	80030c8 <_svfiprintf_r+0x1c8>
 8002f84:	2300      	movs	r3, #0
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f8e:	f10a 0a01 	add.w	sl, sl, #1
 8002f92:	9304      	str	r3, [sp, #16]
 8002f94:	9307      	str	r3, [sp, #28]
 8002f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f9c:	4654      	mov	r4, sl
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa4:	4851      	ldr	r0, [pc, #324]	; (80030ec <_svfiprintf_r+0x1ec>)
 8002fa6:	f000 fa41 	bl	800342c <memchr>
 8002faa:	9a04      	ldr	r2, [sp, #16]
 8002fac:	b9d8      	cbnz	r0, 8002fe6 <_svfiprintf_r+0xe6>
 8002fae:	06d0      	lsls	r0, r2, #27
 8002fb0:	bf44      	itt	mi
 8002fb2:	2320      	movmi	r3, #32
 8002fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fb8:	0711      	lsls	r1, r2, #28
 8002fba:	bf44      	itt	mi
 8002fbc:	232b      	movmi	r3, #43	; 0x2b
 8002fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8002fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc8:	d015      	beq.n	8002ff6 <_svfiprintf_r+0xf6>
 8002fca:	4654      	mov	r4, sl
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f04f 0c0a 	mov.w	ip, #10
 8002fd2:	9a07      	ldr	r2, [sp, #28]
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fda:	3b30      	subs	r3, #48	; 0x30
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d94e      	bls.n	800307e <_svfiprintf_r+0x17e>
 8002fe0:	b1b0      	cbz	r0, 8003010 <_svfiprintf_r+0x110>
 8002fe2:	9207      	str	r2, [sp, #28]
 8002fe4:	e014      	b.n	8003010 <_svfiprintf_r+0x110>
 8002fe6:	eba0 0308 	sub.w	r3, r0, r8
 8002fea:	fa09 f303 	lsl.w	r3, r9, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	46a2      	mov	sl, r4
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	e7d2      	b.n	8002f9c <_svfiprintf_r+0x9c>
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	1d19      	adds	r1, r3, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	9103      	str	r1, [sp, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bfbb      	ittet	lt
 8003002:	425b      	neglt	r3, r3
 8003004:	f042 0202 	orrlt.w	r2, r2, #2
 8003008:	9307      	strge	r3, [sp, #28]
 800300a:	9307      	strlt	r3, [sp, #28]
 800300c:	bfb8      	it	lt
 800300e:	9204      	strlt	r2, [sp, #16]
 8003010:	7823      	ldrb	r3, [r4, #0]
 8003012:	2b2e      	cmp	r3, #46	; 0x2e
 8003014:	d10c      	bne.n	8003030 <_svfiprintf_r+0x130>
 8003016:	7863      	ldrb	r3, [r4, #1]
 8003018:	2b2a      	cmp	r3, #42	; 0x2a
 800301a:	d135      	bne.n	8003088 <_svfiprintf_r+0x188>
 800301c:	9b03      	ldr	r3, [sp, #12]
 800301e:	3402      	adds	r4, #2
 8003020:	1d1a      	adds	r2, r3, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	9203      	str	r2, [sp, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	bfb8      	it	lt
 800302a:	f04f 33ff 	movlt.w	r3, #4294967295
 800302e:	9305      	str	r3, [sp, #20]
 8003030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030fc <_svfiprintf_r+0x1fc>
 8003034:	2203      	movs	r2, #3
 8003036:	4650      	mov	r0, sl
 8003038:	7821      	ldrb	r1, [r4, #0]
 800303a:	f000 f9f7 	bl	800342c <memchr>
 800303e:	b140      	cbz	r0, 8003052 <_svfiprintf_r+0x152>
 8003040:	2340      	movs	r3, #64	; 0x40
 8003042:	eba0 000a 	sub.w	r0, r0, sl
 8003046:	fa03 f000 	lsl.w	r0, r3, r0
 800304a:	9b04      	ldr	r3, [sp, #16]
 800304c:	3401      	adds	r4, #1
 800304e:	4303      	orrs	r3, r0
 8003050:	9304      	str	r3, [sp, #16]
 8003052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003056:	2206      	movs	r2, #6
 8003058:	4825      	ldr	r0, [pc, #148]	; (80030f0 <_svfiprintf_r+0x1f0>)
 800305a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800305e:	f000 f9e5 	bl	800342c <memchr>
 8003062:	2800      	cmp	r0, #0
 8003064:	d038      	beq.n	80030d8 <_svfiprintf_r+0x1d8>
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <_svfiprintf_r+0x1f4>)
 8003068:	bb1b      	cbnz	r3, 80030b2 <_svfiprintf_r+0x1b2>
 800306a:	9b03      	ldr	r3, [sp, #12]
 800306c:	3307      	adds	r3, #7
 800306e:	f023 0307 	bic.w	r3, r3, #7
 8003072:	3308      	adds	r3, #8
 8003074:	9303      	str	r3, [sp, #12]
 8003076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003078:	4433      	add	r3, r6
 800307a:	9309      	str	r3, [sp, #36]	; 0x24
 800307c:	e767      	b.n	8002f4e <_svfiprintf_r+0x4e>
 800307e:	460c      	mov	r4, r1
 8003080:	2001      	movs	r0, #1
 8003082:	fb0c 3202 	mla	r2, ip, r2, r3
 8003086:	e7a5      	b.n	8002fd4 <_svfiprintf_r+0xd4>
 8003088:	2300      	movs	r3, #0
 800308a:	f04f 0c0a 	mov.w	ip, #10
 800308e:	4619      	mov	r1, r3
 8003090:	3401      	adds	r4, #1
 8003092:	9305      	str	r3, [sp, #20]
 8003094:	4620      	mov	r0, r4
 8003096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800309a:	3a30      	subs	r2, #48	; 0x30
 800309c:	2a09      	cmp	r2, #9
 800309e:	d903      	bls.n	80030a8 <_svfiprintf_r+0x1a8>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0c5      	beq.n	8003030 <_svfiprintf_r+0x130>
 80030a4:	9105      	str	r1, [sp, #20]
 80030a6:	e7c3      	b.n	8003030 <_svfiprintf_r+0x130>
 80030a8:	4604      	mov	r4, r0
 80030aa:	2301      	movs	r3, #1
 80030ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80030b0:	e7f0      	b.n	8003094 <_svfiprintf_r+0x194>
 80030b2:	ab03      	add	r3, sp, #12
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	462a      	mov	r2, r5
 80030b8:	4638      	mov	r0, r7
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <_svfiprintf_r+0x1f8>)
 80030bc:	a904      	add	r1, sp, #16
 80030be:	f3af 8000 	nop.w
 80030c2:	1c42      	adds	r2, r0, #1
 80030c4:	4606      	mov	r6, r0
 80030c6:	d1d6      	bne.n	8003076 <_svfiprintf_r+0x176>
 80030c8:	89ab      	ldrh	r3, [r5, #12]
 80030ca:	065b      	lsls	r3, r3, #25
 80030cc:	f53f af2c 	bmi.w	8002f28 <_svfiprintf_r+0x28>
 80030d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030d2:	b01d      	add	sp, #116	; 0x74
 80030d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d8:	ab03      	add	r3, sp, #12
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	462a      	mov	r2, r5
 80030de:	4638      	mov	r0, r7
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <_svfiprintf_r+0x1f8>)
 80030e2:	a904      	add	r1, sp, #16
 80030e4:	f000 f87c 	bl	80031e0 <_printf_i>
 80030e8:	e7eb      	b.n	80030c2 <_svfiprintf_r+0x1c2>
 80030ea:	bf00      	nop
 80030ec:	080038e4 	.word	0x080038e4
 80030f0:	080038ee 	.word	0x080038ee
 80030f4:	00000000 	.word	0x00000000
 80030f8:	08002e49 	.word	0x08002e49
 80030fc:	080038ea 	.word	0x080038ea

08003100 <_printf_common>:
 8003100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	4616      	mov	r6, r2
 8003106:	4699      	mov	r9, r3
 8003108:	688a      	ldr	r2, [r1, #8]
 800310a:	690b      	ldr	r3, [r1, #16]
 800310c:	4607      	mov	r7, r0
 800310e:	4293      	cmp	r3, r2
 8003110:	bfb8      	it	lt
 8003112:	4613      	movlt	r3, r2
 8003114:	6033      	str	r3, [r6, #0]
 8003116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800311a:	460c      	mov	r4, r1
 800311c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003120:	b10a      	cbz	r2, 8003126 <_printf_common+0x26>
 8003122:	3301      	adds	r3, #1
 8003124:	6033      	str	r3, [r6, #0]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	0699      	lsls	r1, r3, #26
 800312a:	bf42      	ittt	mi
 800312c:	6833      	ldrmi	r3, [r6, #0]
 800312e:	3302      	addmi	r3, #2
 8003130:	6033      	strmi	r3, [r6, #0]
 8003132:	6825      	ldr	r5, [r4, #0]
 8003134:	f015 0506 	ands.w	r5, r5, #6
 8003138:	d106      	bne.n	8003148 <_printf_common+0x48>
 800313a:	f104 0a19 	add.w	sl, r4, #25
 800313e:	68e3      	ldr	r3, [r4, #12]
 8003140:	6832      	ldr	r2, [r6, #0]
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	42ab      	cmp	r3, r5
 8003146:	dc28      	bgt.n	800319a <_printf_common+0x9a>
 8003148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800314c:	1e13      	subs	r3, r2, #0
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	bf18      	it	ne
 8003152:	2301      	movne	r3, #1
 8003154:	0692      	lsls	r2, r2, #26
 8003156:	d42d      	bmi.n	80031b4 <_printf_common+0xb4>
 8003158:	4649      	mov	r1, r9
 800315a:	4638      	mov	r0, r7
 800315c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003160:	47c0      	blx	r8
 8003162:	3001      	adds	r0, #1
 8003164:	d020      	beq.n	80031a8 <_printf_common+0xa8>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	68e5      	ldr	r5, [r4, #12]
 800316a:	f003 0306 	and.w	r3, r3, #6
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf18      	it	ne
 8003172:	2500      	movne	r5, #0
 8003174:	6832      	ldr	r2, [r6, #0]
 8003176:	f04f 0600 	mov.w	r6, #0
 800317a:	68a3      	ldr	r3, [r4, #8]
 800317c:	bf08      	it	eq
 800317e:	1aad      	subeq	r5, r5, r2
 8003180:	6922      	ldr	r2, [r4, #16]
 8003182:	bf08      	it	eq
 8003184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003188:	4293      	cmp	r3, r2
 800318a:	bfc4      	itt	gt
 800318c:	1a9b      	subgt	r3, r3, r2
 800318e:	18ed      	addgt	r5, r5, r3
 8003190:	341a      	adds	r4, #26
 8003192:	42b5      	cmp	r5, r6
 8003194:	d11a      	bne.n	80031cc <_printf_common+0xcc>
 8003196:	2000      	movs	r0, #0
 8003198:	e008      	b.n	80031ac <_printf_common+0xac>
 800319a:	2301      	movs	r3, #1
 800319c:	4652      	mov	r2, sl
 800319e:	4649      	mov	r1, r9
 80031a0:	4638      	mov	r0, r7
 80031a2:	47c0      	blx	r8
 80031a4:	3001      	adds	r0, #1
 80031a6:	d103      	bne.n	80031b0 <_printf_common+0xb0>
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b0:	3501      	adds	r5, #1
 80031b2:	e7c4      	b.n	800313e <_printf_common+0x3e>
 80031b4:	2030      	movs	r0, #48	; 0x30
 80031b6:	18e1      	adds	r1, r4, r3
 80031b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031c2:	4422      	add	r2, r4
 80031c4:	3302      	adds	r3, #2
 80031c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ca:	e7c5      	b.n	8003158 <_printf_common+0x58>
 80031cc:	2301      	movs	r3, #1
 80031ce:	4622      	mov	r2, r4
 80031d0:	4649      	mov	r1, r9
 80031d2:	4638      	mov	r0, r7
 80031d4:	47c0      	blx	r8
 80031d6:	3001      	adds	r0, #1
 80031d8:	d0e6      	beq.n	80031a8 <_printf_common+0xa8>
 80031da:	3601      	adds	r6, #1
 80031dc:	e7d9      	b.n	8003192 <_printf_common+0x92>
	...

080031e0 <_printf_i>:
 80031e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031e4:	460c      	mov	r4, r1
 80031e6:	7e27      	ldrb	r7, [r4, #24]
 80031e8:	4691      	mov	r9, r2
 80031ea:	2f78      	cmp	r7, #120	; 0x78
 80031ec:	4680      	mov	r8, r0
 80031ee:	469a      	mov	sl, r3
 80031f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031f6:	d807      	bhi.n	8003208 <_printf_i+0x28>
 80031f8:	2f62      	cmp	r7, #98	; 0x62
 80031fa:	d80a      	bhi.n	8003212 <_printf_i+0x32>
 80031fc:	2f00      	cmp	r7, #0
 80031fe:	f000 80d9 	beq.w	80033b4 <_printf_i+0x1d4>
 8003202:	2f58      	cmp	r7, #88	; 0x58
 8003204:	f000 80a4 	beq.w	8003350 <_printf_i+0x170>
 8003208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800320c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003210:	e03a      	b.n	8003288 <_printf_i+0xa8>
 8003212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003216:	2b15      	cmp	r3, #21
 8003218:	d8f6      	bhi.n	8003208 <_printf_i+0x28>
 800321a:	a001      	add	r0, pc, #4	; (adr r0, 8003220 <_printf_i+0x40>)
 800321c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003220:	08003279 	.word	0x08003279
 8003224:	0800328d 	.word	0x0800328d
 8003228:	08003209 	.word	0x08003209
 800322c:	08003209 	.word	0x08003209
 8003230:	08003209 	.word	0x08003209
 8003234:	08003209 	.word	0x08003209
 8003238:	0800328d 	.word	0x0800328d
 800323c:	08003209 	.word	0x08003209
 8003240:	08003209 	.word	0x08003209
 8003244:	08003209 	.word	0x08003209
 8003248:	08003209 	.word	0x08003209
 800324c:	0800339b 	.word	0x0800339b
 8003250:	080032bd 	.word	0x080032bd
 8003254:	0800337d 	.word	0x0800337d
 8003258:	08003209 	.word	0x08003209
 800325c:	08003209 	.word	0x08003209
 8003260:	080033bd 	.word	0x080033bd
 8003264:	08003209 	.word	0x08003209
 8003268:	080032bd 	.word	0x080032bd
 800326c:	08003209 	.word	0x08003209
 8003270:	08003209 	.word	0x08003209
 8003274:	08003385 	.word	0x08003385
 8003278:	680b      	ldr	r3, [r1, #0]
 800327a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	600a      	str	r2, [r1, #0]
 8003284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003288:	2301      	movs	r3, #1
 800328a:	e0a4      	b.n	80033d6 <_printf_i+0x1f6>
 800328c:	6825      	ldr	r5, [r4, #0]
 800328e:	6808      	ldr	r0, [r1, #0]
 8003290:	062e      	lsls	r6, r5, #24
 8003292:	f100 0304 	add.w	r3, r0, #4
 8003296:	d50a      	bpl.n	80032ae <_printf_i+0xce>
 8003298:	6805      	ldr	r5, [r0, #0]
 800329a:	600b      	str	r3, [r1, #0]
 800329c:	2d00      	cmp	r5, #0
 800329e:	da03      	bge.n	80032a8 <_printf_i+0xc8>
 80032a0:	232d      	movs	r3, #45	; 0x2d
 80032a2:	426d      	negs	r5, r5
 80032a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a8:	230a      	movs	r3, #10
 80032aa:	485e      	ldr	r0, [pc, #376]	; (8003424 <_printf_i+0x244>)
 80032ac:	e019      	b.n	80032e2 <_printf_i+0x102>
 80032ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032b2:	6805      	ldr	r5, [r0, #0]
 80032b4:	600b      	str	r3, [r1, #0]
 80032b6:	bf18      	it	ne
 80032b8:	b22d      	sxthne	r5, r5
 80032ba:	e7ef      	b.n	800329c <_printf_i+0xbc>
 80032bc:	680b      	ldr	r3, [r1, #0]
 80032be:	6825      	ldr	r5, [r4, #0]
 80032c0:	1d18      	adds	r0, r3, #4
 80032c2:	6008      	str	r0, [r1, #0]
 80032c4:	0628      	lsls	r0, r5, #24
 80032c6:	d501      	bpl.n	80032cc <_printf_i+0xec>
 80032c8:	681d      	ldr	r5, [r3, #0]
 80032ca:	e002      	b.n	80032d2 <_printf_i+0xf2>
 80032cc:	0669      	lsls	r1, r5, #25
 80032ce:	d5fb      	bpl.n	80032c8 <_printf_i+0xe8>
 80032d0:	881d      	ldrh	r5, [r3, #0]
 80032d2:	2f6f      	cmp	r7, #111	; 0x6f
 80032d4:	bf0c      	ite	eq
 80032d6:	2308      	moveq	r3, #8
 80032d8:	230a      	movne	r3, #10
 80032da:	4852      	ldr	r0, [pc, #328]	; (8003424 <_printf_i+0x244>)
 80032dc:	2100      	movs	r1, #0
 80032de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032e2:	6866      	ldr	r6, [r4, #4]
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	bfa8      	it	ge
 80032e8:	6821      	ldrge	r1, [r4, #0]
 80032ea:	60a6      	str	r6, [r4, #8]
 80032ec:	bfa4      	itt	ge
 80032ee:	f021 0104 	bicge.w	r1, r1, #4
 80032f2:	6021      	strge	r1, [r4, #0]
 80032f4:	b90d      	cbnz	r5, 80032fa <_printf_i+0x11a>
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d04d      	beq.n	8003396 <_printf_i+0x1b6>
 80032fa:	4616      	mov	r6, r2
 80032fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003300:	fb03 5711 	mls	r7, r3, r1, r5
 8003304:	5dc7      	ldrb	r7, [r0, r7]
 8003306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800330a:	462f      	mov	r7, r5
 800330c:	42bb      	cmp	r3, r7
 800330e:	460d      	mov	r5, r1
 8003310:	d9f4      	bls.n	80032fc <_printf_i+0x11c>
 8003312:	2b08      	cmp	r3, #8
 8003314:	d10b      	bne.n	800332e <_printf_i+0x14e>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	07df      	lsls	r7, r3, #31
 800331a:	d508      	bpl.n	800332e <_printf_i+0x14e>
 800331c:	6923      	ldr	r3, [r4, #16]
 800331e:	6861      	ldr	r1, [r4, #4]
 8003320:	4299      	cmp	r1, r3
 8003322:	bfde      	ittt	le
 8003324:	2330      	movle	r3, #48	; 0x30
 8003326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800332a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800332e:	1b92      	subs	r2, r2, r6
 8003330:	6122      	str	r2, [r4, #16]
 8003332:	464b      	mov	r3, r9
 8003334:	4621      	mov	r1, r4
 8003336:	4640      	mov	r0, r8
 8003338:	f8cd a000 	str.w	sl, [sp]
 800333c:	aa03      	add	r2, sp, #12
 800333e:	f7ff fedf 	bl	8003100 <_printf_common>
 8003342:	3001      	adds	r0, #1
 8003344:	d14c      	bne.n	80033e0 <_printf_i+0x200>
 8003346:	f04f 30ff 	mov.w	r0, #4294967295
 800334a:	b004      	add	sp, #16
 800334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003350:	4834      	ldr	r0, [pc, #208]	; (8003424 <_printf_i+0x244>)
 8003352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003356:	680e      	ldr	r6, [r1, #0]
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f856 5b04 	ldr.w	r5, [r6], #4
 800335e:	061f      	lsls	r7, r3, #24
 8003360:	600e      	str	r6, [r1, #0]
 8003362:	d514      	bpl.n	800338e <_printf_i+0x1ae>
 8003364:	07d9      	lsls	r1, r3, #31
 8003366:	bf44      	itt	mi
 8003368:	f043 0320 	orrmi.w	r3, r3, #32
 800336c:	6023      	strmi	r3, [r4, #0]
 800336e:	b91d      	cbnz	r5, 8003378 <_printf_i+0x198>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	f023 0320 	bic.w	r3, r3, #32
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	2310      	movs	r3, #16
 800337a:	e7af      	b.n	80032dc <_printf_i+0xfc>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	f043 0320 	orr.w	r3, r3, #32
 8003382:	6023      	str	r3, [r4, #0]
 8003384:	2378      	movs	r3, #120	; 0x78
 8003386:	4828      	ldr	r0, [pc, #160]	; (8003428 <_printf_i+0x248>)
 8003388:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800338c:	e7e3      	b.n	8003356 <_printf_i+0x176>
 800338e:	065e      	lsls	r6, r3, #25
 8003390:	bf48      	it	mi
 8003392:	b2ad      	uxthmi	r5, r5
 8003394:	e7e6      	b.n	8003364 <_printf_i+0x184>
 8003396:	4616      	mov	r6, r2
 8003398:	e7bb      	b.n	8003312 <_printf_i+0x132>
 800339a:	680b      	ldr	r3, [r1, #0]
 800339c:	6826      	ldr	r6, [r4, #0]
 800339e:	1d1d      	adds	r5, r3, #4
 80033a0:	6960      	ldr	r0, [r4, #20]
 80033a2:	600d      	str	r5, [r1, #0]
 80033a4:	0635      	lsls	r5, r6, #24
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	d501      	bpl.n	80033ae <_printf_i+0x1ce>
 80033aa:	6018      	str	r0, [r3, #0]
 80033ac:	e002      	b.n	80033b4 <_printf_i+0x1d4>
 80033ae:	0671      	lsls	r1, r6, #25
 80033b0:	d5fb      	bpl.n	80033aa <_printf_i+0x1ca>
 80033b2:	8018      	strh	r0, [r3, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	4616      	mov	r6, r2
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	e7ba      	b.n	8003332 <_printf_i+0x152>
 80033bc:	680b      	ldr	r3, [r1, #0]
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	600a      	str	r2, [r1, #0]
 80033c2:	681e      	ldr	r6, [r3, #0]
 80033c4:	2100      	movs	r1, #0
 80033c6:	4630      	mov	r0, r6
 80033c8:	6862      	ldr	r2, [r4, #4]
 80033ca:	f000 f82f 	bl	800342c <memchr>
 80033ce:	b108      	cbz	r0, 80033d4 <_printf_i+0x1f4>
 80033d0:	1b80      	subs	r0, r0, r6
 80033d2:	6060      	str	r0, [r4, #4]
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	6123      	str	r3, [r4, #16]
 80033d8:	2300      	movs	r3, #0
 80033da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033de:	e7a8      	b.n	8003332 <_printf_i+0x152>
 80033e0:	4632      	mov	r2, r6
 80033e2:	4649      	mov	r1, r9
 80033e4:	4640      	mov	r0, r8
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	47d0      	blx	sl
 80033ea:	3001      	adds	r0, #1
 80033ec:	d0ab      	beq.n	8003346 <_printf_i+0x166>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	079b      	lsls	r3, r3, #30
 80033f2:	d413      	bmi.n	800341c <_printf_i+0x23c>
 80033f4:	68e0      	ldr	r0, [r4, #12]
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	4298      	cmp	r0, r3
 80033fa:	bfb8      	it	lt
 80033fc:	4618      	movlt	r0, r3
 80033fe:	e7a4      	b.n	800334a <_printf_i+0x16a>
 8003400:	2301      	movs	r3, #1
 8003402:	4632      	mov	r2, r6
 8003404:	4649      	mov	r1, r9
 8003406:	4640      	mov	r0, r8
 8003408:	47d0      	blx	sl
 800340a:	3001      	adds	r0, #1
 800340c:	d09b      	beq.n	8003346 <_printf_i+0x166>
 800340e:	3501      	adds	r5, #1
 8003410:	68e3      	ldr	r3, [r4, #12]
 8003412:	9903      	ldr	r1, [sp, #12]
 8003414:	1a5b      	subs	r3, r3, r1
 8003416:	42ab      	cmp	r3, r5
 8003418:	dcf2      	bgt.n	8003400 <_printf_i+0x220>
 800341a:	e7eb      	b.n	80033f4 <_printf_i+0x214>
 800341c:	2500      	movs	r5, #0
 800341e:	f104 0619 	add.w	r6, r4, #25
 8003422:	e7f5      	b.n	8003410 <_printf_i+0x230>
 8003424:	080038f5 	.word	0x080038f5
 8003428:	08003906 	.word	0x08003906

0800342c <memchr>:
 800342c:	4603      	mov	r3, r0
 800342e:	b510      	push	{r4, lr}
 8003430:	b2c9      	uxtb	r1, r1
 8003432:	4402      	add	r2, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	4618      	mov	r0, r3
 8003438:	d101      	bne.n	800343e <memchr+0x12>
 800343a:	2000      	movs	r0, #0
 800343c:	e003      	b.n	8003446 <memchr+0x1a>
 800343e:	7804      	ldrb	r4, [r0, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	428c      	cmp	r4, r1
 8003444:	d1f6      	bne.n	8003434 <memchr+0x8>
 8003446:	bd10      	pop	{r4, pc}

08003448 <memcpy>:
 8003448:	440a      	add	r2, r1
 800344a:	4291      	cmp	r1, r2
 800344c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003450:	d100      	bne.n	8003454 <memcpy+0xc>
 8003452:	4770      	bx	lr
 8003454:	b510      	push	{r4, lr}
 8003456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800345a:	4291      	cmp	r1, r2
 800345c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003460:	d1f9      	bne.n	8003456 <memcpy+0xe>
 8003462:	bd10      	pop	{r4, pc}

08003464 <memmove>:
 8003464:	4288      	cmp	r0, r1
 8003466:	b510      	push	{r4, lr}
 8003468:	eb01 0402 	add.w	r4, r1, r2
 800346c:	d902      	bls.n	8003474 <memmove+0x10>
 800346e:	4284      	cmp	r4, r0
 8003470:	4623      	mov	r3, r4
 8003472:	d807      	bhi.n	8003484 <memmove+0x20>
 8003474:	1e43      	subs	r3, r0, #1
 8003476:	42a1      	cmp	r1, r4
 8003478:	d008      	beq.n	800348c <memmove+0x28>
 800347a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800347e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003482:	e7f8      	b.n	8003476 <memmove+0x12>
 8003484:	4601      	mov	r1, r0
 8003486:	4402      	add	r2, r0
 8003488:	428a      	cmp	r2, r1
 800348a:	d100      	bne.n	800348e <memmove+0x2a>
 800348c:	bd10      	pop	{r4, pc}
 800348e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003496:	e7f7      	b.n	8003488 <memmove+0x24>

08003498 <_free_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4605      	mov	r5, r0
 800349c:	2900      	cmp	r1, #0
 800349e:	d043      	beq.n	8003528 <_free_r+0x90>
 80034a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a4:	1f0c      	subs	r4, r1, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bfb8      	it	lt
 80034aa:	18e4      	addlt	r4, r4, r3
 80034ac:	f000 f8d0 	bl	8003650 <__malloc_lock>
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <_free_r+0x94>)
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	4610      	mov	r0, r2
 80034b6:	b933      	cbnz	r3, 80034c6 <_free_r+0x2e>
 80034b8:	6063      	str	r3, [r4, #4]
 80034ba:	6014      	str	r4, [r2, #0]
 80034bc:	4628      	mov	r0, r5
 80034be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034c2:	f000 b8cb 	b.w	800365c <__malloc_unlock>
 80034c6:	42a3      	cmp	r3, r4
 80034c8:	d90a      	bls.n	80034e0 <_free_r+0x48>
 80034ca:	6821      	ldr	r1, [r4, #0]
 80034cc:	1862      	adds	r2, r4, r1
 80034ce:	4293      	cmp	r3, r2
 80034d0:	bf01      	itttt	eq
 80034d2:	681a      	ldreq	r2, [r3, #0]
 80034d4:	685b      	ldreq	r3, [r3, #4]
 80034d6:	1852      	addeq	r2, r2, r1
 80034d8:	6022      	streq	r2, [r4, #0]
 80034da:	6063      	str	r3, [r4, #4]
 80034dc:	6004      	str	r4, [r0, #0]
 80034de:	e7ed      	b.n	80034bc <_free_r+0x24>
 80034e0:	461a      	mov	r2, r3
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	b10b      	cbz	r3, 80034ea <_free_r+0x52>
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	d9fa      	bls.n	80034e0 <_free_r+0x48>
 80034ea:	6811      	ldr	r1, [r2, #0]
 80034ec:	1850      	adds	r0, r2, r1
 80034ee:	42a0      	cmp	r0, r4
 80034f0:	d10b      	bne.n	800350a <_free_r+0x72>
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	4401      	add	r1, r0
 80034f6:	1850      	adds	r0, r2, r1
 80034f8:	4283      	cmp	r3, r0
 80034fa:	6011      	str	r1, [r2, #0]
 80034fc:	d1de      	bne.n	80034bc <_free_r+0x24>
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4401      	add	r1, r0
 8003504:	6011      	str	r1, [r2, #0]
 8003506:	6053      	str	r3, [r2, #4]
 8003508:	e7d8      	b.n	80034bc <_free_r+0x24>
 800350a:	d902      	bls.n	8003512 <_free_r+0x7a>
 800350c:	230c      	movs	r3, #12
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	e7d4      	b.n	80034bc <_free_r+0x24>
 8003512:	6820      	ldr	r0, [r4, #0]
 8003514:	1821      	adds	r1, r4, r0
 8003516:	428b      	cmp	r3, r1
 8003518:	bf01      	itttt	eq
 800351a:	6819      	ldreq	r1, [r3, #0]
 800351c:	685b      	ldreq	r3, [r3, #4]
 800351e:	1809      	addeq	r1, r1, r0
 8003520:	6021      	streq	r1, [r4, #0]
 8003522:	6063      	str	r3, [r4, #4]
 8003524:	6054      	str	r4, [r2, #4]
 8003526:	e7c9      	b.n	80034bc <_free_r+0x24>
 8003528:	bd38      	pop	{r3, r4, r5, pc}
 800352a:	bf00      	nop
 800352c:	200002e0 	.word	0x200002e0

08003530 <_malloc_r>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	1ccd      	adds	r5, r1, #3
 8003534:	f025 0503 	bic.w	r5, r5, #3
 8003538:	3508      	adds	r5, #8
 800353a:	2d0c      	cmp	r5, #12
 800353c:	bf38      	it	cc
 800353e:	250c      	movcc	r5, #12
 8003540:	2d00      	cmp	r5, #0
 8003542:	4606      	mov	r6, r0
 8003544:	db01      	blt.n	800354a <_malloc_r+0x1a>
 8003546:	42a9      	cmp	r1, r5
 8003548:	d903      	bls.n	8003552 <_malloc_r+0x22>
 800354a:	230c      	movs	r3, #12
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	2000      	movs	r0, #0
 8003550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003552:	f000 f87d 	bl	8003650 <__malloc_lock>
 8003556:	4921      	ldr	r1, [pc, #132]	; (80035dc <_malloc_r+0xac>)
 8003558:	680a      	ldr	r2, [r1, #0]
 800355a:	4614      	mov	r4, r2
 800355c:	b99c      	cbnz	r4, 8003586 <_malloc_r+0x56>
 800355e:	4f20      	ldr	r7, [pc, #128]	; (80035e0 <_malloc_r+0xb0>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b923      	cbnz	r3, 800356e <_malloc_r+0x3e>
 8003564:	4621      	mov	r1, r4
 8003566:	4630      	mov	r0, r6
 8003568:	f000 f862 	bl	8003630 <_sbrk_r>
 800356c:	6038      	str	r0, [r7, #0]
 800356e:	4629      	mov	r1, r5
 8003570:	4630      	mov	r0, r6
 8003572:	f000 f85d 	bl	8003630 <_sbrk_r>
 8003576:	1c43      	adds	r3, r0, #1
 8003578:	d123      	bne.n	80035c2 <_malloc_r+0x92>
 800357a:	230c      	movs	r3, #12
 800357c:	4630      	mov	r0, r6
 800357e:	6033      	str	r3, [r6, #0]
 8003580:	f000 f86c 	bl	800365c <__malloc_unlock>
 8003584:	e7e3      	b.n	800354e <_malloc_r+0x1e>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	1b5b      	subs	r3, r3, r5
 800358a:	d417      	bmi.n	80035bc <_malloc_r+0x8c>
 800358c:	2b0b      	cmp	r3, #11
 800358e:	d903      	bls.n	8003598 <_malloc_r+0x68>
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	441c      	add	r4, r3
 8003594:	6025      	str	r5, [r4, #0]
 8003596:	e004      	b.n	80035a2 <_malloc_r+0x72>
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	42a2      	cmp	r2, r4
 800359c:	bf0c      	ite	eq
 800359e:	600b      	streq	r3, [r1, #0]
 80035a0:	6053      	strne	r3, [r2, #4]
 80035a2:	4630      	mov	r0, r6
 80035a4:	f000 f85a 	bl	800365c <__malloc_unlock>
 80035a8:	f104 000b 	add.w	r0, r4, #11
 80035ac:	1d23      	adds	r3, r4, #4
 80035ae:	f020 0007 	bic.w	r0, r0, #7
 80035b2:	1ac2      	subs	r2, r0, r3
 80035b4:	d0cc      	beq.n	8003550 <_malloc_r+0x20>
 80035b6:	1a1b      	subs	r3, r3, r0
 80035b8:	50a3      	str	r3, [r4, r2]
 80035ba:	e7c9      	b.n	8003550 <_malloc_r+0x20>
 80035bc:	4622      	mov	r2, r4
 80035be:	6864      	ldr	r4, [r4, #4]
 80035c0:	e7cc      	b.n	800355c <_malloc_r+0x2c>
 80035c2:	1cc4      	adds	r4, r0, #3
 80035c4:	f024 0403 	bic.w	r4, r4, #3
 80035c8:	42a0      	cmp	r0, r4
 80035ca:	d0e3      	beq.n	8003594 <_malloc_r+0x64>
 80035cc:	1a21      	subs	r1, r4, r0
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 f82e 	bl	8003630 <_sbrk_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d1dd      	bne.n	8003594 <_malloc_r+0x64>
 80035d8:	e7cf      	b.n	800357a <_malloc_r+0x4a>
 80035da:	bf00      	nop
 80035dc:	200002e0 	.word	0x200002e0
 80035e0:	200002e4 	.word	0x200002e4

080035e4 <_realloc_r>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	4607      	mov	r7, r0
 80035e8:	4614      	mov	r4, r2
 80035ea:	460e      	mov	r6, r1
 80035ec:	b921      	cbnz	r1, 80035f8 <_realloc_r+0x14>
 80035ee:	4611      	mov	r1, r2
 80035f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035f4:	f7ff bf9c 	b.w	8003530 <_malloc_r>
 80035f8:	b922      	cbnz	r2, 8003604 <_realloc_r+0x20>
 80035fa:	f7ff ff4d 	bl	8003498 <_free_r>
 80035fe:	4625      	mov	r5, r4
 8003600:	4628      	mov	r0, r5
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	f000 f830 	bl	8003668 <_malloc_usable_size_r>
 8003608:	42a0      	cmp	r0, r4
 800360a:	d20f      	bcs.n	800362c <_realloc_r+0x48>
 800360c:	4621      	mov	r1, r4
 800360e:	4638      	mov	r0, r7
 8003610:	f7ff ff8e 	bl	8003530 <_malloc_r>
 8003614:	4605      	mov	r5, r0
 8003616:	2800      	cmp	r0, #0
 8003618:	d0f2      	beq.n	8003600 <_realloc_r+0x1c>
 800361a:	4631      	mov	r1, r6
 800361c:	4622      	mov	r2, r4
 800361e:	f7ff ff13 	bl	8003448 <memcpy>
 8003622:	4631      	mov	r1, r6
 8003624:	4638      	mov	r0, r7
 8003626:	f7ff ff37 	bl	8003498 <_free_r>
 800362a:	e7e9      	b.n	8003600 <_realloc_r+0x1c>
 800362c:	4635      	mov	r5, r6
 800362e:	e7e7      	b.n	8003600 <_realloc_r+0x1c>

08003630 <_sbrk_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	2300      	movs	r3, #0
 8003634:	4d05      	ldr	r5, [pc, #20]	; (800364c <_sbrk_r+0x1c>)
 8003636:	4604      	mov	r4, r0
 8003638:	4608      	mov	r0, r1
 800363a:	602b      	str	r3, [r5, #0]
 800363c:	f7fe f8e0 	bl	8001800 <_sbrk>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_sbrk_r+0x1a>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_sbrk_r+0x1a>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	20000370 	.word	0x20000370

08003650 <__malloc_lock>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__malloc_lock+0x8>)
 8003652:	f000 b811 	b.w	8003678 <__retarget_lock_acquire_recursive>
 8003656:	bf00      	nop
 8003658:	20000378 	.word	0x20000378

0800365c <__malloc_unlock>:
 800365c:	4801      	ldr	r0, [pc, #4]	; (8003664 <__malloc_unlock+0x8>)
 800365e:	f000 b80c 	b.w	800367a <__retarget_lock_release_recursive>
 8003662:	bf00      	nop
 8003664:	20000378 	.word	0x20000378

08003668 <_malloc_usable_size_r>:
 8003668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800366c:	1f18      	subs	r0, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	bfbc      	itt	lt
 8003672:	580b      	ldrlt	r3, [r1, r0]
 8003674:	18c0      	addlt	r0, r0, r3
 8003676:	4770      	bx	lr

08003678 <__retarget_lock_acquire_recursive>:
 8003678:	4770      	bx	lr

0800367a <__retarget_lock_release_recursive>:
 800367a:	4770      	bx	lr

0800367c <_init>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr

08003688 <_fini>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr
