
rc-car-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc0  08002dc0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc0  08002dc0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc0  08002dc0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000004  08002dcc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08002dcc  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_line   000087c3  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007845  00000000  00000000  000287f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f33  00000000  00000000  00030035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007ed5d  00000000  00000000  00032920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008a0  00000000  00000000  000b1680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017a10  00000000  00000000  000b1f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a0  00000000  00000000  000c9984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d80 	.word	0x08002d80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08002d80 	.word	0x08002d80

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 fef9 	bl	8001f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f002 fdd7 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 fe87 	bl	8000e8c <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000188:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000190:	20000258 	.word	0x20000258

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(uint16_t *all_virt_addr_table, uint16_t all_virt_addr_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]
	VirtAddVarTab = all_virt_addr_table;
 80001a4:	4a9f      	ldr	r2, [pc, #636]	; (8000424 <EE_Init+0x28c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6013      	str	r3, [r2, #0]
	EepromTotalDataSize = all_virt_addr_size;
 80001aa:	4a9f      	ldr	r2, [pc, #636]	; (8000428 <EE_Init+0x290>)
 80001ac:	887b      	ldrh	r3, [r7, #2]
 80001ae:	8013      	strh	r3, [r2, #0]

  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80001b0:	2306      	movs	r3, #6
 80001b2:	827b      	strh	r3, [r7, #18]
 80001b4:	2306      	movs	r3, #6
 80001b6:	823b      	strh	r3, [r7, #16]
  uint16_t VarIdx = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	82fb      	strh	r3, [r7, #22]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	81fb      	strh	r3, [r7, #14]
 80001c0:	2300      	movs	r3, #0
 80001c2:	81bb      	strh	r3, [r7, #12]
  int16_t x = -1;
 80001c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c8:	82bb      	strh	r3, [r7, #20]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80001ca:	4b98      	ldr	r3, [pc, #608]	; (800042c <EE_Init+0x294>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	827b      	strh	r3, [r7, #18]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80001d0:	4b97      	ldr	r3, [pc, #604]	; (8000430 <EE_Init+0x298>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	823b      	strh	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80001d6:	8a7b      	ldrh	r3, [r7, #18]
 80001d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001dc:	4293      	cmp	r3, r2
 80001de:	d00b      	beq.n	80001f8 <EE_Init+0x60>
 80001e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80001e4:	f280 8136 	bge.w	8000454 <EE_Init+0x2bc>
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	f000 80b5 	beq.w	8000358 <EE_Init+0x1c0>
 80001ee:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d033      	beq.n	800025e <EE_Init+0xc6>
 80001f6:	e12d      	b.n	8000454 <EE_Init+0x2bc>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d10a      	bne.n	8000214 <EE_Init+0x7c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80001fe:	488b      	ldr	r0, [pc, #556]	; (800042c <EE_Init+0x294>)
 8000200:	f001 feca 	bl	8001f98 <FLASH_ErasePage>
 8000204:	4603      	mov	r3, r0
 8000206:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000208:	897b      	ldrh	r3, [r7, #10]
 800020a:	2b04      	cmp	r3, #4
 800020c:	f000 812b 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000210:	897b      	ldrh	r3, [r7, #10]
 8000212:	e130      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000214:	8a3b      	ldrh	r3, [r7, #16]
 8000216:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800021a:	4293      	cmp	r3, r2
 800021c:	d115      	bne.n	800024a <EE_Init+0xb2>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800021e:	4883      	ldr	r0, [pc, #524]	; (800042c <EE_Init+0x294>)
 8000220:	f001 feba 	bl	8001f98 <FLASH_ErasePage>
 8000224:	4603      	mov	r3, r0
 8000226:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000228:	897b      	ldrh	r3, [r7, #10]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d001      	beq.n	8000232 <EE_Init+0x9a>
        {
          return FlashStatus;
 800022e:	897b      	ldrh	r3, [r7, #10]
 8000230:	e121      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000232:	2100      	movs	r1, #0
 8000234:	487e      	ldr	r0, [pc, #504]	; (8000430 <EE_Init+0x298>)
 8000236:	f001 fee1 	bl	8001ffc <FLASH_ProgramHalfWord>
 800023a:	4603      	mov	r3, r0
 800023c:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800023e:	897b      	ldrh	r3, [r7, #10]
 8000240:	2b04      	cmp	r3, #4
 8000242:	f000 8110 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 8000246:	897b      	ldrh	r3, [r7, #10]
 8000248:	e115      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800024a:	f000 f979 	bl	8000540 <EE_Format>
 800024e:	4603      	mov	r3, r0
 8000250:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000252:	897b      	ldrh	r3, [r7, #10]
 8000254:	2b04      	cmp	r3, #4
 8000256:	f000 8106 	beq.w	8000466 <EE_Init+0x2ce>
        {
          return FlashStatus;
 800025a:	897b      	ldrh	r3, [r7, #10]
 800025c:	e10b      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800025e:	8a3b      	ldrh	r3, [r7, #16]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d154      	bne.n	800030e <EE_Init+0x176>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000264:	2300      	movs	r3, #0
 8000266:	82fb      	strh	r3, [r7, #22]
 8000268:	e036      	b.n	80002d8 <EE_Init+0x140>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800026a:	4b72      	ldr	r3, [pc, #456]	; (8000434 <EE_Init+0x29c>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	b29a      	uxth	r2, r3
 8000270:	4b6c      	ldr	r3, [pc, #432]	; (8000424 <EE_Init+0x28c>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	8afb      	ldrh	r3, [r7, #22]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	440b      	add	r3, r1
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d101      	bne.n	8000284 <EE_Init+0xec>
          {
            x = VarIdx;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 8000284:	8afa      	ldrh	r2, [r7, #22]
 8000286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800028a:	429a      	cmp	r2, r3
 800028c:	d021      	beq.n	80002d2 <EE_Init+0x13a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800028e:	4b65      	ldr	r3, [pc, #404]	; (8000424 <EE_Init+0x28c>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	8afb      	ldrh	r3, [r7, #22]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4413      	add	r3, r2
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	4967      	ldr	r1, [pc, #412]	; (8000438 <EE_Init+0x2a0>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f8f1 	bl	8000484 <EE_ReadVariable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d012      	beq.n	80002d2 <EE_Init+0x13a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80002ac:	4b5d      	ldr	r3, [pc, #372]	; (8000424 <EE_Init+0x28c>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	8afb      	ldrh	r3, [r7, #22]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	4a5f      	ldr	r2, [pc, #380]	; (8000438 <EE_Init+0x2a0>)
 80002ba:	8812      	ldrh	r2, [r2, #0]
 80002bc:	4611      	mov	r1, r2
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f9aa 	bl	8000618 <EE_VerifyPageFullWriteVariable>
 80002c4:	4603      	mov	r3, r0
 80002c6:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d001      	beq.n	80002d2 <EE_Init+0x13a>
              {
                return EepromStatus;
 80002ce:	89fb      	ldrh	r3, [r7, #14]
 80002d0:	e0d1      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3301      	adds	r3, #1
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	4b53      	ldr	r3, [pc, #332]	; (8000428 <EE_Init+0x290>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	8afa      	ldrh	r2, [r7, #22]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3c3      	bcc.n	800026a <EE_Init+0xd2>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	4851      	ldr	r0, [pc, #324]	; (800042c <EE_Init+0x294>)
 80002e6:	f001 fe89 	bl	8001ffc <FLASH_ProgramHalfWord>
 80002ea:	4603      	mov	r3, r0
 80002ec:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80002ee:	897b      	ldrh	r3, [r7, #10]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d001      	beq.n	80002f8 <EE_Init+0x160>
        {
          return FlashStatus;
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	e0be      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80002f8:	484d      	ldr	r0, [pc, #308]	; (8000430 <EE_Init+0x298>)
 80002fa:	f001 fe4d 	bl	8001f98 <FLASH_ErasePage>
 80002fe:	4603      	mov	r3, r0
 8000300:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000302:	897b      	ldrh	r3, [r7, #10]
 8000304:	2b04      	cmp	r3, #4
 8000306:	f000 80b0 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 800030a:	897b      	ldrh	r3, [r7, #10]
 800030c:	e0b3      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800030e:	8a3b      	ldrh	r3, [r7, #16]
 8000310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000314:	4293      	cmp	r3, r2
 8000316:	d115      	bne.n	8000344 <EE_Init+0x1ac>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000318:	4845      	ldr	r0, [pc, #276]	; (8000430 <EE_Init+0x298>)
 800031a:	f001 fe3d 	bl	8001f98 <FLASH_ErasePage>
 800031e:	4603      	mov	r3, r0
 8000320:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000322:	897b      	ldrh	r3, [r7, #10]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d001      	beq.n	800032c <EE_Init+0x194>
        {
          return FlashStatus;
 8000328:	897b      	ldrh	r3, [r7, #10]
 800032a:	e0a4      	b.n	8000476 <EE_Init+0x2de>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800032c:	2100      	movs	r1, #0
 800032e:	483f      	ldr	r0, [pc, #252]	; (800042c <EE_Init+0x294>)
 8000330:	f001 fe64 	bl	8001ffc <FLASH_ProgramHalfWord>
 8000334:	4603      	mov	r3, r0
 8000336:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000338:	897b      	ldrh	r3, [r7, #10]
 800033a:	2b04      	cmp	r3, #4
 800033c:	f000 8095 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000340:	897b      	ldrh	r3, [r7, #10]
 8000342:	e098      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000344:	f000 f8fc 	bl	8000540 <EE_Format>
 8000348:	4603      	mov	r3, r0
 800034a:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800034c:	897b      	ldrh	r3, [r7, #10]
 800034e:	2b04      	cmp	r3, #4
 8000350:	f000 808b 	beq.w	800046a <EE_Init+0x2d2>
        {
          return FlashStatus;
 8000354:	897b      	ldrh	r3, [r7, #10]
 8000356:	e08e      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000358:	8a3b      	ldrh	r3, [r7, #16]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d109      	bne.n	8000372 <EE_Init+0x1da>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800035e:	f000 f8ef 	bl	8000540 <EE_Format>
 8000362:	4603      	mov	r3, r0
 8000364:	817b      	strh	r3, [r7, #10]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	2b04      	cmp	r3, #4
 800036a:	f000 8080 	beq.w	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800036e:	897b      	ldrh	r3, [r7, #10]
 8000370:	e081      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000372:	8a3b      	ldrh	r3, [r7, #16]
 8000374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000378:	4293      	cmp	r3, r2
 800037a:	d109      	bne.n	8000390 <EE_Init+0x1f8>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800037c:	482c      	ldr	r0, [pc, #176]	; (8000430 <EE_Init+0x298>)
 800037e:	f001 fe0b 	bl	8001f98 <FLASH_ErasePage>
 8000382:	4603      	mov	r3, r0
 8000384:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000386:	897b      	ldrh	r3, [r7, #10]
 8000388:	2b04      	cmp	r3, #4
 800038a:	d070      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 800038c:	897b      	ldrh	r3, [r7, #10]
 800038e:	e072      	b.n	8000476 <EE_Init+0x2de>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 8000390:	2300      	movs	r3, #0
 8000392:	82fb      	strh	r3, [r7, #22]
 8000394:	e036      	b.n	8000404 <EE_Init+0x26c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <EE_Init+0x2a4>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <EE_Init+0x28c>)
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	8afb      	ldrh	r3, [r7, #22]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	440b      	add	r3, r1
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d101      	bne.n	80003b0 <EE_Init+0x218>
          {
            x = VarIdx;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	82bb      	strh	r3, [r7, #20]
          }
          if (VarIdx != x)
 80003b0:	8afa      	ldrh	r2, [r7, #22]
 80003b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d021      	beq.n	80003fe <EE_Init+0x266>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <EE_Init+0x28c>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	8afb      	ldrh	r3, [r7, #22]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	491c      	ldr	r1, [pc, #112]	; (8000438 <EE_Init+0x2a0>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f85b 	bl	8000484 <EE_ReadVariable>
 80003ce:	4603      	mov	r3, r0
 80003d0:	81bb      	strh	r3, [r7, #12]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80003d2:	89bb      	ldrh	r3, [r7, #12]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d012      	beq.n	80003fe <EE_Init+0x266>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <EE_Init+0x28c>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <EE_Init+0x2a0>)
 80003e6:	8812      	ldrh	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f914 	bl	8000618 <EE_VerifyPageFullWriteVariable>
 80003f0:	4603      	mov	r3, r0
 80003f2:	81fb      	strh	r3, [r7, #14]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d001      	beq.n	80003fe <EE_Init+0x266>
              {
                return EepromStatus;
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	e03b      	b.n	8000476 <EE_Init+0x2de>
        for (VarIdx = 0; VarIdx < EepromTotalDataSize; VarIdx++)
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EE_Init+0x290>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	8afa      	ldrh	r2, [r7, #22]
 800040a:	429a      	cmp	r2, r3
 800040c:	d3c3      	bcc.n	8000396 <EE_Init+0x1fe>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800040e:	2100      	movs	r1, #0
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <EE_Init+0x298>)
 8000412:	f001 fdf3 	bl	8001ffc <FLASH_ProgramHalfWord>
 8000416:	4603      	mov	r3, r0
 8000418:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800041a:	897b      	ldrh	r3, [r7, #10]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d00f      	beq.n	8000440 <EE_Init+0x2a8>
        {
          return FlashStatus;
 8000420:	897b      	ldrh	r3, [r7, #10]
 8000422:	e028      	b.n	8000476 <EE_Init+0x2de>
 8000424:	20000020 	.word	0x20000020
 8000428:	20000024 	.word	0x20000024
 800042c:	0800f800 	.word	0x0800f800
 8000430:	0800fc00 	.word	0x0800fc00
 8000434:	0800f806 	.word	0x0800f806
 8000438:	20000026 	.word	0x20000026
 800043c:	0800fc06 	.word	0x0800fc06
        }
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <EE_Init+0x2e8>)
 8000442:	f001 fda9 	bl	8001f98 <FLASH_ErasePage>
 8000446:	4603      	mov	r3, r0
 8000448:	817b      	strh	r3, [r7, #10]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800044a:	897b      	ldrh	r3, [r7, #10]
 800044c:	2b04      	cmp	r3, #4
 800044e:	d00e      	beq.n	800046e <EE_Init+0x2d6>
        {
          return FlashStatus;
 8000450:	897b      	ldrh	r3, [r7, #10]
 8000452:	e010      	b.n	8000476 <EE_Init+0x2de>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8000454:	f000 f874 	bl	8000540 <EE_Format>
 8000458:	4603      	mov	r3, r0
 800045a:	817b      	strh	r3, [r7, #10]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d007      	beq.n	8000472 <EE_Init+0x2da>
      {
        return FlashStatus;
 8000462:	897b      	ldrh	r3, [r7, #10]
 8000464:	e007      	b.n	8000476 <EE_Init+0x2de>
      break;
 8000466:	bf00      	nop
 8000468:	e004      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046a:	bf00      	nop
 800046c:	e002      	b.n	8000474 <EE_Init+0x2dc>
      break;
 800046e:	bf00      	nop
 8000470:	e000      	b.n	8000474 <EE_Init+0x2dc>
      }
      break;
 8000472:	bf00      	nop
  }

  return FLASH_COMPLETE;
 8000474:	2304      	movs	r3, #4
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	0800f800 	.word	0x0800f800

08000484 <EE_ReadVariable>:
  *           - EE_VAR_FOUND: if variable was found
  *           - EE_VAR_NOT_FOUND: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage;
  uint16_t AddressValue;
  uint16_t ReadStatus = EE_VAR_NOT_FOUND;
 8000490:	2301      	movs	r3, #1
 8000492:	83fb      	strh	r3, [r7, #30]
  uint32_t Address;
  uint32_t PageStartAddress;
  FLASH_Status f_stat;

  if ((EepromTotalDataSize == 0) || (VirtAddVarTab == 0)) {
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <EE_ReadVariable+0xb0>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <EE_ReadVariable+0x20>
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <EE_ReadVariable+0xb4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10c      	bne.n	80004be <EE_ReadVariable+0x3a>
	  return EE_NOT_INITIALIZED;
 80004a4:	23aa      	movs	r3, #170	; 0xaa
 80004a6:	e041      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
	  switch(f_stat) {
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	dc02      	bgt.n	80004b4 <EE_ReadVariable+0x30>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	da02      	bge.n	80004b8 <EE_ReadVariable+0x34>
 80004b2:	e004      	b.n	80004be <EE_ReadVariable+0x3a>
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d102      	bne.n	80004be <EE_ReadVariable+0x3a>
	  case FLASH_ERROR_PG:
	  case FLASH_ERROR_WRP:
	  case FLASH_TIMEOUT:
		  return f_stat;
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	e036      	b.n	800052c <EE_ReadVariable+0xa8>
  while((f_stat = FLASH_GetStatus()) != FLASH_COMPLETE) {
 80004be:	f001 fdcb 	bl	8002058 <FLASH_GetStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	75fb      	strb	r3, [r7, #23]
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d1ed      	bne.n	80004a8 <EE_ReadVariable+0x24>
	  }
  }


  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 f85f 	bl	8000590 <EE_FindValidPage>
 80004d2:	4603      	mov	r3, r0
 80004d4:	82bb      	strh	r3, [r7, #20]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80004d6:	8abb      	ldrh	r3, [r7, #20]
 80004d8:	2bab      	cmp	r3, #171	; 0xab
 80004da:	d101      	bne.n	80004e0 <EE_ReadVariable+0x5c>
  {
    return  NO_VALID_PAGE;
 80004dc:	23ab      	movs	r3, #171	; 0xab
 80004de:	e025      	b.n	800052c <EE_ReadVariable+0xa8>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80004e0:	8abb      	ldrh	r3, [r7, #20]
 80004e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80004e6:	333e      	adds	r3, #62	; 0x3e
 80004e8:	029b      	lsls	r3, r3, #10
 80004ea:	613b      	str	r3, [r7, #16]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80004ec:	8abb      	ldrh	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	029a      	lsls	r2, r3, #10
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <EE_ReadVariable+0xb8>)
 80004f4:	4413      	add	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80004f8:	e012      	b.n	8000520 <EE_ReadVariable+0x9c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000500:	89fa      	ldrh	r2, [r7, #14]
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	429a      	cmp	r2, r3
 8000506:	d108      	bne.n	800051a <EE_ReadVariable+0x96>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3b02      	subs	r3, #2
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b29a      	uxth	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = EE_VAR_FOUND;
 8000514:	2300      	movs	r3, #0
 8000516:	83fb      	strh	r3, [r7, #30]

      break;
 8000518:	e007      	b.n	800052a <EE_ReadVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	3b04      	subs	r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
  while (Address > (PageStartAddress + 2))
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	3302      	adds	r3, #2
 8000524:	69ba      	ldr	r2, [r7, #24]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8e7      	bhi.n	80004fa <EE_ReadVariable+0x76>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800052a:	8bfb      	ldrh	r3, [r7, #30]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000024 	.word	0x20000024
 8000538:	20000020 	.word	0x20000020
 800053c:	0800f7fe 	.word	0x0800f7fe

08000540 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8000546:	2304      	movs	r3, #4
 8000548:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <EE_Format+0x48>)
 800054c:	f001 fd24 	bl	8001f98 <FLASH_ErasePage>
 8000550:	4603      	mov	r3, r0
 8000552:	71fb      	strb	r3, [r7, #7]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b04      	cmp	r3, #4
 8000558:	d001      	beq.n	800055e <EE_Format+0x1e>
  {
    return FlashStatus;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	e010      	b.n	8000580 <EE_Format+0x40>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800055e:	2100      	movs	r1, #0
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <EE_Format+0x48>)
 8000562:	f001 fd4b 	bl	8001ffc <FLASH_ProgramHalfWord>
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d001      	beq.n	8000574 <EE_Format+0x34>
  {
    return FlashStatus;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	e005      	b.n	8000580 <EE_Format+0x40>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <EE_Format+0x4c>)
 8000576:	f001 fd0f 	bl	8001f98 <FLASH_ErasePage>
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]

  /* Return Page1 erase operation status */
  return FlashStatus;
 800057e:	79fb      	ldrb	r3, [r7, #7]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	0800f800 	.word	0x0800f800
 800058c:	0800fc00 	.word	0x0800fc00

08000590 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800059a:	2306      	movs	r3, #6
 800059c:	81fb      	strh	r3, [r7, #14]
 800059e:	2306      	movs	r3, #6
 80005a0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = *(__IO uint16_t*)PAGE0_BASE_ADDRESS;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <EE_FindValidPage+0x80>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <EE_FindValidPage+0x84>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d01b      	beq.n	80005ec <EE_FindValidPage+0x5c>
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d125      	bne.n	8000604 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80005b8:	89bb      	ldrh	r3, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d108      	bne.n	80005d0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d101      	bne.n	80005cc <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80005c8:	2300      	movs	r3, #0
 80005ca:	e01c      	b.n	8000606 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80005cc:	2301      	movs	r3, #1
 80005ce:	e01a      	b.n	8000606 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80005d0:	89fb      	ldrh	r3, [r7, #14]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d108      	bne.n	80005e8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80005d6:	89bb      	ldrh	r3, [r7, #12]
 80005d8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80005dc:	4293      	cmp	r3, r2
 80005de:	d101      	bne.n	80005e4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80005e0:	2301      	movs	r3, #1
 80005e2:	e010      	b.n	8000606 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80005e4:	2300      	movs	r3, #0
 80005e6:	e00e      	b.n	8000606 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80005e8:	23ab      	movs	r3, #171	; 0xab
 80005ea:	e00c      	b.n	8000606 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80005f2:	2300      	movs	r3, #0
 80005f4:	e007      	b.n	8000606 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80005f6:	89bb      	ldrh	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80005fc:	2301      	movs	r3, #1
 80005fe:	e002      	b.n	8000606 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000600:	23ab      	movs	r3, #171	; 0xab
 8000602:	e000      	b.n	8000606 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000604:	2300      	movs	r3, #0
  }
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	0800f800 	.word	0x0800f800
 8000614:	0800fc00 	.word	0x0800fc00

08000618 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	80fb      	strh	r3, [r7, #6]
 8000624:	4613      	mov	r3, r2
 8000626:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8000628:	2304      	movs	r3, #4
 800062a:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 800062c:	2300      	movs	r3, #0
 800062e:	823b      	strh	r3, [r7, #16]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <EE_VerifyPageFullWriteVariable+0xa4>)
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <EE_VerifyPageFullWriteVariable+0xa8>)
 8000636:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ffa9 	bl	8000590 <EE_FindValidPage>
 800063e:	4603      	mov	r3, r0
 8000640:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000642:	8a3b      	ldrh	r3, [r7, #16]
 8000644:	2bab      	cmp	r3, #171	; 0xab
 8000646:	d101      	bne.n	800064c <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000648:	23ab      	movs	r3, #171	; 0xab
 800064a:	e032      	b.n	80006b2 <EE_VerifyPageFullWriteVariable+0x9a>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800064c:	8a3b      	ldrh	r3, [r7, #16]
 800064e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000652:	333e      	adds	r3, #62	; 0x3e
 8000654:	029b      	lsls	r3, r3, #10
 8000656:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000658:	8a3b      	ldrh	r3, [r7, #16]
 800065a:	3301      	adds	r3, #1
 800065c:	029a      	lsls	r2, r3, #10
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <EE_VerifyPageFullWriteVariable+0xac>)
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000664:	e020      	b.n	80006a8 <EE_VerifyPageFullWriteVariable+0x90>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066e:	d118      	bne.n	80006a2 <EE_VerifyPageFullWriteVariable+0x8a>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	4619      	mov	r1, r3
 8000674:	6978      	ldr	r0, [r7, #20]
 8000676:	f001 fcc1 	bl	8001ffc <FLASH_ProgramHalfWord>
 800067a:	4603      	mov	r3, r0
 800067c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800067e:	7cfb      	ldrb	r3, [r7, #19]
 8000680:	2b04      	cmp	r3, #4
 8000682:	d002      	beq.n	800068a <EE_VerifyPageFullWriteVariable+0x72>
      {
        return FlashStatus;
 8000684:	7cfb      	ldrb	r3, [r7, #19]
 8000686:	b29b      	uxth	r3, r3
 8000688:	e013      	b.n	80006b2 <EE_VerifyPageFullWriteVariable+0x9a>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3302      	adds	r3, #2
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fcb2 	bl	8001ffc <FLASH_ProgramHalfWord>
 8000698:	4603      	mov	r3, r0
 800069a:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800069c:	7cfb      	ldrb	r3, [r7, #19]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	e007      	b.n	80006b2 <EE_VerifyPageFullWriteVariable+0x9a>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3304      	adds	r3, #4
 80006a6:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d3da      	bcc.n	8000666 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80006b0:	2380      	movs	r3, #128	; 0x80
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08010000 	.word	0x08010000
 80006c0:	080107ff 	.word	0x080107ff
 80006c4:	0800f7fe 	.word	0x0800f7fe

080006c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006de:	699a      	ldr	r2, [r3, #24]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4013      	ands	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	611a      	str	r2, [r3, #16]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	615a      	str	r2, [r3, #20]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000748:	2010      	movs	r0, #16
 800074a:	f7ff ffbd 	bl	80006c8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800074e:	2020      	movs	r0, #32
 8000750:	f7ff ffba 	bl	80006c8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000754:	2004      	movs	r0, #4
 8000756:	f7ff ffb7 	bl	80006c8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800075a:	2008      	movs	r0, #8
 800075c:	f7ff ffb4 	bl	80006c8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000760:	492b      	ldr	r1, [pc, #172]	; (8000810 <MX_GPIO_Init+0xdc>)
 8000762:	482c      	ldr	r0, [pc, #176]	; (8000814 <MX_GPIO_Init+0xe0>)
 8000764:	f7ff ffd7 	bl	8000716 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(F_R_GPIO_Port, F_R_Pin);
 8000768:	f242 0120 	movw	r1, #8224	; 0x2020
 800076c:	482a      	ldr	r0, [pc, #168]	; (8000818 <MX_GPIO_Init+0xe4>)
 800076e:	f7ff ffd2 	bl	8000716 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000772:	4927      	ldr	r1, [pc, #156]	; (8000810 <MX_GPIO_Init+0xdc>)
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <MX_GPIO_Init+0xe8>)
 8000776:	f7ff ffce 	bl	8000716 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Board_LED_Pin;
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_GPIO_Init+0xdc>)
 800077c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800077e:	2301      	movs	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000782:	2301      	movs	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4821      	ldr	r0, [pc, #132]	; (8000814 <MX_GPIO_Init+0xe0>)
 8000790:	f001 fd90 	bl	80022b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_11
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_GPIO_Init+0xec>)
 8000796:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	481d      	ldr	r0, [pc, #116]	; (8000818 <MX_GPIO_Init+0xe4>)
 80007a2:	f001 fd87 	bl	80022b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_R_Pin;
 80007a6:	f242 0320 	movw	r3, #8224	; 0x2020
 80007aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ac:	2301      	movs	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <MX_GPIO_Init+0xe4>)
 80007be:	f001 fd79 	bl	80022b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0xf0>)
 80007c4:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_GPIO_Init+0xe8>)
 80007d0:	f001 fd70 	bl	80022b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_GPIO_Init+0xdc>)
 80007d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d8:	2301      	movs	r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_GPIO_Init+0xe8>)
 80007ea:	f001 fd63 	bl	80022b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CLK_24MHZ_OUT_Pin;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_GPIO_Init+0xf4>)
 80007f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007f2:	2309      	movs	r3, #9
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CLK_24MHZ_OUT_GPIO_Port, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_GPIO_Init+0xe4>)
 8000804:	f001 fd56 	bl	80022b4 <LL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	04200020 	.word	0x04200020
 8000814:	40011000 	.word	0x40011000
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00
 8000820:	0498139b 	.word	0x0498139b
 8000824:	04dffcff 	.word	0x04dffcff
 8000828:	04010001 	.word	0x04010001

0800082c <GPIO_BOARD_Led_OFF>:
{
	LL_GPIO_ResetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
}

void GPIO_BOARD_Led_OFF(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000830:	4902      	ldr	r1, [pc, #8]	; (800083c <GPIO_BOARD_Led_OFF+0x10>)
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <GPIO_BOARD_Led_OFF+0x14>)
 8000834:	f7ff ff60 	bl	80006f8 <LL_GPIO_SetOutputPin>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	04200020 	.word	0x04200020
 8000840:	40011000 	.word	0x40011000

08000844 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800086c:	601a      	str	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f245 5255 	movw	r2, #21845	; 0x5555
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f003 0207 	and.w	r2, r3, #7
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	605a      	str	r2, [r3, #4]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	609a      	str	r2, [r3, #8]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <LL_IWDG_IsReady+0x18>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e000      	b.n	80008e8 <LL_IWDG_IsReady+0x1a>
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_IWDG_Init+0x3c>)
 80008fa:	f7ff ffa3 	bl	8000844 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_IWDG_Init+0x3c>)
 8000900:	f7ff ffba 	bl	8000878 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_64);
 8000904:	2104      	movs	r1, #4
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <MX_IWDG_Init+0x3c>)
 8000908:	f7ff ffc3 	bl	8000892 <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 1000);
 800090c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_IWDG_Init+0x3c>)
 8000912:	f7ff ffcd 	bl	80008b0 <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000916:	bf00      	nop
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_IWDG_Init+0x3c>)
 800091a:	f7ff ffd8 	bl	80008ce <LL_IWDG_IsReady>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d1f9      	bne.n	8000918 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <MX_IWDG_Init+0x3c>)
 8000926:	f7ff ff9a 	bl	800085e <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40003000 	.word	0x40003000

08000934 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000944:	2b80      	cmp	r3, #128	; 0x80
 8000946:	bf0c      	ite	eq
 8000948:	2301      	moveq	r3, #1
 800094a:	2300      	movne	r3, #0
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000964:	78fa      	ldrb	r2, [r7, #3]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <LOG_ResetLogger>:

static void AddLogDataByte(uint8_t data_byte);


void LOG_ResetLogger(USART_TypeDef *usart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	usart_log = usart;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <LOG_ResetLogger+0x30>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
	start_index = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <LOG_ResetLogger+0x34>)
 8000984:	2200      	movs	r2, #0
 8000986:	801a      	strh	r2, [r3, #0]
	data_length = 0;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LOG_ResetLogger+0x38>)
 800098a:	2200      	movs	r2, #0
 800098c:	801a      	strh	r2, [r3, #0]
	log_tx_time_finished = SYS_GetTick() + 1;
 800098e:	f000 ff65 	bl	800185c <SYS_GetTick>
 8000992:	4603      	mov	r3, r0
 8000994:	3301      	adds	r3, #1
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <LOG_ResetLogger+0x3c>)
 8000998:	6013      	str	r3, [r2, #0]
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028
 80009a8:	200001fa 	.word	0x200001fa
 80009ac:	200001f8 	.word	0x200001f8
 80009b0:	200001fc 	.word	0x200001fc

080009b4 <LOG_IsInProgress>:

uint8_t LOG_IsInProgress(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	return (data_length > 0);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <LOG_IsInProgress+0x1c>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200001f8 	.word	0x200001f8

080009d4 <LOG_EvaluateDataSend>:
	}
}


void LOG_EvaluateDataSend(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	uint8_t byte_to_send;

	if (!usart_log || (data_length == 0) || !LL_USART_IsActiveFlag_TXE(usart_log))
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <LOG_EvaluateDataSend+0x80>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d034      	beq.n	8000a4c <LOG_EvaluateDataSend+0x78>
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <LOG_EvaluateDataSend+0x84>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d030      	beq.n	8000a4c <LOG_EvaluateDataSend+0x78>
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <LOG_EvaluateDataSend+0x80>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffa0 	bl	8000934 <LL_USART_IsActiveFlag_TXE>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d028      	beq.n	8000a4c <LOG_EvaluateDataSend+0x78>
	{
		return;
	}


	byte_to_send = log_tx_buffer[start_index ++];
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <LOG_EvaluateDataSend+0x88>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	b291      	uxth	r1, r2
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <LOG_EvaluateDataSend+0x88>)
 8000a04:	8011      	strh	r1, [r2, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <LOG_EvaluateDataSend+0x8c>)
 8000a0a:	5c9b      	ldrb	r3, [r3, r2]
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if (start_index == LOG_BUFFER_SIZE) {
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <LOG_EvaluateDataSend+0x88>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000a16:	d102      	bne.n	8000a1e <LOG_EvaluateDataSend+0x4a>
		start_index = 0;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <LOG_EvaluateDataSend+0x88>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	801a      	strh	r2, [r3, #0]
	}
	data_length --;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <LOG_EvaluateDataSend+0x84>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <LOG_EvaluateDataSend+0x84>)
 8000a28:	801a      	strh	r2, [r3, #0]

	LL_USART_TransmitData8(usart_log, byte_to_send);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <LOG_EvaluateDataSend+0x80>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff90 	bl	8000958 <LL_USART_TransmitData8>

	if (data_length == 0) {
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <LOG_EvaluateDataSend+0x84>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d106      	bne.n	8000a4e <LOG_EvaluateDataSend+0x7a>
		log_tx_time_finished = SYS_GetTick();
 8000a40:	f000 ff0c 	bl	800185c <SYS_GetTick>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <LOG_EvaluateDataSend+0x90>)
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e000      	b.n	8000a4e <LOG_EvaluateDataSend+0x7a>
		return;
 8000a4c:	bf00      	nop
	}
}
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000028 	.word	0x20000028
 8000a58:	200001f8 	.word	0x200001f8
 8000a5c:	200001fa 	.word	0x200001fa
 8000a60:	2000002c 	.word	0x2000002c
 8000a64:	200001fc 	.word	0x200001fc

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <__NVIC_EnableIRQ+0x34>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <LL_RCC_HSE_Enable+0x18>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <LL_RCC_HSE_Enable+0x18>)
 8000bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <LL_RCC_HSE_IsReady+0x20>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000be8:	bf0c      	ite	eq
 8000bea:	2301      	moveq	r3, #1
 8000bec:	2300      	movne	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000

08000bfc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <LL_RCC_LSI_Enable+0x18>)
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <LL_RCC_LSI_Enable+0x18>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000

08000c18 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <LL_RCC_LSI_IsReady+0x20>)
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	bf0c      	ite	eq
 8000c28:	2301      	moveq	r3, #1
 8000c2a:	2300      	movne	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <LL_RCC_SetSysClkSource+0x24>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f023 0203 	bic.w	r2, r3, #3
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <LL_RCC_SetSysClkSource+0x24>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000

08000c64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <LL_RCC_GetSysClkSource+0x14>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000

08000c7c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c8c:	4904      	ldr	r1, [pc, #16]	; (8000ca0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	604b      	str	r3, [r1, #4]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000cb4:	4904      	ldr	r1, [pc, #16]	; (8000cc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	604b      	str	r3, [r1, #4]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_RCC_ConfigMCO>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, MCOxSource);
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <LL_RCC_ConfigMCO+0x24>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8000d04:	4904      	ldr	r1, [pc, #16]	; (8000d18 <LL_RCC_ConfigMCO+0x24>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <LL_RCC_PLL_Enable+0x18>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <LL_RCC_PLL_Enable+0x18>)
 8000d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_RCC_PLL_IsReady+0x20>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000

08000d5c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	430b      	orrs	r3, r1
 8000d78:	4903      	ldr	r1, [pc, #12]	; (8000d88 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <LL_APB1_GRP1_EnableClock>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d96:	69da      	ldr	r2, [r3, #28]
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da2:	69da      	ldr	r2, [r3, #28]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4013      	ands	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <LL_APB2_GRP1_EnableClock>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dc6:	699a      	ldr	r2, [r3, #24]
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <LL_FLASH_SetLatency+0x24>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 0207 	bic.w	r2, r3, #7
 8000dfc:	4904      	ldr	r1, [pc, #16]	; (8000e10 <LL_FLASH_SetLatency+0x24>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000

08000e14 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <LL_FLASH_GetLatency+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40022000 	.word	0x40022000

08000e2c <LL_USART_DisableIT_TXE>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	60da      	str	r2, [r3, #12]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <LL_USART_ReceiveData8>:
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	b2db      	uxtb	r3, r3
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000e6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e72:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e7e:	6053      	str	r3, [r2, #4]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40010000 	.word	0x40010000

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff ff93 	bl	8000dbc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e9a:	f7ff ff77 	bl	8000d8c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9e:	2003      	movs	r0, #3
 8000ea0:	f7ff fde2 	bl	8000a68 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000ea4:	f7ff fe04 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	210f      	movs	r1, #15
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe52 	bl	8000b58 <NVIC_EncodePriority>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff fe22 	bl	8000b04 <__NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  NVIC_SetPriority(RCC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ec0:	f7ff fdf6 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe44 	bl	8000b58 <NVIC_EncodePriority>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f7ff fe15 	bl	8000b04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RCC_IRQn);
 8000eda:	2005      	movs	r0, #5
 8000edc:	f7ff fdf6 	bl	8000acc <__NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000ee0:	f7ff ffc0 	bl	8000e64 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f82c 	bl	8000f40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick->CTRL  &= ~SysTick_CTRL_CLKSOURCE_Msk;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <main+0xa8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <main+0xa8>)
 8000eee:	f023 0304 	bic.w	r3, r3, #4
 8000ef2:	6013      	str	r3, [r2, #0]
  SYS_ClearTick();
 8000ef4:	f000 fc98 	bl	8001828 <SYS_ClearTick>
  SYS_IncTick();
 8000ef8:	f000 fca2 	bl	8001840 <SYS_IncTick>
  SYS_IncTick();
 8000efc:	f000 fca0 	bl	8001840 <SYS_IncTick>
  SYS_ResumeTick();
 8000f00:	f000 fcb6 	bl	8001870 <SYS_ResumeTick>
  FLASH_Unlock();
 8000f04:	f001 f836 	bl	8001f74 <FLASH_Unlock>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f7ff fc14 	bl	8000734 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f0c:	f000 fdbc 	bl	8001a88 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f10:	f000 ff4a 	bl	8001da8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f14:	f000 ffb6 	bl	8001e84 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000f18:	f7ff fcec 	bl	80008f4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  EE_Init(EepromAllVirtAddrTable, TOTAL_EEPROM_DATA_SIZE);		// EEPROM Init
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <main+0xac>)
 8000f20:	f7ff f93a 	bl	8000198 <EE_Init>
  LOG_ResetLogger(USART_LOG);									// Logger Init
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <main+0xb0>)
 8000f26:	f7ff fd25 	bl	8000974 <LOG_ResetLogger>
  SBUS_Init();
 8000f2a:	f000 f879 	bl	8001020 <SBUS_Init>
  GPIO_BOARD_Led_OFF();
 8000f2e:	f7ff fc7d 	bl	800082c <GPIO_BOARD_Led_OFF>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0xa6>
 8000f34:	e000e010 	.word	0xe000e010
 8000f38:	20000250 	.word	0x20000250
 8000f3c:	40004400 	.word	0x40004400

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ff51 	bl	8000dec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ff62 	bl	8000e14 <LL_FLASH_GetLatency>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d1fa      	bne.n	8000f4c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000f56:	f7ff fe31 	bl	8000bbc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff fe3c 	bl	8000bd8 <LL_RCC_HSE_IsReady>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d1fa      	bne.n	8000f5c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 8000f66:	f7ff fe49 	bl	8000bfc <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff fe54 	bl	8000c18 <LL_RCC_LSI_IsReady>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d1fa      	bne.n	8000f6c <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 8000f76:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000f7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f7e:	f7ff feed 	bl	8000d5c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f82:	f7ff fecb 	bl	8000d1c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f86:	bf00      	nop
 8000f88:	f7ff fed6 	bl	8000d38 <LL_RCC_PLL_IsReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d1fa      	bne.n	8000f88 <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fe72 	bl	8000c7c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000f9c:	f7ff fe82 	bl	8000ca4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000fa0:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000fa4:	f7ff fe92 	bl	8000ccc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f7ff fe47 	bl	8000c3c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000fae:	bf00      	nop
 8000fb0:	f7ff fe58 	bl	8000c64 <LL_RCC_GetSysClkSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d1fa      	bne.n	8000fb0 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(6000000);
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SystemClock_Config+0x94>)
 8000fbc:	f001 fe98 	bl	8002cf0 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <SystemClock_Config+0x98>)
 8000fc2:	f001 fea3 	bl	8002d0c <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_PLLCLK_DIV_2);
 8000fc6:	f04f 60e0 	mov.w	r0, #117440512	; 0x7000000
 8000fca:	f7ff fe93 	bl	8000cf4 <LL_RCC_ConfigMCO>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	005b8d80 	.word	0x005b8d80
 8000fd8:	02dc6c00 	.word	0x02dc6c00

08000fdc <USART1_RX_Callback>:

/* USER CODE BEGIN 4 */
void USART1_RX_Callback(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	uint8_t data = LL_USART_ReceiveData8(USART1);
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <USART1_RX_Callback+0x20>)
 8000fe4:	f7ff ff31 	bl	8000e4a <LL_USART_ReceiveData8>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
	SBUS_OnData_Received(data);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f8aa 	bl	8001148 <SBUS_OnData_Received>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40013800 	.word	0x40013800

08001000 <USART2_TX_Callback>:

void USART2_TX_Callback(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LOG_EvaluateDataSend();
 8001004:	f7ff fce6 	bl	80009d4 <LOG_EvaluateDataSend>
	if(!LOG_IsInProgress()) {
 8001008:	f7ff fcd4 	bl	80009b4 <LOG_IsInProgress>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <USART2_TX_Callback+0x18>
		LL_USART_DisableIT_TXE(USART_LOG);
 8001012:	4802      	ldr	r0, [pc, #8]	; (800101c <USART2_TX_Callback+0x1c>)
 8001014:	f7ff ff0a 	bl	8000e2c <LL_USART_DisableIT_TXE>
	}
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40004400 	.word	0x40004400

08001020 <SBUS_Init>:
static void ParseSBUS_Frame(uint8_t *raw);
static uint8_t ReverseBiots(uint8_t b);


void SBUS_Init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	CH1=CH2=CH3=CH4=CH5=CH6=CH7=CH8=CH9=CH10=CH11=CH12=CH13=CH14=CH15=CH16 = 0;
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <SBUS_Init+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <SBUS_Init+0xc4>)
 800102c:	881a      	ldrh	r2, [r3, #0]
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <SBUS_Init+0xc8>)
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <SBUS_Init+0xc8>)
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <SBUS_Init+0xcc>)
 8001038:	801a      	strh	r2, [r3, #0]
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <SBUS_Init+0xcc>)
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <SBUS_Init+0xd0>)
 8001040:	801a      	strh	r2, [r3, #0]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <SBUS_Init+0xd0>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <SBUS_Init+0xd4>)
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <SBUS_Init+0xd4>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <SBUS_Init+0xd8>)
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <SBUS_Init+0xd8>)
 8001054:	881a      	ldrh	r2, [r3, #0]
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <SBUS_Init+0xdc>)
 8001058:	801a      	strh	r2, [r3, #0]
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SBUS_Init+0xdc>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SBUS_Init+0xe0>)
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <SBUS_Init+0xe0>)
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <SBUS_Init+0xe4>)
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <SBUS_Init+0xe4>)
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <SBUS_Init+0xe8>)
 8001070:	801a      	strh	r2, [r3, #0]
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <SBUS_Init+0xe8>)
 8001074:	881a      	ldrh	r2, [r3, #0]
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <SBUS_Init+0xec>)
 8001078:	801a      	strh	r2, [r3, #0]
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <SBUS_Init+0xec>)
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <SBUS_Init+0xf0>)
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <SBUS_Init+0xf0>)
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <SBUS_Init+0xf4>)
 8001088:	801a      	strh	r2, [r3, #0]
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <SBUS_Init+0xf4>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <SBUS_Init+0xf8>)
 8001090:	801a      	strh	r2, [r3, #0]
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <SBUS_Init+0xf8>)
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <SBUS_Init+0xfc>)
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <SBUS_Init+0xfc>)
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <SBUS_Init+0x100>)
 80010a0:	801a      	strh	r2, [r3, #0]
	binCH17 = binCH18 = 0;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <SBUS_Init+0x104>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SBUS_Init+0x104>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <SBUS_Init+0x108>)
 80010ae:	701a      	strb	r2, [r3, #0]
	frame_lost = 0;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <SBUS_Init+0x10c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	failsafe = 0;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <SBUS_Init+0x110>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]

	fl_data_ready = 0;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <SBUS_Init+0x114>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	fl_receive_in_progress = 0;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <SBUS_Init+0x118>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
	t_last_frame_received = 0;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <SBUS_Init+0x11c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	next_frame_byte_index = 0;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <SBUS_Init+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
	t_last_byte_received = 0;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <SBUS_Init+0x124>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000021e 	.word	0x2000021e
 80010e8:	2000021c 	.word	0x2000021c
 80010ec:	2000021a 	.word	0x2000021a
 80010f0:	20000218 	.word	0x20000218
 80010f4:	20000216 	.word	0x20000216
 80010f8:	20000214 	.word	0x20000214
 80010fc:	20000212 	.word	0x20000212
 8001100:	20000210 	.word	0x20000210
 8001104:	2000020e 	.word	0x2000020e
 8001108:	2000020c 	.word	0x2000020c
 800110c:	2000020a 	.word	0x2000020a
 8001110:	20000208 	.word	0x20000208
 8001114:	20000206 	.word	0x20000206
 8001118:	20000204 	.word	0x20000204
 800111c:	20000202 	.word	0x20000202
 8001120:	20000200 	.word	0x20000200
 8001124:	20000221 	.word	0x20000221
 8001128:	20000220 	.word	0x20000220
 800112c:	20000222 	.word	0x20000222
 8001130:	20000223 	.word	0x20000223
 8001134:	20000224 	.word	0x20000224
 8001138:	20000225 	.word	0x20000225
 800113c:	20000228 	.word	0x20000228
 8001140:	2000022c 	.word	0x2000022c
 8001144:	20000230 	.word	0x20000230

08001148 <SBUS_OnData_Received>:
	}
}


uint8_t SBUS_OnData_Received(uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]

	//data = ReverseBiots(data);

	uint32_t t_now = SYS_GetTick();
 8001152:	f000 fb83 	bl	800185c <SYS_GetTick>
 8001156:	60f8      	str	r0, [r7, #12]
	if ((t_now - t_last_byte_received) > MIN_FRAME_PROTECTION_INTERVAL) {
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <SBUS_OnData_Received+0xa4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b05      	cmp	r3, #5
 8001162:	d905      	bls.n	8001170 <SBUS_OnData_Received+0x28>
		fl_receive_in_progress = 0;
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <SBUS_OnData_Received+0xa8>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		next_frame_byte_index = 0;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <SBUS_OnData_Received+0xac>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	}
	t_last_byte_received = t_now;
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <SBUS_OnData_Received+0xa4>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6013      	str	r3, [r2, #0]



	if (!fl_receive_in_progress)
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <SBUS_OnData_Received+0xa8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <SBUS_OnData_Received+0x50>
	{
		if (data == SBUS_FRAME_HEADER) {
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d12d      	bne.n	80011e0 <SBUS_OnData_Received+0x98>
			raw_data_buff[0] = SBUS_FRAME_HEADER;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <SBUS_OnData_Received+0xb0>)
 8001186:	220f      	movs	r2, #15
 8001188:	701a      	strb	r2, [r3, #0]
			next_frame_byte_index = 1;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <SBUS_OnData_Received+0xac>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
			fl_receive_in_progress = 1;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <SBUS_OnData_Received+0xa8>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e023      	b.n	80011e0 <SBUS_OnData_Received+0x98>
		}
	}
	else
	{
		raw_data_buff[next_frame_byte_index ++] = data;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <SBUS_OnData_Received+0xac>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	b2d1      	uxtb	r1, r2
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <SBUS_OnData_Received+0xac>)
 80011a2:	7011      	strb	r1, [r2, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <SBUS_OnData_Received+0xb0>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	5453      	strb	r3, [r2, r1]
		if (next_frame_byte_index == RAW_SBUS_FRAME_LENGTH) {
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <SBUS_OnData_Received+0xac>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b19      	cmp	r3, #25
 80011b2:	d115      	bne.n	80011e0 <SBUS_OnData_Received+0x98>
			fl_receive_in_progress = 0;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <SBUS_OnData_Received+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
			next_frame_byte_index = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <SBUS_OnData_Received+0xac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
			if (data == SBUS_FRAME_FOOTER)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <SBUS_OnData_Received+0x98>
			{
				ParseSBUS_Frame(raw_data_buff);
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <SBUS_OnData_Received+0xb0>)
 80011c8:	f000 f81c 	bl	8001204 <ParseSBUS_Frame>
				fl_data_ready = 1;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <SBUS_OnData_Received+0xb4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
				t_last_frame_received = SYS_GetTick();
 80011d2:	f000 fb43 	bl	800185c <SYS_GetTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <SBUS_OnData_Received+0xb8>)
 80011da:	6013      	str	r3, [r2, #0]
				return 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <SBUS_OnData_Received+0x9a>
			}
		}
	}

	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000230 	.word	0x20000230
 80011f0:	20000225 	.word	0x20000225
 80011f4:	2000022c 	.word	0x2000022c
 80011f8:	20000234 	.word	0x20000234
 80011fc:	20000224 	.word	0x20000224
 8001200:	20000228 	.word	0x20000228

08001204 <ParseSBUS_Frame>:
	return (lookup[b & 0x0F] << 4) | lookup[(b >> 4) & 0x0F];
}


static void ParseSBUS_Frame(uint8_t *buf_)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint16_t v;

	if ((buf_[0] != SBUS_FRAME_HEADER) || (buf_[24] != SBUS_FRAME_FOOTER)) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	f040 81e7 	bne.w	80015e4 <ParseSBUS_Frame+0x3e0>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3318      	adds	r3, #24
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f040 81e1 	bne.w	80015e4 <ParseSBUS_Frame+0x3e0>
		return;
	}

	// Channel 1
	v = buf_[1];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[2] << 8) & 0x7FF);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3302      	adds	r3, #2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21b      	sxth	r3, r3
 8001234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001238:	b21a      	sxth	r2, r3
 800123a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	81fb      	strh	r3, [r7, #14]
	CH1 = v;
 8001244:	4aa1      	ldr	r2, [pc, #644]	; (80014cc <ParseSBUS_Frame+0x2c8>)
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	8013      	strh	r3, [r2, #0]

	// Channel 2
	v = buf_[2] >> 3;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3302      	adds	r3, #2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[3] << 5) & 0x7FF);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3303      	adds	r3, #3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	015b      	lsls	r3, r3, #5
 800125e:	b21b      	sxth	r3, r3
 8001260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001264:	b21a      	sxth	r2, r3
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	81fb      	strh	r3, [r7, #14]
	CH2 = v;
 8001270:	4a97      	ldr	r2, [pc, #604]	; (80014d0 <ParseSBUS_Frame+0x2cc>)
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	8013      	strh	r3, [r2, #0]

	// Channel 3
	v = buf_[3] >> 6;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3303      	adds	r3, #3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	099b      	lsrs	r3, r3, #6
 800127e:	b2db      	uxtb	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[4] << 2)  & 0x7FF);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	b21b      	sxth	r3, r3
 800128c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001290:	b21a      	sxth	r2, r3
 8001292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001296:	4313      	orrs	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[5] << 10) & 0x7FF);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3305      	adds	r3, #5
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	029b      	lsls	r3, r3, #10
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	81fb      	strh	r3, [r7, #14]
	CH3 = v;
 80012b6:	4a87      	ldr	r2, [pc, #540]	; (80014d4 <ParseSBUS_Frame+0x2d0>)
 80012b8:	89fb      	ldrh	r3, [r7, #14]
 80012ba:	8013      	strh	r3, [r2, #0]

	// Channel 4
	v = buf_[5] >> 1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3305      	adds	r3, #5
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	085b      	lsrs	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[6] << 7) & 0x7FF);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3306      	adds	r3, #6
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	81fb      	strh	r3, [r7, #14]
	CH4 = v;
 80012e2:	4a7d      	ldr	r2, [pc, #500]	; (80014d8 <ParseSBUS_Frame+0x2d4>)
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	8013      	strh	r3, [r2, #0]

	// Channel 5
	v = buf_[6] >> 4;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3306      	adds	r3, #6
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[7] << 4) & 0x7FF);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3307      	adds	r3, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	b21a      	sxth	r2, r3
 8001304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	81fb      	strh	r3, [r7, #14]
	CH5 = v;
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <ParseSBUS_Frame+0x2d8>)
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	8013      	strh	r3, [r2, #0]

	// Channel 6
	v = buf_[7] >> 7;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3307      	adds	r3, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	09db      	lsrs	r3, r3, #7
 800131c:	b2db      	uxtb	r3, r3
 800131e:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[8] << 1) & 0x7FF);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3308      	adds	r3, #8
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	b21b      	sxth	r3, r3
 800132a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132e:	b21a      	sxth	r2, r3
 8001330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[9] << 9) & 0x7FF);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3309      	adds	r3, #9
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	b21b      	sxth	r3, r3
 8001344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001348:	b21a      	sxth	r2, r3
 800134a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	81fb      	strh	r3, [r7, #14]
	CH6 = v;
 8001354:	4a62      	ldr	r2, [pc, #392]	; (80014e0 <ParseSBUS_Frame+0x2dc>)
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	8013      	strh	r3, [r2, #0]

	// Channel 7
	v = buf_[9] >> 2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3309      	adds	r3, #9
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	b2db      	uxtb	r3, r3
 8001364:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[10] << 6) & 0x7FF);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	330a      	adds	r3, #10
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	b21b      	sxth	r3, r3
 8001370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	81fb      	strh	r3, [r7, #14]
	CH7 = v;
 8001380:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <ParseSBUS_Frame+0x2e0>)
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	8013      	strh	r3, [r2, #0]

	// Channel 8
	v = buf_[10] >> 5;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	330a      	adds	r3, #10
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	b2db      	uxtb	r3, r3
 8001390:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[11] << 3) & 0x7FF);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	330b      	adds	r3, #11
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	b21b      	sxth	r3, r3
 800139c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	81fb      	strh	r3, [r7, #14]
	CH8 = v;
 80013ac:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <ParseSBUS_Frame+0x2e4>)
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	8013      	strh	r3, [r2, #0]

	// Channel 9
	v = buf_[12];
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	330c      	adds	r3, #12
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[13] << 8) & 0x7FF);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	330d      	adds	r3, #13
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	81fb      	strh	r3, [r7, #14]
	CH9 = v;
 80013d4:	4a45      	ldr	r2, [pc, #276]	; (80014ec <ParseSBUS_Frame+0x2e8>)
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	8013      	strh	r3, [r2, #0]

	// Channel 10
	v = buf_[13] >> 3;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	330d      	adds	r3, #13
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[14] << 5) & 0x7FF);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	330e      	adds	r3, #14
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	015b      	lsls	r3, r3, #5
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	81fb      	strh	r3, [r7, #14]
	CH10 = v;
 8001400:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <ParseSBUS_Frame+0x2ec>)
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	8013      	strh	r3, [r2, #0]

	// Channel 11
	v = buf_[14] >> 6;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	330e      	adds	r3, #14
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	b2db      	uxtb	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[15] << 2) & 0x7FF);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	330f      	adds	r3, #15
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	b21b      	sxth	r3, r3
 800141c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001420:	b21a      	sxth	r2, r3
 8001422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[16] << 10) & 0x7FF);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3310      	adds	r3, #16
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	b21b      	sxth	r3, r3
 8001436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143a:	b21a      	sxth	r2, r3
 800143c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	81fb      	strh	r3, [r7, #14]
	CH11 = v;
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <ParseSBUS_Frame+0x2f0>)
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	8013      	strh	r3, [r2, #0]

	// Channel 12
	v = buf_[16] >> 1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3310      	adds	r3, #16
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[17] << 7) & 0x7FF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3311      	adds	r3, #17
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	01db      	lsls	r3, r3, #7
 8001460:	b21b      	sxth	r3, r3
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	b21a      	sxth	r2, r3
 8001468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
	CH12 = v;
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <ParseSBUS_Frame+0x2f4>)
 8001474:	89fb      	ldrh	r3, [r7, #14]
 8001476:	8013      	strh	r3, [r2, #0]

	// Channel 13
	v = buf_[17] >> 4;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3311      	adds	r3, #17
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	b2db      	uxtb	r3, r3
 8001482:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[18] << 4) & 0x7FF);\
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3312      	adds	r3, #18
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	b21b      	sxth	r3, r3
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	b21a      	sxth	r2, r3
 8001494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	81fb      	strh	r3, [r7, #14]
	CH13 = v;
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <ParseSBUS_Frame+0x2f8>)
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	8013      	strh	r3, [r2, #0]

	// Channel 14
	v = buf_[18] >> 7;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3312      	adds	r3, #18
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	09db      	lsrs	r3, r3, #7
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[19] << 1) & 0x7FF);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3313      	adds	r3, #19
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014be:	b21a      	sxth	r2, r3
 80014c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	e01a      	b.n	8001500 <ParseSBUS_Frame+0x2fc>
 80014ca:	bf00      	nop
 80014cc:	20000200 	.word	0x20000200
 80014d0:	20000202 	.word	0x20000202
 80014d4:	20000204 	.word	0x20000204
 80014d8:	20000206 	.word	0x20000206
 80014dc:	20000208 	.word	0x20000208
 80014e0:	2000020a 	.word	0x2000020a
 80014e4:	2000020c 	.word	0x2000020c
 80014e8:	2000020e 	.word	0x2000020e
 80014ec:	20000210 	.word	0x20000210
 80014f0:	20000212 	.word	0x20000212
 80014f4:	20000214 	.word	0x20000214
 80014f8:	20000216 	.word	0x20000216
 80014fc:	20000218 	.word	0x20000218
 8001500:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[20] << 9) & 0x7FF);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3314      	adds	r3, #20
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	b21b      	sxth	r3, r3
 800150c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001510:	b21a      	sxth	r2, r3
 8001512:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	81fb      	strh	r3, [r7, #14]
	CH14 = v;
 800151c:	4a34      	ldr	r2, [pc, #208]	; (80015f0 <ParseSBUS_Frame+0x3ec>)
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	8013      	strh	r3, [r2, #0]

	// Channel 15
	v = buf_[20] >> 2;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3314      	adds	r3, #20
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[21] << 6) & 0x7FF);\
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3315      	adds	r3, #21
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	b21b      	sxth	r3, r3
 8001538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153c:	b21a      	sxth	r2, r3
 800153e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
	CH15 = v;
 8001548:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <ParseSBUS_Frame+0x3f0>)
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	8013      	strh	r3, [r2, #0]

	// Channel 16
	v = buf_[21] >> 5;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3315      	adds	r3, #21
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	b2db      	uxtb	r3, r3
 8001558:	81fb      	strh	r3, [r7, #14]
	v |= (((uint16_t) buf_[2] << 3) & 0x7FF);\
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3302      	adds	r3, #2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	b21b      	sxth	r3, r3
 8001564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001568:	b21a      	sxth	r2, r3
 800156a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	81fb      	strh	r3, [r7, #14]
	CH16 = v;
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <ParseSBUS_Frame+0x3f4>)
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	8013      	strh	r3, [r2, #0]

	// Channel 17
	binCH17 = (buf_[23] & CH17_MASK) != 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3317      	adds	r3, #23
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <ParseSBUS_Frame+0x3f8>)
 8001592:	701a      	strb	r2, [r3, #0]

	// Channel 18
	binCH18 = (buf_[23] & CH18_MASK) != 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3317      	adds	r3, #23
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <ParseSBUS_Frame+0x3fc>)
 80015ac:	701a      	strb	r2, [r3, #0]

	// Frame lost
	frame_lost = (buf_[23] & FRAME_LOST_MASK) != 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3317      	adds	r3, #23
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <ParseSBUS_Frame+0x400>)
 80015c6:	701a      	strb	r2, [r3, #0]

	// FailSafe
	failsafe = (buf_[23] & FAILSAFE_MASK) != 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3317      	adds	r3, #23
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <ParseSBUS_Frame+0x404>)
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e000      	b.n	80015e6 <ParseSBUS_Frame+0x3e2>
		return;
 80015e4:	bf00      	nop
}
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2000021a 	.word	0x2000021a
 80015f4:	2000021c 	.word	0x2000021c
 80015f8:	2000021e 	.word	0x2000021e
 80015fc:	20000220 	.word	0x20000220
 8001600:	20000221 	.word	0x20000221
 8001604:	20000222 	.word	0x20000222
 8001608:	20000223 	.word	0x20000223

0800160c <LL_USART_IsActiveFlag_FE>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b02      	cmp	r3, #2
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <LL_USART_IsActiveFlag_NE>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b04      	cmp	r3, #4
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <LL_USART_IsActiveFlag_ORE>:
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b08      	cmp	r3, #8
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <LL_USART_IsActiveFlag_RXNE>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b20      	cmp	r3, #32
 800168a:	bf0c      	ite	eq
 800168c:	2301      	moveq	r3, #1
 800168e:	2300      	movne	r3, #0
 8001690:	b2db      	uxtb	r3, r3
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <LL_USART_IsActiveFlag_TXE>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <LL_USART_IsEnabledIT_RXNE>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_USART_IsEnabledIT_TXE>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	SYS_IncTick();
 800174e:	f000 f877 	bl	8001840 <SYS_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <USART1_IRQHandler+0x50>)
 800176a:	f7ff ff85 	bl	8001678 <LL_USART_IsActiveFlag_RXNE>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <USART1_IRQHandler+0x22>
 8001774:	480f      	ldr	r0, [pc, #60]	; (80017b4 <USART1_IRQHandler+0x50>)
 8001776:	f7ff ffa3 	bl	80016c0 <LL_USART_IsEnabledIT_RXNE>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <USART1_IRQHandler+0x22>
	{
		USART1_RX_Callback();
 8001780:	f7ff fc2c 	bl	8000fdc <USART1_RX_Callback>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001784:	e013      	b.n	80017ae <USART1_IRQHandler+0x4a>
	else if(LL_USART_IsActiveFlag_ORE(USART1) || LL_USART_IsActiveFlag_FE(USART1) || LL_USART_IsActiveFlag_NE(USART1))
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <USART1_IRQHandler+0x50>)
 8001788:	f7ff ff64 	bl	8001654 <LL_USART_IsActiveFlag_ORE>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <USART1_IRQHandler+0x46>
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <USART1_IRQHandler+0x50>)
 8001794:	f7ff ff3a 	bl	800160c <LL_USART_IsActiveFlag_FE>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <USART1_IRQHandler+0x46>
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <USART1_IRQHandler+0x50>)
 80017a0:	f7ff ff46 	bl	8001630 <LL_USART_IsActiveFlag_NE>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <USART1_IRQHandler+0x4a>
		(void) USART1->DR;
 80017aa:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <USART1_IRQHandler+0x50>)
 80017ac:	685b      	ldr	r3, [r3, #4]
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40013800 	.word	0x40013800

080017b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2) || LL_USART_IsActiveFlag_NE(USART2))
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <USART2_IRQHandler+0x6c>)
 80017be:	f7ff ff49 	bl	8001654 <LL_USART_IsActiveFlag_ORE>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <USART2_IRQHandler+0x28>
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <USART2_IRQHandler+0x6c>)
 80017ca:	f7ff ff1f 	bl	800160c <LL_USART_IsActiveFlag_FE>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <USART2_IRQHandler+0x28>
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <USART2_IRQHandler+0x6c>)
 80017d6:	f7ff ff2b 	bl	8001630 <LL_USART_IsActiveFlag_NE>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <USART2_IRQHandler+0x2e>
	{
		(void) USART2->DR;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <USART2_IRQHandler+0x6c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e4:	e01b      	b.n	800181e <USART2_IRQHandler+0x66>
		if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80017e6:	480f      	ldr	r0, [pc, #60]	; (8001824 <USART2_IRQHandler+0x6c>)
 80017e8:	f7ff ff46 	bl	8001678 <LL_USART_IsActiveFlag_RXNE>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <USART2_IRQHandler+0x4a>
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <USART2_IRQHandler+0x6c>)
 80017f4:	f7ff ff64 	bl	80016c0 <LL_USART_IsEnabledIT_RXNE>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <USART2_IRQHandler+0x4a>
			USART2_RX_Callback();
 80017fe:	f000 fbad 	bl	8001f5c <USART2_RX_Callback>
		if (LL_USART_IsActiveFlag_TXE(USART2) && LL_USART_IsEnabledIT_TXE(USART2))
 8001802:	4808      	ldr	r0, [pc, #32]	; (8001824 <USART2_IRQHandler+0x6c>)
 8001804:	f7ff ff4a 	bl	800169c <LL_USART_IsActiveFlag_TXE>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <USART2_IRQHandler+0x66>
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <USART2_IRQHandler+0x6c>)
 8001810:	f7ff ff68 	bl	80016e4 <LL_USART_IsEnabledIT_TXE>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <USART2_IRQHandler+0x66>
			USART2_TX_Callback();
 800181a:	f7ff fbf1 	bl	8001000 <USART2_TX_Callback>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40004400 	.word	0x40004400

08001828 <SYS_ClearTick>:
 */
#include "systick.h"

volatile uint32_t uwTick;

void SYS_ClearTick(void) {
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	uwTick = 0;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <SYS_ClearTick+0x14>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000254 	.word	0x20000254

08001840 <SYS_IncTick>:

void SYS_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	uwTick ++;
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <SYS_IncTick+0x18>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a03      	ldr	r2, [pc, #12]	; (8001858 <SYS_IncTick+0x18>)
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000254 	.word	0x20000254

0800185c <SYS_GetTick>:

uint32_t SYS_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <SYS_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000254 	.word	0x20000254

08001870 <SYS_ResumeTick>:
	/* Disable SysTick Interrupt */
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}

void SYS_ResumeTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	/* Enable SysTick Interrupt */
	SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SYS_ResumeTick+0x18>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <SYS_ResumeTick+0x18>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	e000e010 	.word	0xe000e010

0800188c <LL_APB1_GRP1_EnableClock>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_APB2_GRP1_EnableClock>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000

080018ec <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d01c      	beq.n	8001956 <LL_TIM_OC_DisableFast+0x4a>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d017      	beq.n	8001952 <LL_TIM_OC_DisableFast+0x46>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d012      	beq.n	800194e <LL_TIM_OC_DisableFast+0x42>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d00d      	beq.n	800194a <LL_TIM_OC_DisableFast+0x3e>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001934:	d007      	beq.n	8001946 <LL_TIM_OC_DisableFast+0x3a>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	d101      	bne.n	8001942 <LL_TIM_OC_DisableFast+0x36>
 800193e:	2305      	movs	r3, #5
 8001940:	e00a      	b.n	8001958 <LL_TIM_OC_DisableFast+0x4c>
 8001942:	2306      	movs	r3, #6
 8001944:	e008      	b.n	8001958 <LL_TIM_OC_DisableFast+0x4c>
 8001946:	2304      	movs	r3, #4
 8001948:	e006      	b.n	8001958 <LL_TIM_OC_DisableFast+0x4c>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <LL_TIM_OC_DisableFast+0x4c>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <LL_TIM_OC_DisableFast+0x4c>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_TIM_OC_DisableFast+0x4c>
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3318      	adds	r3, #24
 800195e:	4619      	mov	r1, r3
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LL_TIM_OC_DisableFast+0x80>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	440b      	add	r3, r1
 8001968:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <LL_TIM_OC_DisableFast+0x84>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	4619      	mov	r1, r3
 8001976:	2304      	movs	r3, #4
 8001978:	408b      	lsls	r3, r1
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	601a      	str	r2, [r3, #0]

}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	08002d98 	.word	0x08002d98
 8001990:	08002da0 	.word	0x08002da0

08001994 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d01c      	beq.n	80019de <LL_TIM_OC_EnablePreload+0x4a>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d017      	beq.n	80019da <LL_TIM_OC_EnablePreload+0x46>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d012      	beq.n	80019d6 <LL_TIM_OC_EnablePreload+0x42>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b40      	cmp	r3, #64	; 0x40
 80019b4:	d00d      	beq.n	80019d2 <LL_TIM_OC_EnablePreload+0x3e>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019bc:	d007      	beq.n	80019ce <LL_TIM_OC_EnablePreload+0x3a>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c4:	d101      	bne.n	80019ca <LL_TIM_OC_EnablePreload+0x36>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e00a      	b.n	80019e0 <LL_TIM_OC_EnablePreload+0x4c>
 80019ca:	2306      	movs	r3, #6
 80019cc:	e008      	b.n	80019e0 <LL_TIM_OC_EnablePreload+0x4c>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <LL_TIM_OC_EnablePreload+0x4c>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <LL_TIM_OC_EnablePreload+0x4c>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <LL_TIM_OC_EnablePreload+0x4c>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_TIM_OC_EnablePreload+0x4c>
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3318      	adds	r3, #24
 80019e6:	4619      	mov	r1, r3
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LL_TIM_OC_EnablePreload+0x80>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	440b      	add	r3, r1
 80019f0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <LL_TIM_OC_EnablePreload+0x84>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	4619      	mov	r1, r3
 80019fe:	2308      	movs	r3, #8
 8001a00:	408b      	lsls	r3, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	08002d98 	.word	0x08002d98
 8001a18:	08002da0 	.word	0x08002da0

08001a1c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a2e:	f023 0307 	bic.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	605a      	str	r2, [r3, #4]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 f962 	bl	8002d70 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7ff fee6 	bl	800188c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 114;
 8001ac0:	2372      	movs	r3, #114	; 0x72
 8001ac2:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 2004;
 8001ac8:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4843      	ldr	r0, [pc, #268]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001ada:	f000 fdcd 	bl	8002678 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001ade:	4842      	ldr	r0, [pc, #264]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001ae0:	f7ff ff04 	bl	80018ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4840      	ldr	r0, [pc, #256]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001ae8:	f7ff ff98 	bl	8001a1c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001aec:	2101      	movs	r1, #1
 8001aee:	483e      	ldr	r0, [pc, #248]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001af0:	f7ff ff50 	bl	8001994 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 990;
 8001b00:	f240 33de 	movw	r3, #990	; 0x3de
 8001b04:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2101      	movs	r1, #1
 8001b12:	4835      	ldr	r0, [pc, #212]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b14:	f000 fe0e 	bl	8002734 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4833      	ldr	r0, [pc, #204]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b1c:	f7ff fef6 	bl	800190c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8001b20:	2110      	movs	r1, #16
 8001b22:	4831      	ldr	r0, [pc, #196]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b24:	f7ff ff36 	bl	8001994 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 1001;
 8001b28:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001b2c:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	461a      	mov	r2, r3
 8001b34:	2110      	movs	r1, #16
 8001b36:	482c      	ldr	r0, [pc, #176]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b38:	f000 fdfc 	bl	8002734 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	482a      	ldr	r0, [pc, #168]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b40:	f7ff fee4 	bl	800190c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8001b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b48:	4827      	ldr	r0, [pc, #156]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b4a:	f7ff ff23 	bl	8001994 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	461a      	mov	r2, r3
 8001b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b58:	4823      	ldr	r0, [pc, #140]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b5a:	f000 fdeb 	bl	8002734 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8001b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b62:	4821      	ldr	r0, [pc, #132]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b64:	f7ff fed2 	bl	800190c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6c:	481e      	ldr	r0, [pc, #120]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b6e:	f7ff ff11 	bl	8001994 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	461a      	mov	r2, r3
 8001b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7c:	481a      	ldr	r0, [pc, #104]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b7e:	f000 fdd9 	bl	8002734 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	4818      	ldr	r0, [pc, #96]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b88:	f7ff fec0 	bl	800190c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4816      	ldr	r0, [pc, #88]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b90:	f7ff ff58 	bl	8001a44 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001b94:	4814      	ldr	r0, [pc, #80]	; (8001be8 <MX_TIM3_Init+0x160>)
 8001b96:	f7ff ff67 	bl	8001a68 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001b9a:	2004      	movs	r0, #4
 8001b9c:	f7ff fe8e 	bl	80018bc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001ba0:	2008      	movs	r0, #8
 8001ba2:	f7ff fe8b 	bl	80018bc <LL_APB2_GRP1_EnableClock>
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = PWM_SPEED_Pin|PWM_RUDE_Pin;
 8001ba6:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bac:	2309      	movs	r3, #9
 8001bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	463b      	mov	r3, r7
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <MX_TIM3_Init+0x164>)
 8001bbe:	f000 fb79 	bl	80022b4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM_CAM_YAW_Pin|PWM_CAM_PITCH_Pin;
 8001bc2:	f240 3303 	movw	r3, #771	; 0x303
 8001bc6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bc8:	2309      	movs	r3, #9
 8001bca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_TIM3_Init+0x168>)
 8001bda:	f000 fb6b 	bl	80022b4 <LL_GPIO_Init>

}
 8001bde:	bf00      	nop
 8001be0:	3748      	adds	r7, #72	; 0x48
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00

08001bf4 <__NVIC_GetPriorityGrouping>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <LL_APB1_GRP1_EnableClock>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <LL_APB2_GRP1_EnableClock>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <LL_USART_Enable>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <LL_USART_ConfigAsyncMode>:
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	615a      	str	r2, [r3, #20]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dd4:	f7ff ffac 	bl	8001d30 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f7ff ffa9 	bl	8001d30 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = U1TX_Pin;
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <MX_USART1_UART_Init+0xc8>)
 8001de0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001de2:	2309      	movs	r3, #9
 8001de4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(U1TX_GPIO_Port, &GPIO_InitStruct);
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4820      	ldr	r0, [pc, #128]	; (8001e74 <MX_USART1_UART_Init+0xcc>)
 8001df4:	f000 fa5e 	bl	80022b4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sBUS_Pin;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <MX_USART1_UART_Init+0xd0>)
 8001dfa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sBUS_GPIO_Port, &GPIO_InitStruct);
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	481a      	ldr	r0, [pc, #104]	; (8001e74 <MX_USART1_UART_Init+0xcc>)
 8001e0a:	f000 fa53 	bl	80022b4 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e0e:	f7ff fef1 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff3f 	bl	8001c9c <NVIC_EncodePriority>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4619      	mov	r1, r3
 8001e22:	2025      	movs	r0, #37	; 0x25
 8001e24:	f7ff ff10 	bl	8001c48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001e28:	2025      	movs	r0, #37	; 0x25
 8001e2a:	f7ff fef1 	bl	8001c10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_USART1_UART_Init+0xd4>)
 8001e30:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e42:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001e44:	2304      	movs	r3, #4
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	480a      	ldr	r0, [pc, #40]	; (8001e80 <MX_USART1_UART_Init+0xd8>)
 8001e58:	f000 fed0 	bl	8002bfc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001e5c:	4808      	ldr	r0, [pc, #32]	; (8001e80 <MX_USART1_UART_Init+0xd8>)
 8001e5e:	f7ff ff8e 	bl	8001d7e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <MX_USART1_UART_Init+0xd8>)
 8001e64:	f7ff ff7c 	bl	8001d60 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	; 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	04020002 	.word	0x04020002
 8001e74:	40010800 	.word	0x40010800
 8001e78:	04040004 	.word	0x04040004
 8001e7c:	000186a0 	.word	0x000186a0
 8001e80:	40013800 	.word	0x40013800

08001e84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	; 0x30
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001eac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001eb0:	f7ff ff26 	bl	8001d00 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001eb4:	2004      	movs	r0, #4
 8001eb6:	f7ff ff3b 	bl	8001d30 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LOG_OUT_Pin;
 8001eba:	f240 4304 	movw	r3, #1028	; 0x404
 8001ebe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ec0:	2309      	movs	r3, #9
 8001ec2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LOG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4820      	ldr	r0, [pc, #128]	; (8001f54 <MX_USART2_UART_Init+0xd0>)
 8001ed2:	f000 f9ef 	bl	80022b4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = U2RX_Pin;
 8001ed6:	f640 0308 	movw	r3, #2056	; 0x808
 8001eda:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001edc:	2308      	movs	r3, #8
 8001ede:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(U2RX_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481a      	ldr	r0, [pc, #104]	; (8001f54 <MX_USART2_UART_Init+0xd0>)
 8001eea:	f000 f9e3 	bl	80022b4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001eee:	f7ff fe81 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fecf 	bl	8001c9c <NVIC_EncodePriority>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	2026      	movs	r0, #38	; 0x26
 8001f04:	f7ff fea0 	bl	8001c48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001f08:	2026      	movs	r0, #38	; 0x26
 8001f0a:	f7ff fe81 	bl	8001c10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001f0e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f12:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f24:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f26:	230c      	movs	r3, #12
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4807      	ldr	r0, [pc, #28]	; (8001f58 <MX_USART2_UART_Init+0xd4>)
 8001f3a:	f000 fe5f 	bl	8002bfc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001f3e:	4806      	ldr	r0, [pc, #24]	; (8001f58 <MX_USART2_UART_Init+0xd4>)
 8001f40:	f7ff ff1d 	bl	8001d7e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_USART2_UART_Init+0xd4>)
 8001f46:	f7ff ff0b 	bl	8001d60 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	3730      	adds	r7, #48	; 0x30
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40010800 	.word	0x40010800
 8001f58:	40004400 	.word	0x40004400

08001f5c <USART2_RX_Callback>:
{
	// Override this
}

__weak void USART2_RX_Callback(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	// Override this
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <FLASH_Unlock+0x18>)
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <FLASH_Unlock+0x1c>)
 8001f7c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001f7e:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <FLASH_Unlock+0x18>)
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <FLASH_Unlock+0x20>)
 8001f82:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	45670123 	.word	0x45670123
 8001f94:	cdef89ab 	.word	0xcdef89ab

08001f98 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001fa4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001fa8:	f000 f8aa 	bl	8002100 <FLASH_WaitForLastOperation>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d11b      	bne.n	8001fee <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd2:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001fd4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001fd8:	f000 f892 	bl	8002100 <FLASH_WaitForLastOperation>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <FLASH_ErasePage+0x60>)
 8001fe6:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001fea:	4013      	ands	r3, r2
 8001fec:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000

08001ffc <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8002008:	2304      	movs	r3, #4
 800200a:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800200c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002010:	f000 f876 	bl	8002100 <FLASH_WaitForLastOperation>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b04      	cmp	r3, #4
 800201c:	d115      	bne.n	800204a <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <FLASH_ProgramHalfWord+0x58>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <FLASH_ProgramHalfWord+0x58>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	887a      	ldrh	r2, [r7, #2]
 800202e:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002030:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002034:	f000 f864 	bl	8002100 <FLASH_WaitForLastOperation>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <FLASH_ProgramHalfWord+0x58>)
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <FLASH_ProgramHalfWord+0x58>)
 8002042:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002046:	4013      	ands	r3, r2
 8002048:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40022000 	.word	0x40022000

08002058 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetStatus(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800205e:	2304      	movs	r3, #4
 8002060:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <FLASH_GetStatus+0x50>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800206e:	2301      	movs	r3, #1
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e013      	b.n	800209c <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <FLASH_GetStatus+0x50>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8002080:	2302      	movs	r3, #2
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	e00a      	b.n	800209c <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <FLASH_GetStatus+0x50>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <FLASH_GetStatus+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8002092:	2303      	movs	r3, #3
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	e001      	b.n	800209c <FLASH_GetStatus+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8002098:	2304      	movs	r3, #4
 800209a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 800209c:	79fb      	ldrb	r3, [r7, #7]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40022000 	.word	0x40022000

080020ac <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80020b2:	2304      	movs	r3, #4
 80020b4:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <FLASH_GetBank1Status+0x50>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d102      	bne.n	80020c8 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 80020c2:	2301      	movs	r3, #1
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	e013      	b.n	80020f0 <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <FLASH_GetBank1Status+0x50>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 80020d4:	2302      	movs	r3, #2
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	e00a      	b.n	80020f0 <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <FLASH_GetBank1Status+0x50>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 80020e6:	2303      	movs	r3, #3
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	e001      	b.n	80020f0 <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80020ec:	2304      	movs	r3, #4
 80020ee:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 80020f0:	79fb      	ldrb	r3, [r7, #7]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40022000 	.word	0x40022000

08002100 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8002108:	2304      	movs	r3, #4
 800210a:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 800210c:	f7ff ffce 	bl	80020ac <FLASH_GetBank1Status>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002114:	e006      	b.n	8002124 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 8002116:	f7ff ffc9 	bl	80020ac <FLASH_GetBank1Status>
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3b01      	subs	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <FLASH_WaitForLastOperation+0x30>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f2      	bne.n	8002116 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8002136:	2305      	movs	r3, #5
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <LL_GPIO_SetPinMode>:
{
 8002144:	b490      	push	{r4, r7}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0e1b      	lsrs	r3, r3, #24
 8002158:	4413      	add	r3, r2
 800215a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	210f      	movs	r1, #15
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	401a      	ands	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	61bb      	str	r3, [r7, #24]
  return result;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	6023      	str	r3, [r4, #0]
}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc90      	pop	{r4, r7}
 80021a6:	4770      	bx	lr

080021a8 <LL_GPIO_SetPinSpeed>:
{
 80021a8:	b490      	push	{r4, r7}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	0e1b      	lsrs	r3, r3, #24
 80021bc:	4413      	add	r3, r2
 80021be:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80021c0:	6822      	ldr	r2, [r4, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	613b      	str	r3, [r7, #16]
  return result;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	2103      	movs	r1, #3
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	401a      	ands	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	61bb      	str	r3, [r7, #24]
  return result;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	6023      	str	r3, [r4, #0]
}
 8002202:	bf00      	nop
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bc90      	pop	{r4, r7}
 800220a:	4770      	bx	lr

0800220c <LL_GPIO_SetPinOutputType>:
{
 800220c:	b490      	push	{r4, r7}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	0e1b      	lsrs	r3, r3, #24
 8002220:	4413      	add	r3, r2
 8002222:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	613b      	str	r3, [r7, #16]
  return result;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	2104      	movs	r1, #4
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	401a      	ands	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	61bb      	str	r3, [r7, #24]
  return result;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	6023      	str	r3, [r4, #0]
}
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bc90      	pop	{r4, r7}
 800226e:	4770      	bx	lr

08002270 <LL_GPIO_SetPinPull>:
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	613b      	str	r3, [r7, #16]
  return result;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	408b      	lsls	r3, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	60da      	str	r2, [r3, #12]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  return result;
 80022d4:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80022de:	e044      	b.n	800236a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	409a      	lsls	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03a      	beq.n	8002364 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b07      	cmp	r3, #7
 80022f2:	d806      	bhi.n	8002302 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80022f4:	f240 1201 	movw	r2, #257	; 0x101
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	e008      	b.n	8002314 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b08      	subs	r3, #8
 8002306:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002312:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d106      	bne.n	800232a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	461a      	mov	r2, r3
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ffa3 	bl	8002270 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	461a      	mov	r2, r3
 8002330:	69b9      	ldr	r1, [r7, #24]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff06 	bl	8002144 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d003      	beq.n	8002348 <LL_GPIO_Init+0x94>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b09      	cmp	r3, #9
 8002346:	d10d      	bne.n	8002364 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	461a      	mov	r2, r3
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff29 	bl	80021a8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	461a      	mov	r2, r3
 800235c:	69b9      	ldr	r1, [r7, #24]
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ff54 	bl	800220c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3301      	adds	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1b4      	bne.n	80022e0 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <LL_RCC_GetSysClkSource>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <LL_RCC_GetSysClkSource+0x14>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40021000 	.word	0x40021000

08002398 <LL_RCC_GetAHBPrescaler>:
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <LL_RCC_GetAHBPrescaler+0x14>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_GetAPB1Prescaler>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000

080023c8 <LL_RCC_GetAPB2Prescaler>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <LL_RCC_GetAPB2Prescaler+0x14>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000

080023e0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <LL_RCC_PLL_GetMainSource+0x14>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <LL_RCC_PLL_GetMultiplicator+0x14>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000

08002410 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <LL_RCC_PLL_GetPrediv+0x18>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c5b      	lsrs	r3, r3, #17
 800241a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000

0800242c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002434:	f000 f820 	bl	8002478 <RCC_GetSystemClockFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f83e 	bl	80024c4 <RCC_GetHCLKClockFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f84c 	bl	80024f0 <RCC_GetPCLK1ClockFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f858 	bl	8002518 <RCC_GetPCLK2ClockFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60da      	str	r2, [r3, #12]
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002482:	f7ff ff7d 	bl	8002380 <LL_RCC_GetSysClkSource>
 8002486:	4603      	mov	r3, r0
 8002488:	2b08      	cmp	r3, #8
 800248a:	d00c      	beq.n	80024a6 <RCC_GetSystemClockFreq+0x2e>
 800248c:	2b08      	cmp	r3, #8
 800248e:	d80e      	bhi.n	80024ae <RCC_GetSystemClockFreq+0x36>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <RCC_GetSystemClockFreq+0x22>
 8002494:	2b04      	cmp	r3, #4
 8002496:	d003      	beq.n	80024a0 <RCC_GetSystemClockFreq+0x28>
 8002498:	e009      	b.n	80024ae <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <RCC_GetSystemClockFreq+0x48>)
 800249c:	607b      	str	r3, [r7, #4]
      break;
 800249e:	e009      	b.n	80024b4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <RCC_GetSystemClockFreq+0x48>)
 80024a2:	607b      	str	r3, [r7, #4]
      break;
 80024a4:	e006      	b.n	80024b4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80024a6:	f000 f84b 	bl	8002540 <RCC_PLL_GetFreqDomain_SYS>
 80024aa:	6078      	str	r0, [r7, #4]
      break;
 80024ac:	e002      	b.n	80024b4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <RCC_GetSystemClockFreq+0x48>)
 80024b0:	607b      	str	r3, [r7, #4]
      break;
 80024b2:	bf00      	nop
  }

  return frequency;
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	007a1200 	.word	0x007a1200

080024c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80024cc:	f7ff ff64 	bl	8002398 <LL_RCC_GetAHBPrescaler>
 80024d0:	4603      	mov	r3, r0
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <RCC_GetHCLKClockFreq+0x28>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	40d3      	lsrs	r3, r2
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	08002da8 	.word	0x08002da8

080024f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80024f8:	f7ff ff5a 	bl	80023b0 <LL_RCC_GetAPB1Prescaler>
 80024fc:	4603      	mov	r3, r0
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <RCC_GetPCLK1ClockFreq+0x24>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	461a      	mov	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	40d3      	lsrs	r3, r2
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	08002db8 	.word	0x08002db8

08002518 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002520:	f7ff ff52 	bl	80023c8 <LL_RCC_GetAPB2Prescaler>
 8002524:	4603      	mov	r3, r0
 8002526:	0adb      	lsrs	r3, r3, #11
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <RCC_GetPCLK2ClockFreq+0x24>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	40d3      	lsrs	r3, r2
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	08002db8 	.word	0x08002db8

08002540 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800254e:	f7ff ff47 	bl	80023e0 <LL_RCC_PLL_GetMainSource>
 8002552:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d003      	beq.n	800256a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002562:	e00b      	b.n	800257c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002566:	607b      	str	r3, [r7, #4]
      break;
 8002568:	e00b      	b.n	8002582 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800256a:	f7ff ff51 	bl	8002410 <LL_RCC_PLL_GetPrediv>
 800256e:	4603      	mov	r3, r0
 8002570:	3301      	adds	r3, #1
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	607b      	str	r3, [r7, #4]
      break;
 800257a:	e002      	b.n	8002582 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800257e:	607b      	str	r3, [r7, #4]
      break;
 8002580:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002582:	f7ff ff39 	bl	80023f8 <LL_RCC_PLL_GetMultiplicator>
 8002586:	4603      	mov	r3, r0
 8002588:	0c9b      	lsrs	r3, r3, #18
 800258a:	3302      	adds	r3, #2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	003d0900 	.word	0x003d0900
 80025a0:	007a1200 	.word	0x007a1200

080025a4 <LL_TIM_SetPrescaler>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <LL_TIM_SetAutoReload>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <LL_TIM_SetRepetitionCounter>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <LL_TIM_OC_SetCompareCH1>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <LL_TIM_OC_SetCompareCH2>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <LL_TIM_OC_SetCompareCH3>:
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <LL_TIM_OC_SetCompareCH4>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	615a      	str	r2, [r3, #20]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a27      	ldr	r2, [pc, #156]	; (8002728 <LL_TIM_Init+0xb0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00b      	beq.n	80026a8 <LL_TIM_Init+0x30>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d007      	beq.n	80026a8 <LL_TIM_Init+0x30>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <LL_TIM_Init+0xb4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <LL_TIM_Init+0x30>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a23      	ldr	r2, [pc, #140]	; (8002730 <LL_TIM_Init+0xb8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d106      	bne.n	80026b6 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <LL_TIM_Init+0xb0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <LL_TIM_Init+0x5e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d007      	beq.n	80026d6 <LL_TIM_Init+0x5e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <LL_TIM_Init+0xb4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <LL_TIM_Init+0x5e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <LL_TIM_Init+0xb8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d106      	bne.n	80026e4 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff64 	bl	80025be <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff51 	bl	80025a4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a08      	ldr	r2, [pc, #32]	; (8002728 <LL_TIM_Init+0xb0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d105      	bne.n	8002716 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff61 	bl	80025d8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff9f 	bl	800265a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40012c00 	.word	0x40012c00
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800

08002734 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	d027      	beq.n	800279c <LL_TIM_OC_Init+0x68>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d82a      	bhi.n	80027aa <LL_TIM_OC_Init+0x76>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275a:	d018      	beq.n	800278e <LL_TIM_OC_Init+0x5a>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d822      	bhi.n	80027aa <LL_TIM_OC_Init+0x76>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d003      	beq.n	8002772 <LL_TIM_OC_Init+0x3e>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b10      	cmp	r3, #16
 800276e:	d007      	beq.n	8002780 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002770:	e01b      	b.n	80027aa <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f81f 	bl	80027b8 <OC1Config>
 800277a:	4603      	mov	r3, r0
 800277c:	75fb      	strb	r3, [r7, #23]
      break;
 800277e:	e015      	b.n	80027ac <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f87e 	bl	8002884 <OC2Config>
 8002788:	4603      	mov	r3, r0
 800278a:	75fb      	strb	r3, [r7, #23]
      break;
 800278c:	e00e      	b.n	80027ac <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f8e1 	bl	8002958 <OC3Config>
 8002796:	4603      	mov	r3, r0
 8002798:	75fb      	strb	r3, [r7, #23]
      break;
 800279a:	e007      	b.n	80027ac <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f944 	bl	8002a2c <OC4Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]
      break;
 80027a8:	e000      	b.n	80027ac <LL_TIM_OC_Init+0x78>
      break;
 80027aa:	bf00      	nop
  }

  return result;
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f023 0202 	bic.w	r2, r3, #2
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <OC1Config+0xc8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d11e      	bne.n	8002858 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f023 0208 	bic.w	r2, r3, #8
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 0204 	bic.w	r2, r3, #4
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fec1 	bl	80025f2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40012c00 	.word	0x40012c00

08002884 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0210 	bic.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0220 	bic.w	r2, r3, #32
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0210 	bic.w	r2, r3, #16
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <OC2Config+0xd0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d11f      	bne.n	800292c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	019b      	lsls	r3, r3, #6
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	019b      	lsls	r3, r3, #6
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fe64 	bl	800260c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40012c00 	.word	0x40012c00

08002958 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0303 	bic.w	r3, r3, #3
 8002986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <OC3Config+0xd0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d11f      	bne.n	80029fe <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fe08 	bl	8002626 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00

08002a2c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	031b      	lsls	r3, r3, #12
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <OC4Config+0xa0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d107      	bne.n	8002aa4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	019b      	lsls	r3, r3, #6
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fdc2 	bl	8002640 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40012c00 	.word	0x40012c00

08002ad0 <LL_USART_IsEnabled>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_USART_SetStopBitsLength>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <LL_USART_SetHWFlowCtrl>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	615a      	str	r2, [r3, #20]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <LL_USART_SetBaudRate>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009a      	lsls	r2, r3, #2
 8002b56:	441a      	add	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <LL_USART_SetBaudRate+0xb8>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <LL_USART_SetBaudRate+0xb8>)
 8002b84:	fba3 0302 	umull	r0, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2064      	movs	r0, #100	; 0x64
 8002b8c:	fb00 f303 	mul.w	r3, r0, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	3332      	adds	r3, #50	; 0x32
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <LL_USART_SetBaudRate+0xb8>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	b299      	uxth	r1, r3
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <LL_USART_SetBaudRate+0xb8>)
 8002bc0:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2064      	movs	r0, #100	; 0x64
 8002bc8:	fb00 f303 	mul.w	r3, r0, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	; 0x32
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <LL_USART_SetBaudRate+0xb8>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	440b      	add	r3, r1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	51eb851f 	.word	0x51eb851f

08002bfc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff5e 	bl	8002ad0 <LL_USART_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d145      	bne.n	8002ca6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c22:	f023 030c 	bic.w	r3, r3, #12
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6851      	ldr	r1, [r2, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	6912      	ldr	r2, [r2, #16]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff57 	bl	8002af6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ff63 	bl	8002b1a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fbe7 	bl	800242c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <LL_USART_Init+0xb4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d102      	bne.n	8002c6c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e00c      	b.n	8002c86 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <LL_USART_Init+0xb8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e005      	b.n	8002c86 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <LL_USART_Init+0xbc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00c      	beq.n	8002ca6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff4d 	bl	8002b40 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40004400 	.word	0x40004400
 8002cb8:	40004800 	.word	0x40004800

08002cbc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <LL_InitTick+0x30>)
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <LL_InitTick+0x30>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <LL_InitTick+0x30>)
 8002cdc:	2205      	movs	r2, #5
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ffdd 	bl	8002cbc <LL_InitTick>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002d14:	4a03      	ldr	r2, [pc, #12]	; (8002d24 <LL_SetSystemCoreClock+0x18>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000000 	.word	0x20000000

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4d0c      	ldr	r5, [pc, #48]	; (8002d60 <__libc_init_array+0x38>)
 8002d2e:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	f000 f822 	bl	8002d80 <_init>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	4d0a      	ldr	r5, [pc, #40]	; (8002d68 <__libc_init_array+0x40>)
 8002d40:	4c0a      	ldr	r4, [pc, #40]	; (8002d6c <__libc_init_array+0x44>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002dc0 	.word	0x08002dc0
 8002d64:	08002dc0 	.word	0x08002dc0
 8002d68:	08002dc0 	.word	0x08002dc0
 8002d6c:	08002dc4 	.word	0x08002dc4

08002d70 <memset>:
 8002d70:	4603      	mov	r3, r0
 8002d72:	4402      	add	r2, r0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d100      	bne.n	8002d7a <memset+0xa>
 8002d78:	4770      	bx	lr
 8002d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7e:	e7f9      	b.n	8002d74 <memset+0x4>

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
